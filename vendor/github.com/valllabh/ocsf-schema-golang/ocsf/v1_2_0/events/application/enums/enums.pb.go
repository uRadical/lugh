// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_2_0/events/application/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type API_ACTIVITY_SEVERITY_ID int32

const (
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_UNKNOWN       API_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_INFORMATIONAL API_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_LOW           API_ACTIVITY_SEVERITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_MEDIUM        API_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_HIGH          API_ACTIVITY_SEVERITY_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_CRITICAL      API_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_FATAL         API_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	API_ACTIVITY_SEVERITY_ID_API_ACTIVITY_SEVERITY_ID_OTHER         API_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for API_ACTIVITY_SEVERITY_ID.
var (
	API_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "API_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "API_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "API_ACTIVITY_SEVERITY_ID_LOW",
		3:  "API_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "API_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "API_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "API_ACTIVITY_SEVERITY_ID_FATAL",
		99: "API_ACTIVITY_SEVERITY_ID_OTHER",
	}
	API_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"API_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"API_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"API_ACTIVITY_SEVERITY_ID_LOW":           2,
		"API_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"API_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"API_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"API_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"API_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x API_ACTIVITY_SEVERITY_ID) Enum() *API_ACTIVITY_SEVERITY_ID {
	p := new(API_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x API_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[0].Descriptor()
}

func (API_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[0]
}

func (x API_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (API_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{0}
}

type DATASTORE_ACTIVITY_CATEGORY_UID int32

const (
	DATASTORE_ACTIVITY_CATEGORY_UID_DATASTORE_ACTIVITY_CATEGORY_UID_UNSPECIFIED          DATASTORE_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	DATASTORE_ACTIVITY_CATEGORY_UID_DATASTORE_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY DATASTORE_ACTIVITY_CATEGORY_UID = 6 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for DATASTORE_ACTIVITY_CATEGORY_UID.
var (
	DATASTORE_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "DATASTORE_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		6: "DATASTORE_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY",
	}
	DATASTORE_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"DATASTORE_ACTIVITY_CATEGORY_UID_UNSPECIFIED":          0,
		"DATASTORE_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY": 6,
	}
)

func (x DATASTORE_ACTIVITY_CATEGORY_UID) Enum() *DATASTORE_ACTIVITY_CATEGORY_UID {
	p := new(DATASTORE_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[1].Descriptor()
}

func (DATASTORE_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[1]
}

func (x DATASTORE_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (DATASTORE_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{1}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_UNKNOWN WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_SUCCESS WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_FAILURE WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_OTHER   WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_FAILURE",
		99: "WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_OTHER",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_FAILURE": 2,
		"WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[2].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[2]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{2}
}

type SCAN_ACTIVITY_TYPE_UID int32

const (
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_UNSPECIFIED                      SCAN_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_UNKNOWN            SCAN_ACTIVITY_TYPE_UID = 600700 // Type: OCSF_VALUE; EnumValue: 600700;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_STARTED            SCAN_ACTIVITY_TYPE_UID = 600701 // EnumValue: 600701; Type: OCSF_VALUE;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_COMPLETED          SCAN_ACTIVITY_TYPE_UID = 600702 // Type: OCSF_VALUE; EnumValue: 600702;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_CANCELLED          SCAN_ACTIVITY_TYPE_UID = 600703 // Type: OCSF_VALUE; EnumValue: 600703;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_DURATION_VIOLATION SCAN_ACTIVITY_TYPE_UID = 600704 // Type: OCSF_VALUE; EnumValue: 600704;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_PAUSE_VIOLATION    SCAN_ACTIVITY_TYPE_UID = 600705 // Type: OCSF_VALUE; EnumValue: 600705;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_ERROR              SCAN_ACTIVITY_TYPE_UID = 600706 // Type: OCSF_VALUE; EnumValue: 600706;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_PAUSED             SCAN_ACTIVITY_TYPE_UID = 600707 // Type: OCSF_VALUE; EnumValue: 600707;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_RESUMED            SCAN_ACTIVITY_TYPE_UID = 600708 // Type: OCSF_VALUE; EnumValue: 600708;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_RESTARTED          SCAN_ACTIVITY_TYPE_UID = 600709 // EnumValue: 600709; Type: OCSF_VALUE;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_DELAYED            SCAN_ACTIVITY_TYPE_UID = 600710 // Type: OCSF_VALUE; EnumValue: 600710;
	SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_OTHER              SCAN_ACTIVITY_TYPE_UID = 600799 // Type: OCSF_VALUE; EnumValue: 600799;
)

// Enum value maps for SCAN_ACTIVITY_TYPE_UID.
var (
	SCAN_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "SCAN_ACTIVITY_TYPE_UID_UNSPECIFIED",
		600700: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_UNKNOWN",
		600701: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_STARTED",
		600702: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_COMPLETED",
		600703: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_CANCELLED",
		600704: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_DURATION_VIOLATION",
		600705: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_PAUSE_VIOLATION",
		600706: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_ERROR",
		600707: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_PAUSED",
		600708: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_RESUMED",
		600709: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_RESTARTED",
		600710: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_DELAYED",
		600799: "SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_OTHER",
	}
	SCAN_ACTIVITY_TYPE_UID_value = map[string]int32{
		"SCAN_ACTIVITY_TYPE_UID_UNSPECIFIED":                      0,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_UNKNOWN":            600700,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_STARTED":            600701,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_COMPLETED":          600702,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_CANCELLED":          600703,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_DURATION_VIOLATION": 600704,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_PAUSE_VIOLATION":    600705,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_ERROR":              600706,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_PAUSED":             600707,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_RESUMED":            600708,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_RESTARTED":          600709,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_DELAYED":            600710,
		"SCAN_ACTIVITY_TYPE_UID_SCAN_ACTIVITY_OTHER":              600799,
	}
)

func (x SCAN_ACTIVITY_TYPE_UID) Enum() *SCAN_ACTIVITY_TYPE_UID {
	p := new(SCAN_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x SCAN_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCAN_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[3].Descriptor()
}

func (SCAN_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[3]
}

func (x SCAN_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCAN_ACTIVITY_TYPE_UID.Descriptor instead.
func (SCAN_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{3}
}

type SCAN_ACTIVITY_STATUS_ID int32

const (
	SCAN_ACTIVITY_STATUS_ID_SCAN_ACTIVITY_STATUS_ID_UNKNOWN SCAN_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SCAN_ACTIVITY_STATUS_ID_SCAN_ACTIVITY_STATUS_ID_SUCCESS SCAN_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SCAN_ACTIVITY_STATUS_ID_SCAN_ACTIVITY_STATUS_ID_FAILURE SCAN_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SCAN_ACTIVITY_STATUS_ID_SCAN_ACTIVITY_STATUS_ID_OTHER   SCAN_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SCAN_ACTIVITY_STATUS_ID.
var (
	SCAN_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "SCAN_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "SCAN_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "SCAN_ACTIVITY_STATUS_ID_FAILURE",
		99: "SCAN_ACTIVITY_STATUS_ID_OTHER",
	}
	SCAN_ACTIVITY_STATUS_ID_value = map[string]int32{
		"SCAN_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"SCAN_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"SCAN_ACTIVITY_STATUS_ID_FAILURE": 2,
		"SCAN_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x SCAN_ACTIVITY_STATUS_ID) Enum() *SCAN_ACTIVITY_STATUS_ID {
	p := new(SCAN_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x SCAN_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCAN_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[4].Descriptor()
}

func (SCAN_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[4]
}

func (x SCAN_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCAN_ACTIVITY_STATUS_ID.Descriptor instead.
func (SCAN_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{4}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN       WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_GRANT  WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_DENY   WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_REVOKE WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_ERROR  WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_OTHER         WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_GRANT",
		2:  "WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_DENY",
		3:  "WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_REVOKE",
		4:  "WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_ERROR",
		99: "WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_UNKNOWN":       0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_GRANT":  1,
		"WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_DENY":   2,
		"WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_REVOKE": 3,
		"WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_ACCESS_ERROR":  4,
		"WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID_OTHER":         99,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[5].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[5]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{5}
}

type WEB_RESOURCES_ACTIVITY_ACTION_ID int32

const (
	WEB_RESOURCES_ACTIVITY_ACTION_ID_WEB_RESOURCES_ACTIVITY_ACTION_ID_UNKNOWN WEB_RESOURCES_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WEB_RESOURCES_ACTIVITY_ACTION_ID_WEB_RESOURCES_ACTIVITY_ACTION_ID_ALLOWED WEB_RESOURCES_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	WEB_RESOURCES_ACTIVITY_ACTION_ID_WEB_RESOURCES_ACTIVITY_ACTION_ID_DENIED  WEB_RESOURCES_ACTIVITY_ACTION_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_ACTION_ID_WEB_RESOURCES_ACTIVITY_ACTION_ID_OTHER   WEB_RESOURCES_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_ACTION_ID.
var (
	WEB_RESOURCES_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "WEB_RESOURCES_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "WEB_RESOURCES_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "WEB_RESOURCES_ACTIVITY_ACTION_ID_DENIED",
		99: "WEB_RESOURCES_ACTIVITY_ACTION_ID_OTHER",
	}
	WEB_RESOURCES_ACTIVITY_ACTION_ID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"WEB_RESOURCES_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"WEB_RESOURCES_ACTIVITY_ACTION_ID_DENIED":  2,
		"WEB_RESOURCES_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x WEB_RESOURCES_ACTIVITY_ACTION_ID) Enum() *WEB_RESOURCES_ACTIVITY_ACTION_ID {
	p := new(WEB_RESOURCES_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[6].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[6]
}

func (x WEB_RESOURCES_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_ACTION_ID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{6}
}

type APPLICATION_LIFECYCLE_CATEGORY_UID int32

const (
	APPLICATION_LIFECYCLE_CATEGORY_UID_APPLICATION_LIFECYCLE_CATEGORY_UID_UNSPECIFIED          APPLICATION_LIFECYCLE_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	APPLICATION_LIFECYCLE_CATEGORY_UID_APPLICATION_LIFECYCLE_CATEGORY_UID_APPLICATION_ACTIVITY APPLICATION_LIFECYCLE_CATEGORY_UID = 6 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for APPLICATION_LIFECYCLE_CATEGORY_UID.
var (
	APPLICATION_LIFECYCLE_CATEGORY_UID_name = map[int32]string{
		0: "APPLICATION_LIFECYCLE_CATEGORY_UID_UNSPECIFIED",
		6: "APPLICATION_LIFECYCLE_CATEGORY_UID_APPLICATION_ACTIVITY",
	}
	APPLICATION_LIFECYCLE_CATEGORY_UID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_CATEGORY_UID_UNSPECIFIED":          0,
		"APPLICATION_LIFECYCLE_CATEGORY_UID_APPLICATION_ACTIVITY": 6,
	}
)

func (x APPLICATION_LIFECYCLE_CATEGORY_UID) Enum() *APPLICATION_LIFECYCLE_CATEGORY_UID {
	p := new(APPLICATION_LIFECYCLE_CATEGORY_UID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[7].Descriptor()
}

func (APPLICATION_LIFECYCLE_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[7]
}

func (x APPLICATION_LIFECYCLE_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_CATEGORY_UID.Descriptor instead.
func (APPLICATION_LIFECYCLE_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{7}
}

type API_ACTIVITY_CATEGORY_UID int32

const (
	API_ACTIVITY_CATEGORY_UID_API_ACTIVITY_CATEGORY_UID_UNSPECIFIED          API_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	API_ACTIVITY_CATEGORY_UID_API_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY API_ACTIVITY_CATEGORY_UID = 6 // EnumValue: 6; Type: OCSF_VALUE;
)

// Enum value maps for API_ACTIVITY_CATEGORY_UID.
var (
	API_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "API_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		6: "API_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY",
	}
	API_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"API_ACTIVITY_CATEGORY_UID_UNSPECIFIED":          0,
		"API_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY": 6,
	}
)

func (x API_ACTIVITY_CATEGORY_UID) Enum() *API_ACTIVITY_CATEGORY_UID {
	p := new(API_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x API_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[8].Descriptor()
}

func (API_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[8]
}

func (x API_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (API_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{8}
}

type WEB_RESOURCES_ACTIVITY_SEVERITY_ID int32

const (
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_UNKNOWN       WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_INFORMATIONAL WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_LOW           WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_MEDIUM        WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_HIGH          WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_CRITICAL      WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_FATAL         WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_WEB_RESOURCES_ACTIVITY_SEVERITY_ID_OTHER         WEB_RESOURCES_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_SEVERITY_ID.
var (
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_LOW",
		3:  "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_FATAL",
		99: "WEB_RESOURCES_ACTIVITY_SEVERITY_ID_OTHER",
	}
	WEB_RESOURCES_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_LOW":           2,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"WEB_RESOURCES_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x WEB_RESOURCES_ACTIVITY_SEVERITY_ID) Enum() *WEB_RESOURCES_ACTIVITY_SEVERITY_ID {
	p := new(WEB_RESOURCES_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[9].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[9]
}

func (x WEB_RESOURCES_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{9}
}

type WEB_RESOURCES_ACTIVITY_CATEGORY_UID int32

const (
	WEB_RESOURCES_ACTIVITY_CATEGORY_UID_WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNSPECIFIED          WEB_RESOURCES_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_CATEGORY_UID_WEB_RESOURCES_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY WEB_RESOURCES_ACTIVITY_CATEGORY_UID = 6 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_CATEGORY_UID.
var (
	WEB_RESOURCES_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		6: "WEB_RESOURCES_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY",
	}
	WEB_RESOURCES_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_CATEGORY_UID_UNSPECIFIED":          0,
		"WEB_RESOURCES_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY": 6,
	}
)

func (x WEB_RESOURCES_ACTIVITY_CATEGORY_UID) Enum() *WEB_RESOURCES_ACTIVITY_CATEGORY_UID {
	p := new(WEB_RESOURCES_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[10].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[10]
}

func (x WEB_RESOURCES_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{10}
}

type FILE_HOSTING_CATEGORY_UID int32

const (
	FILE_HOSTING_CATEGORY_UID_FILE_HOSTING_CATEGORY_UID_UNSPECIFIED          FILE_HOSTING_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	FILE_HOSTING_CATEGORY_UID_FILE_HOSTING_CATEGORY_UID_APPLICATION_ACTIVITY FILE_HOSTING_CATEGORY_UID = 6 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for FILE_HOSTING_CATEGORY_UID.
var (
	FILE_HOSTING_CATEGORY_UID_name = map[int32]string{
		0: "FILE_HOSTING_CATEGORY_UID_UNSPECIFIED",
		6: "FILE_HOSTING_CATEGORY_UID_APPLICATION_ACTIVITY",
	}
	FILE_HOSTING_CATEGORY_UID_value = map[string]int32{
		"FILE_HOSTING_CATEGORY_UID_UNSPECIFIED":          0,
		"FILE_HOSTING_CATEGORY_UID_APPLICATION_ACTIVITY": 6,
	}
)

func (x FILE_HOSTING_CATEGORY_UID) Enum() *FILE_HOSTING_CATEGORY_UID {
	p := new(FILE_HOSTING_CATEGORY_UID)
	*p = x
	return p
}

func (x FILE_HOSTING_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_HOSTING_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[11].Descriptor()
}

func (FILE_HOSTING_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[11]
}

func (x FILE_HOSTING_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_HOSTING_CATEGORY_UID.Descriptor instead.
func (FILE_HOSTING_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{11}
}

type WEB_RESOURCES_ACTIVITY_ACTIVITY_ID int32

const (
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UNKNOWN WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_CREATE  WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_READ    WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UPDATE  WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_DELETE  WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_SEARCH  WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_IMPORT  WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_EXPORT  WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_SHARE   WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 8  // EnumValue: 8; Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_OTHER   WEB_RESOURCES_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_ACTIVITY_ID.
var (
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_CREATE",
		2:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_READ",
		3:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UPDATE",
		4:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_DELETE",
		5:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_SEARCH",
		6:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_IMPORT",
		7:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_EXPORT",
		8:  "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_SHARE",
		99: "WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_CREATE":  1,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_READ":    2,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_UPDATE":  3,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_DELETE":  4,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_SEARCH":  5,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_IMPORT":  6,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_EXPORT":  7,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_SHARE":   8,
		"WEB_RESOURCES_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) Enum() *WEB_RESOURCES_ACTIVITY_ACTIVITY_ID {
	p := new(WEB_RESOURCES_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[12].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[12]
}

func (x WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{12}
}

type APPLICATION_STATUS_ID int32

const (
	APPLICATION_STATUS_ID_APPLICATION_STATUS_ID_UNKNOWN APPLICATION_STATUS_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	APPLICATION_STATUS_ID_APPLICATION_STATUS_ID_SUCCESS APPLICATION_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	APPLICATION_STATUS_ID_APPLICATION_STATUS_ID_FAILURE APPLICATION_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	APPLICATION_STATUS_ID_APPLICATION_STATUS_ID_OTHER   APPLICATION_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for APPLICATION_STATUS_ID.
var (
	APPLICATION_STATUS_ID_name = map[int32]string{
		0:  "APPLICATION_STATUS_ID_UNKNOWN",
		1:  "APPLICATION_STATUS_ID_SUCCESS",
		2:  "APPLICATION_STATUS_ID_FAILURE",
		99: "APPLICATION_STATUS_ID_OTHER",
	}
	APPLICATION_STATUS_ID_value = map[string]int32{
		"APPLICATION_STATUS_ID_UNKNOWN": 0,
		"APPLICATION_STATUS_ID_SUCCESS": 1,
		"APPLICATION_STATUS_ID_FAILURE": 2,
		"APPLICATION_STATUS_ID_OTHER":   99,
	}
)

func (x APPLICATION_STATUS_ID) Enum() *APPLICATION_STATUS_ID {
	p := new(APPLICATION_STATUS_ID)
	*p = x
	return p
}

func (x APPLICATION_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[13].Descriptor()
}

func (APPLICATION_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[13]
}

func (x APPLICATION_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_STATUS_ID.Descriptor instead.
func (APPLICATION_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{13}
}

type API_ACTIVITY_ACTIVITY_ID int32

const (
	API_ACTIVITY_ACTIVITY_ID_API_ACTIVITY_ACTIVITY_ID_UNKNOWN API_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	API_ACTIVITY_ACTIVITY_ID_API_ACTIVITY_ACTIVITY_ID_CREATE  API_ACTIVITY_ACTIVITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	API_ACTIVITY_ACTIVITY_ID_API_ACTIVITY_ACTIVITY_ID_READ    API_ACTIVITY_ACTIVITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	API_ACTIVITY_ACTIVITY_ID_API_ACTIVITY_ACTIVITY_ID_UPDATE  API_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	API_ACTIVITY_ACTIVITY_ID_API_ACTIVITY_ACTIVITY_ID_DELETE  API_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	API_ACTIVITY_ACTIVITY_ID_API_ACTIVITY_ACTIVITY_ID_OTHER   API_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for API_ACTIVITY_ACTIVITY_ID.
var (
	API_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "API_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "API_ACTIVITY_ACTIVITY_ID_CREATE",
		2:  "API_ACTIVITY_ACTIVITY_ID_READ",
		3:  "API_ACTIVITY_ACTIVITY_ID_UPDATE",
		4:  "API_ACTIVITY_ACTIVITY_ID_DELETE",
		99: "API_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	API_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"API_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"API_ACTIVITY_ACTIVITY_ID_CREATE":  1,
		"API_ACTIVITY_ACTIVITY_ID_READ":    2,
		"API_ACTIVITY_ACTIVITY_ID_UPDATE":  3,
		"API_ACTIVITY_ACTIVITY_ID_DELETE":  4,
		"API_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x API_ACTIVITY_ACTIVITY_ID) Enum() *API_ACTIVITY_ACTIVITY_ID {
	p := new(API_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x API_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[14].Descriptor()
}

func (API_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[14]
}

func (x API_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (API_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{14}
}

type WEB_RESOURCES_ACTIVITY_DISPOSITION_ID int32

const (
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNKNOWN             WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ALLOWED             WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_BLOCKED             WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_QUARANTINED         WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ISOLATED            WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DELETED             WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DROPPED             WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_APPROVED            WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_RESTORED            WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_EXONERATED          WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CORRECTED           WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNCORRECTED         WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DELAYED             WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DETECTED            WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_NO_ACTION           WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_LOGGED              WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_TAGGED              WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ALERT               WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_COUNT               WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_RESET               WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CAPTCHA             WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CHALLENGE           WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 23 // EnumValue: 23; Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 24 // EnumValue: 24; Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_REJECTED            WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ERROR               WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_OTHER               WEB_RESOURCES_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_DISPOSITION_ID.
var (
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_RESET",
		22: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"WEB_RESOURCES_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x WEB_RESOURCES_ACTIVITY_DISPOSITION_ID) Enum() *WEB_RESOURCES_ACTIVITY_DISPOSITION_ID {
	p := new(WEB_RESOURCES_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[15].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[15]
}

func (x WEB_RESOURCES_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{15}
}

type SCAN_ACTIVITY_SEVERITY_ID int32

const (
	SCAN_ACTIVITY_SEVERITY_ID_SCAN_ACTIVITY_SEVERITY_ID_UNKNOWN       SCAN_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SCAN_ACTIVITY_SEVERITY_ID_SCAN_ACTIVITY_SEVERITY_ID_INFORMATIONAL SCAN_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SCAN_ACTIVITY_SEVERITY_ID_SCAN_ACTIVITY_SEVERITY_ID_LOW           SCAN_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SCAN_ACTIVITY_SEVERITY_ID_SCAN_ACTIVITY_SEVERITY_ID_MEDIUM        SCAN_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SCAN_ACTIVITY_SEVERITY_ID_SCAN_ACTIVITY_SEVERITY_ID_HIGH          SCAN_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SCAN_ACTIVITY_SEVERITY_ID_SCAN_ACTIVITY_SEVERITY_ID_CRITICAL      SCAN_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SCAN_ACTIVITY_SEVERITY_ID_SCAN_ACTIVITY_SEVERITY_ID_FATAL         SCAN_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SCAN_ACTIVITY_SEVERITY_ID_SCAN_ACTIVITY_SEVERITY_ID_OTHER         SCAN_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SCAN_ACTIVITY_SEVERITY_ID.
var (
	SCAN_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "SCAN_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "SCAN_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "SCAN_ACTIVITY_SEVERITY_ID_LOW",
		3:  "SCAN_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "SCAN_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "SCAN_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "SCAN_ACTIVITY_SEVERITY_ID_FATAL",
		99: "SCAN_ACTIVITY_SEVERITY_ID_OTHER",
	}
	SCAN_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"SCAN_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"SCAN_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"SCAN_ACTIVITY_SEVERITY_ID_LOW":           2,
		"SCAN_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"SCAN_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"SCAN_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"SCAN_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"SCAN_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x SCAN_ACTIVITY_SEVERITY_ID) Enum() *SCAN_ACTIVITY_SEVERITY_ID {
	p := new(SCAN_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x SCAN_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCAN_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[16].Descriptor()
}

func (SCAN_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[16]
}

func (x SCAN_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCAN_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (SCAN_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{16}
}

type APPLICATION_CATEGORY_UID int32

const (
	APPLICATION_CATEGORY_UID_APPLICATION_CATEGORY_UID_UNSPECIFIED          APPLICATION_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	APPLICATION_CATEGORY_UID_APPLICATION_CATEGORY_UID_APPLICATION_ACTIVITY APPLICATION_CATEGORY_UID = 6 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for APPLICATION_CATEGORY_UID.
var (
	APPLICATION_CATEGORY_UID_name = map[int32]string{
		0: "APPLICATION_CATEGORY_UID_UNSPECIFIED",
		6: "APPLICATION_CATEGORY_UID_APPLICATION_ACTIVITY",
	}
	APPLICATION_CATEGORY_UID_value = map[string]int32{
		"APPLICATION_CATEGORY_UID_UNSPECIFIED":          0,
		"APPLICATION_CATEGORY_UID_APPLICATION_ACTIVITY": 6,
	}
)

func (x APPLICATION_CATEGORY_UID) Enum() *APPLICATION_CATEGORY_UID {
	p := new(APPLICATION_CATEGORY_UID)
	*p = x
	return p
}

func (x APPLICATION_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[17].Descriptor()
}

func (APPLICATION_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[17]
}

func (x APPLICATION_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_CATEGORY_UID.Descriptor instead.
func (APPLICATION_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{17}
}

type DATASTORE_ACTIVITY_TYPE_UID int32

const (
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_UNSPECIFIED                DATASTORE_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_UNKNOWN DATASTORE_ACTIVITY_TYPE_UID = 600500 // Type: OCSF_VALUE; EnumValue: 600500;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_READ    DATASTORE_ACTIVITY_TYPE_UID = 600501 // Type: OCSF_VALUE; EnumValue: 600501;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_UPDATE  DATASTORE_ACTIVITY_TYPE_UID = 600502 // Type: OCSF_VALUE; EnumValue: 600502;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_CONNECT DATASTORE_ACTIVITY_TYPE_UID = 600503 // Type: OCSF_VALUE; EnumValue: 600503;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_QUERY   DATASTORE_ACTIVITY_TYPE_UID = 600504 // Type: OCSF_VALUE; EnumValue: 600504;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_WRITE   DATASTORE_ACTIVITY_TYPE_UID = 600505 // Type: OCSF_VALUE; EnumValue: 600505;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_CREATE  DATASTORE_ACTIVITY_TYPE_UID = 600506 // Type: OCSF_VALUE; EnumValue: 600506;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_DELETE  DATASTORE_ACTIVITY_TYPE_UID = 600507 // Type: OCSF_VALUE; EnumValue: 600507;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_LIST    DATASTORE_ACTIVITY_TYPE_UID = 600508 // Type: OCSF_VALUE; EnumValue: 600508;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_ENCRYPT DATASTORE_ACTIVITY_TYPE_UID = 600509 // EnumValue: 600509; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_DECRYPT DATASTORE_ACTIVITY_TYPE_UID = 600510 // Type: OCSF_VALUE; EnumValue: 600510;
	DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_OTHER   DATASTORE_ACTIVITY_TYPE_UID = 600599 // Type: OCSF_VALUE; EnumValue: 600599;
)

// Enum value maps for DATASTORE_ACTIVITY_TYPE_UID.
var (
	DATASTORE_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "DATASTORE_ACTIVITY_TYPE_UID_UNSPECIFIED",
		600500: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_UNKNOWN",
		600501: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_READ",
		600502: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_UPDATE",
		600503: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_CONNECT",
		600504: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_QUERY",
		600505: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_WRITE",
		600506: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_CREATE",
		600507: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_DELETE",
		600508: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_LIST",
		600509: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_ENCRYPT",
		600510: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_DECRYPT",
		600599: "DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_OTHER",
	}
	DATASTORE_ACTIVITY_TYPE_UID_value = map[string]int32{
		"DATASTORE_ACTIVITY_TYPE_UID_UNSPECIFIED":                0,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_UNKNOWN": 600500,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_READ":    600501,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_UPDATE":  600502,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_CONNECT": 600503,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_QUERY":   600504,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_WRITE":   600505,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_CREATE":  600506,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_DELETE":  600507,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_LIST":    600508,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_ENCRYPT": 600509,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_DECRYPT": 600510,
		"DATASTORE_ACTIVITY_TYPE_UID_DATASTORE_ACTIVITY_OTHER":   600599,
	}
)

func (x DATASTORE_ACTIVITY_TYPE_UID) Enum() *DATASTORE_ACTIVITY_TYPE_UID {
	p := new(DATASTORE_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[18].Descriptor()
}

func (DATASTORE_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[18]
}

func (x DATASTORE_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_TYPE_UID.Descriptor instead.
func (DATASTORE_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{18}
}

type SCAN_ACTIVITY_CLASS_UID int32

const (
	SCAN_ACTIVITY_CLASS_UID_SCAN_ACTIVITY_CLASS_UID_UNSPECIFIED   SCAN_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	SCAN_ACTIVITY_CLASS_UID_SCAN_ACTIVITY_CLASS_UID_SCAN_ACTIVITY SCAN_ACTIVITY_CLASS_UID = 6007 // Type: OCSF_VALUE; EnumValue: 6007;
)

// Enum value maps for SCAN_ACTIVITY_CLASS_UID.
var (
	SCAN_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "SCAN_ACTIVITY_CLASS_UID_UNSPECIFIED",
		6007: "SCAN_ACTIVITY_CLASS_UID_SCAN_ACTIVITY",
	}
	SCAN_ACTIVITY_CLASS_UID_value = map[string]int32{
		"SCAN_ACTIVITY_CLASS_UID_UNSPECIFIED":   0,
		"SCAN_ACTIVITY_CLASS_UID_SCAN_ACTIVITY": 6007,
	}
)

func (x SCAN_ACTIVITY_CLASS_UID) Enum() *SCAN_ACTIVITY_CLASS_UID {
	p := new(SCAN_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x SCAN_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCAN_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[19].Descriptor()
}

func (SCAN_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[19]
}

func (x SCAN_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCAN_ACTIVITY_CLASS_UID.Descriptor instead.
func (SCAN_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{19}
}

type SCAN_ACTIVITY_CATEGORY_UID int32

const (
	SCAN_ACTIVITY_CATEGORY_UID_SCAN_ACTIVITY_CATEGORY_UID_UNSPECIFIED          SCAN_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	SCAN_ACTIVITY_CATEGORY_UID_SCAN_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY SCAN_ACTIVITY_CATEGORY_UID = 6 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for SCAN_ACTIVITY_CATEGORY_UID.
var (
	SCAN_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "SCAN_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		6: "SCAN_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY",
	}
	SCAN_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"SCAN_ACTIVITY_CATEGORY_UID_UNSPECIFIED":          0,
		"SCAN_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY": 6,
	}
)

func (x SCAN_ACTIVITY_CATEGORY_UID) Enum() *SCAN_ACTIVITY_CATEGORY_UID {
	p := new(SCAN_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x SCAN_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCAN_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[20].Descriptor()
}

func (SCAN_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[20]
}

func (x SCAN_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCAN_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (SCAN_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{20}
}

type APPLICATION_TYPE_UID int32

const (
	APPLICATION_TYPE_UID_APPLICATION_TYPE_UID_UNSPECIFIED                  APPLICATION_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	APPLICATION_TYPE_UID_APPLICATION_TYPE_UID_APPLICATION_ACTIVITY_UNKNOWN APPLICATION_TYPE_UID = 600000 // EnumValue: 600000; Type: OCSF_VALUE;
	APPLICATION_TYPE_UID_APPLICATION_TYPE_UID_APPLICATION_ACTIVITY_OTHER   APPLICATION_TYPE_UID = 600099 // Type: OCSF_VALUE; EnumValue: 600099;
)

// Enum value maps for APPLICATION_TYPE_UID.
var (
	APPLICATION_TYPE_UID_name = map[int32]string{
		0:      "APPLICATION_TYPE_UID_UNSPECIFIED",
		600000: "APPLICATION_TYPE_UID_APPLICATION_ACTIVITY_UNKNOWN",
		600099: "APPLICATION_TYPE_UID_APPLICATION_ACTIVITY_OTHER",
	}
	APPLICATION_TYPE_UID_value = map[string]int32{
		"APPLICATION_TYPE_UID_UNSPECIFIED":                  0,
		"APPLICATION_TYPE_UID_APPLICATION_ACTIVITY_UNKNOWN": 600000,
		"APPLICATION_TYPE_UID_APPLICATION_ACTIVITY_OTHER":   600099,
	}
)

func (x APPLICATION_TYPE_UID) Enum() *APPLICATION_TYPE_UID {
	p := new(APPLICATION_TYPE_UID)
	*p = x
	return p
}

func (x APPLICATION_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[21].Descriptor()
}

func (APPLICATION_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[21]
}

func (x APPLICATION_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_TYPE_UID.Descriptor instead.
func (APPLICATION_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{21}
}

type FILE_HOSTING_STATUS_ID int32

const (
	FILE_HOSTING_STATUS_ID_FILE_HOSTING_STATUS_ID_UNKNOWN FILE_HOSTING_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_HOSTING_STATUS_ID_FILE_HOSTING_STATUS_ID_SUCCESS FILE_HOSTING_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_HOSTING_STATUS_ID_FILE_HOSTING_STATUS_ID_FAILURE FILE_HOSTING_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_HOSTING_STATUS_ID_FILE_HOSTING_STATUS_ID_OTHER   FILE_HOSTING_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_HOSTING_STATUS_ID.
var (
	FILE_HOSTING_STATUS_ID_name = map[int32]string{
		0:  "FILE_HOSTING_STATUS_ID_UNKNOWN",
		1:  "FILE_HOSTING_STATUS_ID_SUCCESS",
		2:  "FILE_HOSTING_STATUS_ID_FAILURE",
		99: "FILE_HOSTING_STATUS_ID_OTHER",
	}
	FILE_HOSTING_STATUS_ID_value = map[string]int32{
		"FILE_HOSTING_STATUS_ID_UNKNOWN": 0,
		"FILE_HOSTING_STATUS_ID_SUCCESS": 1,
		"FILE_HOSTING_STATUS_ID_FAILURE": 2,
		"FILE_HOSTING_STATUS_ID_OTHER":   99,
	}
)

func (x FILE_HOSTING_STATUS_ID) Enum() *FILE_HOSTING_STATUS_ID {
	p := new(FILE_HOSTING_STATUS_ID)
	*p = x
	return p
}

func (x FILE_HOSTING_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_HOSTING_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[22].Descriptor()
}

func (FILE_HOSTING_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[22]
}

func (x FILE_HOSTING_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_HOSTING_STATUS_ID.Descriptor instead.
func (FILE_HOSTING_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{22}
}

type DATASTORE_ACTIVITY_DISPOSITION_ID int32

const (
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_UNKNOWN             DATASTORE_ACTIVITY_DISPOSITION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_ALLOWED             DATASTORE_ACTIVITY_DISPOSITION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_BLOCKED             DATASTORE_ACTIVITY_DISPOSITION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_QUARANTINED         DATASTORE_ACTIVITY_DISPOSITION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_ISOLATED            DATASTORE_ACTIVITY_DISPOSITION_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_DELETED             DATASTORE_ACTIVITY_DISPOSITION_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_DROPPED             DATASTORE_ACTIVITY_DISPOSITION_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION       DATASTORE_ACTIVITY_DISPOSITION_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_APPROVED            DATASTORE_ACTIVITY_DISPOSITION_ID = 8  // EnumValue: 8; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_RESTORED            DATASTORE_ACTIVITY_DISPOSITION_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_EXONERATED          DATASTORE_ACTIVITY_DISPOSITION_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_CORRECTED           DATASTORE_ACTIVITY_DISPOSITION_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED DATASTORE_ACTIVITY_DISPOSITION_ID = 12 // EnumValue: 12; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_UNCORRECTED         DATASTORE_ACTIVITY_DISPOSITION_ID = 13 // EnumValue: 13; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_DELAYED             DATASTORE_ACTIVITY_DISPOSITION_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_DETECTED            DATASTORE_ACTIVITY_DISPOSITION_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_NO_ACTION           DATASTORE_ACTIVITY_DISPOSITION_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_LOGGED              DATASTORE_ACTIVITY_DISPOSITION_ID = 17 // EnumValue: 17; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_TAGGED              DATASTORE_ACTIVITY_DISPOSITION_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_ALERT               DATASTORE_ACTIVITY_DISPOSITION_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_COUNT               DATASTORE_ACTIVITY_DISPOSITION_ID = 20 // EnumValue: 20; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_RESET               DATASTORE_ACTIVITY_DISPOSITION_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_CAPTCHA             DATASTORE_ACTIVITY_DISPOSITION_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_CHALLENGE           DATASTORE_ACTIVITY_DISPOSITION_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED      DATASTORE_ACTIVITY_DISPOSITION_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_REJECTED            DATASTORE_ACTIVITY_DISPOSITION_ID = 25 // EnumValue: 25; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED        DATASTORE_ACTIVITY_DISPOSITION_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_ERROR               DATASTORE_ACTIVITY_DISPOSITION_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	DATASTORE_ACTIVITY_DISPOSITION_ID_DATASTORE_ACTIVITY_DISPOSITION_ID_OTHER               DATASTORE_ACTIVITY_DISPOSITION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATASTORE_ACTIVITY_DISPOSITION_ID.
var (
	DATASTORE_ACTIVITY_DISPOSITION_ID_name = map[int32]string{
		0:  "DATASTORE_ACTIVITY_DISPOSITION_ID_UNKNOWN",
		1:  "DATASTORE_ACTIVITY_DISPOSITION_ID_ALLOWED",
		2:  "DATASTORE_ACTIVITY_DISPOSITION_ID_BLOCKED",
		3:  "DATASTORE_ACTIVITY_DISPOSITION_ID_QUARANTINED",
		4:  "DATASTORE_ACTIVITY_DISPOSITION_ID_ISOLATED",
		5:  "DATASTORE_ACTIVITY_DISPOSITION_ID_DELETED",
		6:  "DATASTORE_ACTIVITY_DISPOSITION_ID_DROPPED",
		7:  "DATASTORE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION",
		8:  "DATASTORE_ACTIVITY_DISPOSITION_ID_APPROVED",
		9:  "DATASTORE_ACTIVITY_DISPOSITION_ID_RESTORED",
		10: "DATASTORE_ACTIVITY_DISPOSITION_ID_EXONERATED",
		11: "DATASTORE_ACTIVITY_DISPOSITION_ID_CORRECTED",
		12: "DATASTORE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED",
		13: "DATASTORE_ACTIVITY_DISPOSITION_ID_UNCORRECTED",
		14: "DATASTORE_ACTIVITY_DISPOSITION_ID_DELAYED",
		15: "DATASTORE_ACTIVITY_DISPOSITION_ID_DETECTED",
		16: "DATASTORE_ACTIVITY_DISPOSITION_ID_NO_ACTION",
		17: "DATASTORE_ACTIVITY_DISPOSITION_ID_LOGGED",
		18: "DATASTORE_ACTIVITY_DISPOSITION_ID_TAGGED",
		19: "DATASTORE_ACTIVITY_DISPOSITION_ID_ALERT",
		20: "DATASTORE_ACTIVITY_DISPOSITION_ID_COUNT",
		21: "DATASTORE_ACTIVITY_DISPOSITION_ID_RESET",
		22: "DATASTORE_ACTIVITY_DISPOSITION_ID_CAPTCHA",
		23: "DATASTORE_ACTIVITY_DISPOSITION_ID_CHALLENGE",
		24: "DATASTORE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED",
		25: "DATASTORE_ACTIVITY_DISPOSITION_ID_REJECTED",
		26: "DATASTORE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED",
		27: "DATASTORE_ACTIVITY_DISPOSITION_ID_ERROR",
		99: "DATASTORE_ACTIVITY_DISPOSITION_ID_OTHER",
	}
	DATASTORE_ACTIVITY_DISPOSITION_ID_value = map[string]int32{
		"DATASTORE_ACTIVITY_DISPOSITION_ID_UNKNOWN":             0,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_ALLOWED":             1,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_BLOCKED":             2,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_QUARANTINED":         3,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_ISOLATED":            4,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_DELETED":             5,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_DROPPED":             6,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_CUSTOM_ACTION":       7,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_APPROVED":            8,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_RESTORED":            9,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_EXONERATED":          10,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_CORRECTED":           11,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_PARTIALLY_CORRECTED": 12,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_UNCORRECTED":         13,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_DELAYED":             14,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_DETECTED":            15,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_NO_ACTION":           16,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_LOGGED":              17,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_TAGGED":              18,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_ALERT":               19,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_COUNT":               20,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_RESET":               21,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_CAPTCHA":             22,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_CHALLENGE":           23,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_ACCESS_REVOKED":      24,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_REJECTED":            25,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_UNAUTHORIZED":        26,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_ERROR":               27,
		"DATASTORE_ACTIVITY_DISPOSITION_ID_OTHER":               99,
	}
)

func (x DATASTORE_ACTIVITY_DISPOSITION_ID) Enum() *DATASTORE_ACTIVITY_DISPOSITION_ID {
	p := new(DATASTORE_ACTIVITY_DISPOSITION_ID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_DISPOSITION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_DISPOSITION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[23].Descriptor()
}

func (DATASTORE_ACTIVITY_DISPOSITION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[23]
}

func (x DATASTORE_ACTIVITY_DISPOSITION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_DISPOSITION_ID.Descriptor instead.
func (DATASTORE_ACTIVITY_DISPOSITION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{23}
}

type APPLICATION_LIFECYCLE_SEVERITY_ID int32

const (
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_UNKNOWN       APPLICATION_LIFECYCLE_SEVERITY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_INFORMATIONAL APPLICATION_LIFECYCLE_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_LOW           APPLICATION_LIFECYCLE_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_MEDIUM        APPLICATION_LIFECYCLE_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_HIGH          APPLICATION_LIFECYCLE_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_CRITICAL      APPLICATION_LIFECYCLE_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_FATAL         APPLICATION_LIFECYCLE_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	APPLICATION_LIFECYCLE_SEVERITY_ID_APPLICATION_LIFECYCLE_SEVERITY_ID_OTHER         APPLICATION_LIFECYCLE_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for APPLICATION_LIFECYCLE_SEVERITY_ID.
var (
	APPLICATION_LIFECYCLE_SEVERITY_ID_name = map[int32]string{
		0:  "APPLICATION_LIFECYCLE_SEVERITY_ID_UNKNOWN",
		1:  "APPLICATION_LIFECYCLE_SEVERITY_ID_INFORMATIONAL",
		2:  "APPLICATION_LIFECYCLE_SEVERITY_ID_LOW",
		3:  "APPLICATION_LIFECYCLE_SEVERITY_ID_MEDIUM",
		4:  "APPLICATION_LIFECYCLE_SEVERITY_ID_HIGH",
		5:  "APPLICATION_LIFECYCLE_SEVERITY_ID_CRITICAL",
		6:  "APPLICATION_LIFECYCLE_SEVERITY_ID_FATAL",
		99: "APPLICATION_LIFECYCLE_SEVERITY_ID_OTHER",
	}
	APPLICATION_LIFECYCLE_SEVERITY_ID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_SEVERITY_ID_UNKNOWN":       0,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_INFORMATIONAL": 1,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_LOW":           2,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_MEDIUM":        3,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_HIGH":          4,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_CRITICAL":      5,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_FATAL":         6,
		"APPLICATION_LIFECYCLE_SEVERITY_ID_OTHER":         99,
	}
)

func (x APPLICATION_LIFECYCLE_SEVERITY_ID) Enum() *APPLICATION_LIFECYCLE_SEVERITY_ID {
	p := new(APPLICATION_LIFECYCLE_SEVERITY_ID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[24].Descriptor()
}

func (APPLICATION_LIFECYCLE_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[24]
}

func (x APPLICATION_LIFECYCLE_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_SEVERITY_ID.Descriptor instead.
func (APPLICATION_LIFECYCLE_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{24}
}

type WEB_RESOURCES_ACTIVITY_TYPE_UID int32

const (
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_UNSPECIFIED                    WEB_RESOURCES_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_UNKNOWN WEB_RESOURCES_ACTIVITY_TYPE_UID = 600100 // Type: OCSF_VALUE; EnumValue: 600100;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_CREATE  WEB_RESOURCES_ACTIVITY_TYPE_UID = 600101 // Type: OCSF_VALUE; EnumValue: 600101;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_READ    WEB_RESOURCES_ACTIVITY_TYPE_UID = 600102 // Type: OCSF_VALUE; EnumValue: 600102;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_UPDATE  WEB_RESOURCES_ACTIVITY_TYPE_UID = 600103 // Type: OCSF_VALUE; EnumValue: 600103;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_DELETE  WEB_RESOURCES_ACTIVITY_TYPE_UID = 600104 // Type: OCSF_VALUE; EnumValue: 600104;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_SEARCH  WEB_RESOURCES_ACTIVITY_TYPE_UID = 600105 // EnumValue: 600105; Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_IMPORT  WEB_RESOURCES_ACTIVITY_TYPE_UID = 600106 // EnumValue: 600106; Type: OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_EXPORT  WEB_RESOURCES_ACTIVITY_TYPE_UID = 600107 // Type: OCSF_VALUE; EnumValue: 600107;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_SHARE   WEB_RESOURCES_ACTIVITY_TYPE_UID = 600108 // Type: OCSF_VALUE; EnumValue: 600108;
	WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_OTHER   WEB_RESOURCES_ACTIVITY_TYPE_UID = 600199 // Type: OCSF_VALUE; EnumValue: 600199;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_TYPE_UID.
var (
	WEB_RESOURCES_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "WEB_RESOURCES_ACTIVITY_TYPE_UID_UNSPECIFIED",
		600100: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_UNKNOWN",
		600101: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_CREATE",
		600102: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_READ",
		600103: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_UPDATE",
		600104: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_DELETE",
		600105: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_SEARCH",
		600106: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_IMPORT",
		600107: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_EXPORT",
		600108: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_SHARE",
		600199: "WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_OTHER",
	}
	WEB_RESOURCES_ACTIVITY_TYPE_UID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_UNSPECIFIED":                    0,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_UNKNOWN": 600100,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_CREATE":  600101,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_READ":    600102,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_UPDATE":  600103,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_DELETE":  600104,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_SEARCH":  600105,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_IMPORT":  600106,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_EXPORT":  600107,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_SHARE":   600108,
		"WEB_RESOURCES_ACTIVITY_TYPE_UID_WEB_RESOURCES_ACTIVITY_OTHER":   600199,
	}
)

func (x WEB_RESOURCES_ACTIVITY_TYPE_UID) Enum() *WEB_RESOURCES_ACTIVITY_TYPE_UID {
	p := new(WEB_RESOURCES_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[25].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[25]
}

func (x WEB_RESOURCES_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_TYPE_UID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{25}
}

type DATASTORE_ACTIVITY_ACTION_ID int32

const (
	DATASTORE_ACTIVITY_ACTION_ID_DATASTORE_ACTIVITY_ACTION_ID_UNKNOWN DATASTORE_ACTIVITY_ACTION_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATASTORE_ACTIVITY_ACTION_ID_DATASTORE_ACTIVITY_ACTION_ID_ALLOWED DATASTORE_ACTIVITY_ACTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATASTORE_ACTIVITY_ACTION_ID_DATASTORE_ACTIVITY_ACTION_ID_DENIED  DATASTORE_ACTIVITY_ACTION_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_ACTION_ID_DATASTORE_ACTIVITY_ACTION_ID_OTHER   DATASTORE_ACTIVITY_ACTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATASTORE_ACTIVITY_ACTION_ID.
var (
	DATASTORE_ACTIVITY_ACTION_ID_name = map[int32]string{
		0:  "DATASTORE_ACTIVITY_ACTION_ID_UNKNOWN",
		1:  "DATASTORE_ACTIVITY_ACTION_ID_ALLOWED",
		2:  "DATASTORE_ACTIVITY_ACTION_ID_DENIED",
		99: "DATASTORE_ACTIVITY_ACTION_ID_OTHER",
	}
	DATASTORE_ACTIVITY_ACTION_ID_value = map[string]int32{
		"DATASTORE_ACTIVITY_ACTION_ID_UNKNOWN": 0,
		"DATASTORE_ACTIVITY_ACTION_ID_ALLOWED": 1,
		"DATASTORE_ACTIVITY_ACTION_ID_DENIED":  2,
		"DATASTORE_ACTIVITY_ACTION_ID_OTHER":   99,
	}
)

func (x DATASTORE_ACTIVITY_ACTION_ID) Enum() *DATASTORE_ACTIVITY_ACTION_ID {
	p := new(DATASTORE_ACTIVITY_ACTION_ID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_ACTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_ACTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[26].Descriptor()
}

func (DATASTORE_ACTIVITY_ACTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[26]
}

func (x DATASTORE_ACTIVITY_ACTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_ACTION_ID.Descriptor instead.
func (DATASTORE_ACTIVITY_ACTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{26}
}

type DATASTORE_ACTIVITY_TYPE_ID int32

const (
	DATASTORE_ACTIVITY_TYPE_ID_DATASTORE_ACTIVITY_TYPE_ID_UNKNOWN    DATASTORE_ACTIVITY_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATASTORE_ACTIVITY_TYPE_ID_DATASTORE_ACTIVITY_TYPE_ID_DATABASE   DATASTORE_ACTIVITY_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATASTORE_ACTIVITY_TYPE_ID_DATASTORE_ACTIVITY_TYPE_ID_DATABUCKET DATASTORE_ACTIVITY_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATASTORE_ACTIVITY_TYPE_ID_DATASTORE_ACTIVITY_TYPE_ID_TABLE      DATASTORE_ACTIVITY_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATASTORE_ACTIVITY_TYPE_ID_DATASTORE_ACTIVITY_TYPE_ID_OTHER      DATASTORE_ACTIVITY_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATASTORE_ACTIVITY_TYPE_ID.
var (
	DATASTORE_ACTIVITY_TYPE_ID_name = map[int32]string{
		0:  "DATASTORE_ACTIVITY_TYPE_ID_UNKNOWN",
		1:  "DATASTORE_ACTIVITY_TYPE_ID_DATABASE",
		2:  "DATASTORE_ACTIVITY_TYPE_ID_DATABUCKET",
		3:  "DATASTORE_ACTIVITY_TYPE_ID_TABLE",
		99: "DATASTORE_ACTIVITY_TYPE_ID_OTHER",
	}
	DATASTORE_ACTIVITY_TYPE_ID_value = map[string]int32{
		"DATASTORE_ACTIVITY_TYPE_ID_UNKNOWN":    0,
		"DATASTORE_ACTIVITY_TYPE_ID_DATABASE":   1,
		"DATASTORE_ACTIVITY_TYPE_ID_DATABUCKET": 2,
		"DATASTORE_ACTIVITY_TYPE_ID_TABLE":      3,
		"DATASTORE_ACTIVITY_TYPE_ID_OTHER":      99,
	}
)

func (x DATASTORE_ACTIVITY_TYPE_ID) Enum() *DATASTORE_ACTIVITY_TYPE_ID {
	p := new(DATASTORE_ACTIVITY_TYPE_ID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[27].Descriptor()
}

func (DATASTORE_ACTIVITY_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[27]
}

func (x DATASTORE_ACTIVITY_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_TYPE_ID.Descriptor instead.
func (DATASTORE_ACTIVITY_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{27}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_UNSPECIFIED                  WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_WEB_RESOURCE_ACCESS_ACTIVITY WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID = 6004 // Type: OCSF_VALUE; EnumValue: 6004;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_UNSPECIFIED",
		6004: "WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_WEB_RESOURCE_ACCESS_ACTIVITY",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_UNSPECIFIED":                  0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID_WEB_RESOURCE_ACCESS_ACTIVITY": 6004,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[28].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[28]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{28}
}

type APPLICATION_SEVERITY_ID int32

const (
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_UNKNOWN       APPLICATION_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_INFORMATIONAL APPLICATION_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_LOW           APPLICATION_SEVERITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_MEDIUM        APPLICATION_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_HIGH          APPLICATION_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_CRITICAL      APPLICATION_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_FATAL         APPLICATION_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	APPLICATION_SEVERITY_ID_APPLICATION_SEVERITY_ID_OTHER         APPLICATION_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for APPLICATION_SEVERITY_ID.
var (
	APPLICATION_SEVERITY_ID_name = map[int32]string{
		0:  "APPLICATION_SEVERITY_ID_UNKNOWN",
		1:  "APPLICATION_SEVERITY_ID_INFORMATIONAL",
		2:  "APPLICATION_SEVERITY_ID_LOW",
		3:  "APPLICATION_SEVERITY_ID_MEDIUM",
		4:  "APPLICATION_SEVERITY_ID_HIGH",
		5:  "APPLICATION_SEVERITY_ID_CRITICAL",
		6:  "APPLICATION_SEVERITY_ID_FATAL",
		99: "APPLICATION_SEVERITY_ID_OTHER",
	}
	APPLICATION_SEVERITY_ID_value = map[string]int32{
		"APPLICATION_SEVERITY_ID_UNKNOWN":       0,
		"APPLICATION_SEVERITY_ID_INFORMATIONAL": 1,
		"APPLICATION_SEVERITY_ID_LOW":           2,
		"APPLICATION_SEVERITY_ID_MEDIUM":        3,
		"APPLICATION_SEVERITY_ID_HIGH":          4,
		"APPLICATION_SEVERITY_ID_CRITICAL":      5,
		"APPLICATION_SEVERITY_ID_FATAL":         6,
		"APPLICATION_SEVERITY_ID_OTHER":         99,
	}
)

func (x APPLICATION_SEVERITY_ID) Enum() *APPLICATION_SEVERITY_ID {
	p := new(APPLICATION_SEVERITY_ID)
	*p = x
	return p
}

func (x APPLICATION_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[29].Descriptor()
}

func (APPLICATION_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[29]
}

func (x APPLICATION_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_SEVERITY_ID.Descriptor instead.
func (APPLICATION_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{29}
}

type DATASTORE_ACTIVITY_CLASS_UID int32

const (
	DATASTORE_ACTIVITY_CLASS_UID_DATASTORE_ACTIVITY_CLASS_UID_UNSPECIFIED        DATASTORE_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	DATASTORE_ACTIVITY_CLASS_UID_DATASTORE_ACTIVITY_CLASS_UID_DATASTORE_ACTIVITY DATASTORE_ACTIVITY_CLASS_UID = 6005 // Type: OCSF_VALUE; EnumValue: 6005;
)

// Enum value maps for DATASTORE_ACTIVITY_CLASS_UID.
var (
	DATASTORE_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "DATASTORE_ACTIVITY_CLASS_UID_UNSPECIFIED",
		6005: "DATASTORE_ACTIVITY_CLASS_UID_DATASTORE_ACTIVITY",
	}
	DATASTORE_ACTIVITY_CLASS_UID_value = map[string]int32{
		"DATASTORE_ACTIVITY_CLASS_UID_UNSPECIFIED":        0,
		"DATASTORE_ACTIVITY_CLASS_UID_DATASTORE_ACTIVITY": 6005,
	}
)

func (x DATASTORE_ACTIVITY_CLASS_UID) Enum() *DATASTORE_ACTIVITY_CLASS_UID {
	p := new(DATASTORE_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[30].Descriptor()
}

func (DATASTORE_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[30]
}

func (x DATASTORE_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_CLASS_UID.Descriptor instead.
func (DATASTORE_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{30}
}

type APPLICATION_LIFECYCLE_CLASS_UID int32

const (
	APPLICATION_LIFECYCLE_CLASS_UID_APPLICATION_LIFECYCLE_CLASS_UID_UNSPECIFIED           APPLICATION_LIFECYCLE_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	APPLICATION_LIFECYCLE_CLASS_UID_APPLICATION_LIFECYCLE_CLASS_UID_APPLICATION_LIFECYCLE APPLICATION_LIFECYCLE_CLASS_UID = 6002 // Type: OCSF_VALUE; EnumValue: 6002;
)

// Enum value maps for APPLICATION_LIFECYCLE_CLASS_UID.
var (
	APPLICATION_LIFECYCLE_CLASS_UID_name = map[int32]string{
		0:    "APPLICATION_LIFECYCLE_CLASS_UID_UNSPECIFIED",
		6002: "APPLICATION_LIFECYCLE_CLASS_UID_APPLICATION_LIFECYCLE",
	}
	APPLICATION_LIFECYCLE_CLASS_UID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_CLASS_UID_UNSPECIFIED":           0,
		"APPLICATION_LIFECYCLE_CLASS_UID_APPLICATION_LIFECYCLE": 6002,
	}
)

func (x APPLICATION_LIFECYCLE_CLASS_UID) Enum() *APPLICATION_LIFECYCLE_CLASS_UID {
	p := new(APPLICATION_LIFECYCLE_CLASS_UID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[31].Descriptor()
}

func (APPLICATION_LIFECYCLE_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[31]
}

func (x APPLICATION_LIFECYCLE_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_CLASS_UID.Descriptor instead.
func (APPLICATION_LIFECYCLE_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{31}
}

type FILE_HOSTING_SEVERITY_ID int32

const (
	FILE_HOSTING_SEVERITY_ID_FILE_HOSTING_SEVERITY_ID_UNKNOWN       FILE_HOSTING_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_HOSTING_SEVERITY_ID_FILE_HOSTING_SEVERITY_ID_INFORMATIONAL FILE_HOSTING_SEVERITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	FILE_HOSTING_SEVERITY_ID_FILE_HOSTING_SEVERITY_ID_LOW           FILE_HOSTING_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_HOSTING_SEVERITY_ID_FILE_HOSTING_SEVERITY_ID_MEDIUM        FILE_HOSTING_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_HOSTING_SEVERITY_ID_FILE_HOSTING_SEVERITY_ID_HIGH          FILE_HOSTING_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_HOSTING_SEVERITY_ID_FILE_HOSTING_SEVERITY_ID_CRITICAL      FILE_HOSTING_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FILE_HOSTING_SEVERITY_ID_FILE_HOSTING_SEVERITY_ID_FATAL         FILE_HOSTING_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FILE_HOSTING_SEVERITY_ID_FILE_HOSTING_SEVERITY_ID_OTHER         FILE_HOSTING_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_HOSTING_SEVERITY_ID.
var (
	FILE_HOSTING_SEVERITY_ID_name = map[int32]string{
		0:  "FILE_HOSTING_SEVERITY_ID_UNKNOWN",
		1:  "FILE_HOSTING_SEVERITY_ID_INFORMATIONAL",
		2:  "FILE_HOSTING_SEVERITY_ID_LOW",
		3:  "FILE_HOSTING_SEVERITY_ID_MEDIUM",
		4:  "FILE_HOSTING_SEVERITY_ID_HIGH",
		5:  "FILE_HOSTING_SEVERITY_ID_CRITICAL",
		6:  "FILE_HOSTING_SEVERITY_ID_FATAL",
		99: "FILE_HOSTING_SEVERITY_ID_OTHER",
	}
	FILE_HOSTING_SEVERITY_ID_value = map[string]int32{
		"FILE_HOSTING_SEVERITY_ID_UNKNOWN":       0,
		"FILE_HOSTING_SEVERITY_ID_INFORMATIONAL": 1,
		"FILE_HOSTING_SEVERITY_ID_LOW":           2,
		"FILE_HOSTING_SEVERITY_ID_MEDIUM":        3,
		"FILE_HOSTING_SEVERITY_ID_HIGH":          4,
		"FILE_HOSTING_SEVERITY_ID_CRITICAL":      5,
		"FILE_HOSTING_SEVERITY_ID_FATAL":         6,
		"FILE_HOSTING_SEVERITY_ID_OTHER":         99,
	}
)

func (x FILE_HOSTING_SEVERITY_ID) Enum() *FILE_HOSTING_SEVERITY_ID {
	p := new(FILE_HOSTING_SEVERITY_ID)
	*p = x
	return p
}

func (x FILE_HOSTING_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_HOSTING_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[32].Descriptor()
}

func (FILE_HOSTING_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[32]
}

func (x FILE_HOSTING_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_HOSTING_SEVERITY_ID.Descriptor instead.
func (FILE_HOSTING_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{32}
}

type DATASTORE_ACTIVITY_SEVERITY_ID int32

const (
	DATASTORE_ACTIVITY_SEVERITY_ID_DATASTORE_ACTIVITY_SEVERITY_ID_UNKNOWN       DATASTORE_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATASTORE_ACTIVITY_SEVERITY_ID_DATASTORE_ACTIVITY_SEVERITY_ID_INFORMATIONAL DATASTORE_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATASTORE_ACTIVITY_SEVERITY_ID_DATASTORE_ACTIVITY_SEVERITY_ID_LOW           DATASTORE_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATASTORE_ACTIVITY_SEVERITY_ID_DATASTORE_ACTIVITY_SEVERITY_ID_MEDIUM        DATASTORE_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATASTORE_ACTIVITY_SEVERITY_ID_DATASTORE_ACTIVITY_SEVERITY_ID_HIGH          DATASTORE_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATASTORE_ACTIVITY_SEVERITY_ID_DATASTORE_ACTIVITY_SEVERITY_ID_CRITICAL      DATASTORE_ACTIVITY_SEVERITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_SEVERITY_ID_DATASTORE_ACTIVITY_SEVERITY_ID_FATAL         DATASTORE_ACTIVITY_SEVERITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATASTORE_ACTIVITY_SEVERITY_ID_DATASTORE_ACTIVITY_SEVERITY_ID_OTHER         DATASTORE_ACTIVITY_SEVERITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATASTORE_ACTIVITY_SEVERITY_ID.
var (
	DATASTORE_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "DATASTORE_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "DATASTORE_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "DATASTORE_ACTIVITY_SEVERITY_ID_LOW",
		3:  "DATASTORE_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "DATASTORE_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "DATASTORE_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "DATASTORE_ACTIVITY_SEVERITY_ID_FATAL",
		99: "DATASTORE_ACTIVITY_SEVERITY_ID_OTHER",
	}
	DATASTORE_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"DATASTORE_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"DATASTORE_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"DATASTORE_ACTIVITY_SEVERITY_ID_LOW":           2,
		"DATASTORE_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"DATASTORE_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"DATASTORE_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"DATASTORE_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"DATASTORE_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x DATASTORE_ACTIVITY_SEVERITY_ID) Enum() *DATASTORE_ACTIVITY_SEVERITY_ID {
	p := new(DATASTORE_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[33].Descriptor()
}

func (DATASTORE_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[33]
}

func (x DATASTORE_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (DATASTORE_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{33}
}

type DATASTORE_ACTIVITY_STATUS_ID int32

const (
	DATASTORE_ACTIVITY_STATUS_ID_DATASTORE_ACTIVITY_STATUS_ID_UNKNOWN DATASTORE_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATASTORE_ACTIVITY_STATUS_ID_DATASTORE_ACTIVITY_STATUS_ID_SUCCESS DATASTORE_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATASTORE_ACTIVITY_STATUS_ID_DATASTORE_ACTIVITY_STATUS_ID_FAILURE DATASTORE_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATASTORE_ACTIVITY_STATUS_ID_DATASTORE_ACTIVITY_STATUS_ID_OTHER   DATASTORE_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATASTORE_ACTIVITY_STATUS_ID.
var (
	DATASTORE_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "DATASTORE_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "DATASTORE_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "DATASTORE_ACTIVITY_STATUS_ID_FAILURE",
		99: "DATASTORE_ACTIVITY_STATUS_ID_OTHER",
	}
	DATASTORE_ACTIVITY_STATUS_ID_value = map[string]int32{
		"DATASTORE_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"DATASTORE_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"DATASTORE_ACTIVITY_STATUS_ID_FAILURE": 2,
		"DATASTORE_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x DATASTORE_ACTIVITY_STATUS_ID) Enum() *DATASTORE_ACTIVITY_STATUS_ID {
	p := new(DATASTORE_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[34].Descriptor()
}

func (DATASTORE_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[34]
}

func (x DATASTORE_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_STATUS_ID.Descriptor instead.
func (DATASTORE_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{34}
}

type API_ACTIVITY_TYPE_UID int32

const (
	API_ACTIVITY_TYPE_UID_API_ACTIVITY_TYPE_UID_UNSPECIFIED          API_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	API_ACTIVITY_TYPE_UID_API_ACTIVITY_TYPE_UID_API_ACTIVITY_UNKNOWN API_ACTIVITY_TYPE_UID = 600300 // Type: OCSF_VALUE; EnumValue: 600300;
	API_ACTIVITY_TYPE_UID_API_ACTIVITY_TYPE_UID_API_ACTIVITY_CREATE  API_ACTIVITY_TYPE_UID = 600301 // Type: OCSF_VALUE; EnumValue: 600301;
	API_ACTIVITY_TYPE_UID_API_ACTIVITY_TYPE_UID_API_ACTIVITY_READ    API_ACTIVITY_TYPE_UID = 600302 // Type: OCSF_VALUE; EnumValue: 600302;
	API_ACTIVITY_TYPE_UID_API_ACTIVITY_TYPE_UID_API_ACTIVITY_UPDATE  API_ACTIVITY_TYPE_UID = 600303 // Type: OCSF_VALUE; EnumValue: 600303;
	API_ACTIVITY_TYPE_UID_API_ACTIVITY_TYPE_UID_API_ACTIVITY_DELETE  API_ACTIVITY_TYPE_UID = 600304 // EnumValue: 600304; Type: OCSF_VALUE;
	API_ACTIVITY_TYPE_UID_API_ACTIVITY_TYPE_UID_API_ACTIVITY_OTHER   API_ACTIVITY_TYPE_UID = 600399 // Type: OCSF_VALUE; EnumValue: 600399;
)

// Enum value maps for API_ACTIVITY_TYPE_UID.
var (
	API_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "API_ACTIVITY_TYPE_UID_UNSPECIFIED",
		600300: "API_ACTIVITY_TYPE_UID_API_ACTIVITY_UNKNOWN",
		600301: "API_ACTIVITY_TYPE_UID_API_ACTIVITY_CREATE",
		600302: "API_ACTIVITY_TYPE_UID_API_ACTIVITY_READ",
		600303: "API_ACTIVITY_TYPE_UID_API_ACTIVITY_UPDATE",
		600304: "API_ACTIVITY_TYPE_UID_API_ACTIVITY_DELETE",
		600399: "API_ACTIVITY_TYPE_UID_API_ACTIVITY_OTHER",
	}
	API_ACTIVITY_TYPE_UID_value = map[string]int32{
		"API_ACTIVITY_TYPE_UID_UNSPECIFIED":          0,
		"API_ACTIVITY_TYPE_UID_API_ACTIVITY_UNKNOWN": 600300,
		"API_ACTIVITY_TYPE_UID_API_ACTIVITY_CREATE":  600301,
		"API_ACTIVITY_TYPE_UID_API_ACTIVITY_READ":    600302,
		"API_ACTIVITY_TYPE_UID_API_ACTIVITY_UPDATE":  600303,
		"API_ACTIVITY_TYPE_UID_API_ACTIVITY_DELETE":  600304,
		"API_ACTIVITY_TYPE_UID_API_ACTIVITY_OTHER":   600399,
	}
)

func (x API_ACTIVITY_TYPE_UID) Enum() *API_ACTIVITY_TYPE_UID {
	p := new(API_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x API_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[35].Descriptor()
}

func (API_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[35]
}

func (x API_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_TYPE_UID.Descriptor instead.
func (API_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{35}
}

type WEB_RESOURCES_ACTIVITY_STATUS_ID int32

const (
	WEB_RESOURCES_ACTIVITY_STATUS_ID_WEB_RESOURCES_ACTIVITY_STATUS_ID_UNKNOWN WEB_RESOURCES_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WEB_RESOURCES_ACTIVITY_STATUS_ID_WEB_RESOURCES_ACTIVITY_STATUS_ID_SUCCESS WEB_RESOURCES_ACTIVITY_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	WEB_RESOURCES_ACTIVITY_STATUS_ID_WEB_RESOURCES_ACTIVITY_STATUS_ID_FAILURE WEB_RESOURCES_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	WEB_RESOURCES_ACTIVITY_STATUS_ID_WEB_RESOURCES_ACTIVITY_STATUS_ID_OTHER   WEB_RESOURCES_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_STATUS_ID.
var (
	WEB_RESOURCES_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "WEB_RESOURCES_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "WEB_RESOURCES_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "WEB_RESOURCES_ACTIVITY_STATUS_ID_FAILURE",
		99: "WEB_RESOURCES_ACTIVITY_STATUS_ID_OTHER",
	}
	WEB_RESOURCES_ACTIVITY_STATUS_ID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"WEB_RESOURCES_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"WEB_RESOURCES_ACTIVITY_STATUS_ID_FAILURE": 2,
		"WEB_RESOURCES_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x WEB_RESOURCES_ACTIVITY_STATUS_ID) Enum() *WEB_RESOURCES_ACTIVITY_STATUS_ID {
	p := new(WEB_RESOURCES_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[36].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[36]
}

func (x WEB_RESOURCES_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_STATUS_ID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{36}
}

type APPLICATION_ACTIVITY_ID int32

const (
	APPLICATION_ACTIVITY_ID_APPLICATION_ACTIVITY_ID_UNKNOWN APPLICATION_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	APPLICATION_ACTIVITY_ID_APPLICATION_ACTIVITY_ID_OTHER   APPLICATION_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for APPLICATION_ACTIVITY_ID.
var (
	APPLICATION_ACTIVITY_ID_name = map[int32]string{
		0:  "APPLICATION_ACTIVITY_ID_UNKNOWN",
		99: "APPLICATION_ACTIVITY_ID_OTHER",
	}
	APPLICATION_ACTIVITY_ID_value = map[string]int32{
		"APPLICATION_ACTIVITY_ID_UNKNOWN": 0,
		"APPLICATION_ACTIVITY_ID_OTHER":   99,
	}
)

func (x APPLICATION_ACTIVITY_ID) Enum() *APPLICATION_ACTIVITY_ID {
	p := new(APPLICATION_ACTIVITY_ID)
	*p = x
	return p
}

func (x APPLICATION_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[37].Descriptor()
}

func (APPLICATION_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[37]
}

func (x APPLICATION_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_ACTIVITY_ID.Descriptor instead.
func (APPLICATION_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{37}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_UNKNOWN       WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_LOW           WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_MEDIUM        WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_HIGH          WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_CRITICAL      WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_FATAL         WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_OTHER         WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_name = map[int32]string{
		0:  "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_UNKNOWN",
		1:  "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL",
		2:  "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_LOW",
		3:  "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_MEDIUM",
		4:  "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_HIGH",
		5:  "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_CRITICAL",
		6:  "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_FATAL",
		99: "WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_OTHER",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_UNKNOWN":       0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_INFORMATIONAL": 1,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_LOW":           2,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_MEDIUM":        3,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_HIGH":          4,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_CRITICAL":      5,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_FATAL":         6,
		"WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID_OTHER":         99,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[38].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[38]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{38}
}

type WEB_RESOURCES_ACTIVITY_CLASS_UID int32

const (
	WEB_RESOURCES_ACTIVITY_CLASS_UID_WEB_RESOURCES_ACTIVITY_CLASS_UID_UNSPECIFIED            WEB_RESOURCES_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	WEB_RESOURCES_ACTIVITY_CLASS_UID_WEB_RESOURCES_ACTIVITY_CLASS_UID_WEB_RESOURCES_ACTIVITY WEB_RESOURCES_ACTIVITY_CLASS_UID = 6001 // Type: OCSF_VALUE; EnumValue: 6001;
)

// Enum value maps for WEB_RESOURCES_ACTIVITY_CLASS_UID.
var (
	WEB_RESOURCES_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "WEB_RESOURCES_ACTIVITY_CLASS_UID_UNSPECIFIED",
		6001: "WEB_RESOURCES_ACTIVITY_CLASS_UID_WEB_RESOURCES_ACTIVITY",
	}
	WEB_RESOURCES_ACTIVITY_CLASS_UID_value = map[string]int32{
		"WEB_RESOURCES_ACTIVITY_CLASS_UID_UNSPECIFIED":            0,
		"WEB_RESOURCES_ACTIVITY_CLASS_UID_WEB_RESOURCES_ACTIVITY": 6001,
	}
)

func (x WEB_RESOURCES_ACTIVITY_CLASS_UID) Enum() *WEB_RESOURCES_ACTIVITY_CLASS_UID {
	p := new(WEB_RESOURCES_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x WEB_RESOURCES_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCES_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[39].Descriptor()
}

func (WEB_RESOURCES_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[39]
}

func (x WEB_RESOURCES_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCES_ACTIVITY_CLASS_UID.Descriptor instead.
func (WEB_RESOURCES_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{39}
}

type API_ACTIVITY_STATUS_ID int32

const (
	API_ACTIVITY_STATUS_ID_API_ACTIVITY_STATUS_ID_UNKNOWN API_ACTIVITY_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	API_ACTIVITY_STATUS_ID_API_ACTIVITY_STATUS_ID_SUCCESS API_ACTIVITY_STATUS_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	API_ACTIVITY_STATUS_ID_API_ACTIVITY_STATUS_ID_FAILURE API_ACTIVITY_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	API_ACTIVITY_STATUS_ID_API_ACTIVITY_STATUS_ID_OTHER   API_ACTIVITY_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for API_ACTIVITY_STATUS_ID.
var (
	API_ACTIVITY_STATUS_ID_name = map[int32]string{
		0:  "API_ACTIVITY_STATUS_ID_UNKNOWN",
		1:  "API_ACTIVITY_STATUS_ID_SUCCESS",
		2:  "API_ACTIVITY_STATUS_ID_FAILURE",
		99: "API_ACTIVITY_STATUS_ID_OTHER",
	}
	API_ACTIVITY_STATUS_ID_value = map[string]int32{
		"API_ACTIVITY_STATUS_ID_UNKNOWN": 0,
		"API_ACTIVITY_STATUS_ID_SUCCESS": 1,
		"API_ACTIVITY_STATUS_ID_FAILURE": 2,
		"API_ACTIVITY_STATUS_ID_OTHER":   99,
	}
)

func (x API_ACTIVITY_STATUS_ID) Enum() *API_ACTIVITY_STATUS_ID {
	p := new(API_ACTIVITY_STATUS_ID)
	*p = x
	return p
}

func (x API_ACTIVITY_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[40].Descriptor()
}

func (API_ACTIVITY_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[40]
}

func (x API_ACTIVITY_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_STATUS_ID.Descriptor instead.
func (API_ACTIVITY_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{40}
}

type APPLICATION_LIFECYCLE_TYPE_UID int32

const (
	APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_TYPE_UID_UNSPECIFIED                   APPLICATION_LIFECYCLE_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_UNKNOWN APPLICATION_LIFECYCLE_TYPE_UID = 600200 // Type: OCSF_VALUE; EnumValue: 600200;
	APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_INSTALL APPLICATION_LIFECYCLE_TYPE_UID = 600201 // Type: OCSF_VALUE; EnumValue: 600201;
	APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_REMOVE  APPLICATION_LIFECYCLE_TYPE_UID = 600202 // Type: OCSF_VALUE; EnumValue: 600202;
	APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_START   APPLICATION_LIFECYCLE_TYPE_UID = 600203 // EnumValue: 600203; Type: OCSF_VALUE;
	APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_STOP    APPLICATION_LIFECYCLE_TYPE_UID = 600204 // Type: OCSF_VALUE; EnumValue: 600204;
	APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_OTHER   APPLICATION_LIFECYCLE_TYPE_UID = 600299 // Type: OCSF_VALUE; EnumValue: 600299;
)

// Enum value maps for APPLICATION_LIFECYCLE_TYPE_UID.
var (
	APPLICATION_LIFECYCLE_TYPE_UID_name = map[int32]string{
		0:      "APPLICATION_LIFECYCLE_TYPE_UID_UNSPECIFIED",
		600200: "APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_UNKNOWN",
		600201: "APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_INSTALL",
		600202: "APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_REMOVE",
		600203: "APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_START",
		600204: "APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_STOP",
		600299: "APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_OTHER",
	}
	APPLICATION_LIFECYCLE_TYPE_UID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_TYPE_UID_UNSPECIFIED":                   0,
		"APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_UNKNOWN": 600200,
		"APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_INSTALL": 600201,
		"APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_REMOVE":  600202,
		"APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_START":   600203,
		"APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_STOP":    600204,
		"APPLICATION_LIFECYCLE_TYPE_UID_APPLICATION_LIFECYCLE_OTHER":   600299,
	}
)

func (x APPLICATION_LIFECYCLE_TYPE_UID) Enum() *APPLICATION_LIFECYCLE_TYPE_UID {
	p := new(APPLICATION_LIFECYCLE_TYPE_UID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[41].Descriptor()
}

func (APPLICATION_LIFECYCLE_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[41]
}

func (x APPLICATION_LIFECYCLE_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_TYPE_UID.Descriptor instead.
func (APPLICATION_LIFECYCLE_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{41}
}

type FILE_HOSTING_TYPE_UID int32

const (
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_UNSPECIFIED                    FILE_HOSTING_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNKNOWN  FILE_HOSTING_TYPE_UID = 600600 // Type: OCSF_VALUE; EnumValue: 600600;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UPLOAD   FILE_HOSTING_TYPE_UID = 600601 // Type: OCSF_VALUE; EnumValue: 600601;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_DOWNLOAD FILE_HOSTING_TYPE_UID = 600602 // Type: OCSF_VALUE; EnumValue: 600602;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UPDATE   FILE_HOSTING_TYPE_UID = 600603 // Type: OCSF_VALUE; EnumValue: 600603;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_DELETE   FILE_HOSTING_TYPE_UID = 600604 // Type: OCSF_VALUE; EnumValue: 600604;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_RENAME   FILE_HOSTING_TYPE_UID = 600605 // Type: OCSF_VALUE; EnumValue: 600605;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_COPY     FILE_HOSTING_TYPE_UID = 600606 // Type: OCSF_VALUE; EnumValue: 600606;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_MOVE     FILE_HOSTING_TYPE_UID = 600607 // Type: OCSF_VALUE; EnumValue: 600607;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_RESTORE  FILE_HOSTING_TYPE_UID = 600608 // EnumValue: 600608; Type: OCSF_VALUE;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_PREVIEW  FILE_HOSTING_TYPE_UID = 600609 // EnumValue: 600609; Type: OCSF_VALUE;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_LOCK     FILE_HOSTING_TYPE_UID = 600610 // Type: OCSF_VALUE; EnumValue: 600610;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNLOCK   FILE_HOSTING_TYPE_UID = 600611 // Type: OCSF_VALUE; EnumValue: 600611;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_SHARE    FILE_HOSTING_TYPE_UID = 600612 // Type: OCSF_VALUE; EnumValue: 600612;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNSHARE  FILE_HOSTING_TYPE_UID = 600613 // Type: OCSF_VALUE; EnumValue: 600613;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_OPEN     FILE_HOSTING_TYPE_UID = 600614 // Type: OCSF_VALUE; EnumValue: 600614;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_SYNC     FILE_HOSTING_TYPE_UID = 600615 // Type: OCSF_VALUE; EnumValue: 600615;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNSYNC   FILE_HOSTING_TYPE_UID = 600616 // Type: OCSF_VALUE; EnumValue: 600616;
	FILE_HOSTING_TYPE_UID_FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_OTHER    FILE_HOSTING_TYPE_UID = 600699 // Type: OCSF_VALUE; EnumValue: 600699;
)

// Enum value maps for FILE_HOSTING_TYPE_UID.
var (
	FILE_HOSTING_TYPE_UID_name = map[int32]string{
		0:      "FILE_HOSTING_TYPE_UID_UNSPECIFIED",
		600600: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNKNOWN",
		600601: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UPLOAD",
		600602: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_DOWNLOAD",
		600603: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UPDATE",
		600604: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_DELETE",
		600605: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_RENAME",
		600606: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_COPY",
		600607: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_MOVE",
		600608: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_RESTORE",
		600609: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_PREVIEW",
		600610: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_LOCK",
		600611: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNLOCK",
		600612: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_SHARE",
		600613: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNSHARE",
		600614: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_OPEN",
		600615: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_SYNC",
		600616: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNSYNC",
		600699: "FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_OTHER",
	}
	FILE_HOSTING_TYPE_UID_value = map[string]int32{
		"FILE_HOSTING_TYPE_UID_UNSPECIFIED":                    0,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNKNOWN":  600600,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UPLOAD":   600601,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_DOWNLOAD": 600602,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UPDATE":   600603,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_DELETE":   600604,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_RENAME":   600605,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_COPY":     600606,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_MOVE":     600607,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_RESTORE":  600608,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_PREVIEW":  600609,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_LOCK":     600610,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNLOCK":   600611,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_SHARE":    600612,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNSHARE":  600613,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_OPEN":     600614,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_SYNC":     600615,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_UNSYNC":   600616,
		"FILE_HOSTING_TYPE_UID_FILE_HOSTING_ACTIVITY_OTHER":    600699,
	}
)

func (x FILE_HOSTING_TYPE_UID) Enum() *FILE_HOSTING_TYPE_UID {
	p := new(FILE_HOSTING_TYPE_UID)
	*p = x
	return p
}

func (x FILE_HOSTING_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_HOSTING_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[42].Descriptor()
}

func (FILE_HOSTING_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[42]
}

func (x FILE_HOSTING_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_HOSTING_TYPE_UID.Descriptor instead.
func (FILE_HOSTING_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{42}
}

type APPLICATION_CLASS_UID int32

const (
	APPLICATION_CLASS_UID_APPLICATION_CLASS_UID_UNSPECIFIED          APPLICATION_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	APPLICATION_CLASS_UID_APPLICATION_CLASS_UID_APPLICATION_ACTIVITY APPLICATION_CLASS_UID = 6000 // Type: OCSF_VALUE; EnumValue: 6000;
)

// Enum value maps for APPLICATION_CLASS_UID.
var (
	APPLICATION_CLASS_UID_name = map[int32]string{
		0:    "APPLICATION_CLASS_UID_UNSPECIFIED",
		6000: "APPLICATION_CLASS_UID_APPLICATION_ACTIVITY",
	}
	APPLICATION_CLASS_UID_value = map[string]int32{
		"APPLICATION_CLASS_UID_UNSPECIFIED":          0,
		"APPLICATION_CLASS_UID_APPLICATION_ACTIVITY": 6000,
	}
)

func (x APPLICATION_CLASS_UID) Enum() *APPLICATION_CLASS_UID {
	p := new(APPLICATION_CLASS_UID)
	*p = x
	return p
}

func (x APPLICATION_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[43].Descriptor()
}

func (APPLICATION_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[43]
}

func (x APPLICATION_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_CLASS_UID.Descriptor instead.
func (APPLICATION_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{43}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNSPECIFIED          WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID = 0 // Type: NON_OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID = 6 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_name = map[int32]string{
		0: "WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNSPECIFIED",
		6: "WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_UNSPECIFIED":          0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID_APPLICATION_ACTIVITY": 6,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[44].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[44]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{44}
}

type FILE_HOSTING_ACTIVITY_ID int32

const (
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_UNKNOWN  FILE_HOSTING_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_UPLOAD   FILE_HOSTING_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_DOWNLOAD FILE_HOSTING_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_UPDATE   FILE_HOSTING_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_DELETE   FILE_HOSTING_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_RENAME   FILE_HOSTING_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_COPY     FILE_HOSTING_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_MOVE     FILE_HOSTING_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_RESTORE  FILE_HOSTING_ACTIVITY_ID = 8  // EnumValue: 8; Type: OCSF_VALUE;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_PREVIEW  FILE_HOSTING_ACTIVITY_ID = 9  // EnumValue: 9; Type: OCSF_VALUE;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_LOCK     FILE_HOSTING_ACTIVITY_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_UNLOCK   FILE_HOSTING_ACTIVITY_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_SHARE    FILE_HOSTING_ACTIVITY_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_UNSHARE  FILE_HOSTING_ACTIVITY_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_OPEN     FILE_HOSTING_ACTIVITY_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_SYNC     FILE_HOSTING_ACTIVITY_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_UNSYNC   FILE_HOSTING_ACTIVITY_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	FILE_HOSTING_ACTIVITY_ID_FILE_HOSTING_ACTIVITY_ID_OTHER    FILE_HOSTING_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_HOSTING_ACTIVITY_ID.
var (
	FILE_HOSTING_ACTIVITY_ID_name = map[int32]string{
		0:  "FILE_HOSTING_ACTIVITY_ID_UNKNOWN",
		1:  "FILE_HOSTING_ACTIVITY_ID_UPLOAD",
		2:  "FILE_HOSTING_ACTIVITY_ID_DOWNLOAD",
		3:  "FILE_HOSTING_ACTIVITY_ID_UPDATE",
		4:  "FILE_HOSTING_ACTIVITY_ID_DELETE",
		5:  "FILE_HOSTING_ACTIVITY_ID_RENAME",
		6:  "FILE_HOSTING_ACTIVITY_ID_COPY",
		7:  "FILE_HOSTING_ACTIVITY_ID_MOVE",
		8:  "FILE_HOSTING_ACTIVITY_ID_RESTORE",
		9:  "FILE_HOSTING_ACTIVITY_ID_PREVIEW",
		10: "FILE_HOSTING_ACTIVITY_ID_LOCK",
		11: "FILE_HOSTING_ACTIVITY_ID_UNLOCK",
		12: "FILE_HOSTING_ACTIVITY_ID_SHARE",
		13: "FILE_HOSTING_ACTIVITY_ID_UNSHARE",
		14: "FILE_HOSTING_ACTIVITY_ID_OPEN",
		15: "FILE_HOSTING_ACTIVITY_ID_SYNC",
		16: "FILE_HOSTING_ACTIVITY_ID_UNSYNC",
		99: "FILE_HOSTING_ACTIVITY_ID_OTHER",
	}
	FILE_HOSTING_ACTIVITY_ID_value = map[string]int32{
		"FILE_HOSTING_ACTIVITY_ID_UNKNOWN":  0,
		"FILE_HOSTING_ACTIVITY_ID_UPLOAD":   1,
		"FILE_HOSTING_ACTIVITY_ID_DOWNLOAD": 2,
		"FILE_HOSTING_ACTIVITY_ID_UPDATE":   3,
		"FILE_HOSTING_ACTIVITY_ID_DELETE":   4,
		"FILE_HOSTING_ACTIVITY_ID_RENAME":   5,
		"FILE_HOSTING_ACTIVITY_ID_COPY":     6,
		"FILE_HOSTING_ACTIVITY_ID_MOVE":     7,
		"FILE_HOSTING_ACTIVITY_ID_RESTORE":  8,
		"FILE_HOSTING_ACTIVITY_ID_PREVIEW":  9,
		"FILE_HOSTING_ACTIVITY_ID_LOCK":     10,
		"FILE_HOSTING_ACTIVITY_ID_UNLOCK":   11,
		"FILE_HOSTING_ACTIVITY_ID_SHARE":    12,
		"FILE_HOSTING_ACTIVITY_ID_UNSHARE":  13,
		"FILE_HOSTING_ACTIVITY_ID_OPEN":     14,
		"FILE_HOSTING_ACTIVITY_ID_SYNC":     15,
		"FILE_HOSTING_ACTIVITY_ID_UNSYNC":   16,
		"FILE_HOSTING_ACTIVITY_ID_OTHER":    99,
	}
)

func (x FILE_HOSTING_ACTIVITY_ID) Enum() *FILE_HOSTING_ACTIVITY_ID {
	p := new(FILE_HOSTING_ACTIVITY_ID)
	*p = x
	return p
}

func (x FILE_HOSTING_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_HOSTING_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[45].Descriptor()
}

func (FILE_HOSTING_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[45]
}

func (x FILE_HOSTING_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_HOSTING_ACTIVITY_ID.Descriptor instead.
func (FILE_HOSTING_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{45}
}

type WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID int32

const (
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_UNSPECIFIED                                WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID = 0      // Type: NON_OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_UNKNOWN       WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID = 600400 // Type: OCSF_VALUE; EnumValue: 600400;
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_GRANT  WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID = 600401 // Type: OCSF_VALUE; EnumValue: 600401;
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_DENY   WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID = 600402 // EnumValue: 600402; Type: OCSF_VALUE;
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_REVOKE WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID = 600403 // Type: OCSF_VALUE; EnumValue: 600403;
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_ERROR  WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID = 600404 // Type: OCSF_VALUE; EnumValue: 600404;
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_OTHER         WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID = 600499 // Type: OCSF_VALUE; EnumValue: 600499;
)

// Enum value maps for WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID.
var (
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_name = map[int32]string{
		0:      "WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_UNSPECIFIED",
		600400: "WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_UNKNOWN",
		600401: "WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_GRANT",
		600402: "WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_DENY",
		600403: "WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_REVOKE",
		600404: "WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_ERROR",
		600499: "WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_OTHER",
	}
	WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_value = map[string]int32{
		"WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_UNSPECIFIED":                                0,
		"WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_UNKNOWN":       600400,
		"WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_GRANT":  600401,
		"WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_DENY":   600402,
		"WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_REVOKE": 600403,
		"WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_ACCESS_ERROR":  600404,
		"WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID_WEB_RESOURCE_ACCESS_ACTIVITY_OTHER":         600499,
	}
)

func (x WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID) Enum() *WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID {
	p := new(WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID)
	*p = x
	return p
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[46].Descriptor()
}

func (WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[46]
}

func (x WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID.Descriptor instead.
func (WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{46}
}

type API_ACTIVITY_CLASS_UID int32

const (
	API_ACTIVITY_CLASS_UID_API_ACTIVITY_CLASS_UID_UNSPECIFIED  API_ACTIVITY_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	API_ACTIVITY_CLASS_UID_API_ACTIVITY_CLASS_UID_API_ACTIVITY API_ACTIVITY_CLASS_UID = 6003 // Type: OCSF_VALUE; EnumValue: 6003;
)

// Enum value maps for API_ACTIVITY_CLASS_UID.
var (
	API_ACTIVITY_CLASS_UID_name = map[int32]string{
		0:    "API_ACTIVITY_CLASS_UID_UNSPECIFIED",
		6003: "API_ACTIVITY_CLASS_UID_API_ACTIVITY",
	}
	API_ACTIVITY_CLASS_UID_value = map[string]int32{
		"API_ACTIVITY_CLASS_UID_UNSPECIFIED":  0,
		"API_ACTIVITY_CLASS_UID_API_ACTIVITY": 6003,
	}
)

func (x API_ACTIVITY_CLASS_UID) Enum() *API_ACTIVITY_CLASS_UID {
	p := new(API_ACTIVITY_CLASS_UID)
	*p = x
	return p
}

func (x API_ACTIVITY_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (API_ACTIVITY_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[47].Descriptor()
}

func (API_ACTIVITY_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[47]
}

func (x API_ACTIVITY_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use API_ACTIVITY_CLASS_UID.Descriptor instead.
func (API_ACTIVITY_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{47}
}

type APPLICATION_LIFECYCLE_ACTIVITY_ID int32

const (
	APPLICATION_LIFECYCLE_ACTIVITY_ID_APPLICATION_LIFECYCLE_ACTIVITY_ID_UNKNOWN APPLICATION_LIFECYCLE_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	APPLICATION_LIFECYCLE_ACTIVITY_ID_APPLICATION_LIFECYCLE_ACTIVITY_ID_INSTALL APPLICATION_LIFECYCLE_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	APPLICATION_LIFECYCLE_ACTIVITY_ID_APPLICATION_LIFECYCLE_ACTIVITY_ID_REMOVE  APPLICATION_LIFECYCLE_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	APPLICATION_LIFECYCLE_ACTIVITY_ID_APPLICATION_LIFECYCLE_ACTIVITY_ID_START   APPLICATION_LIFECYCLE_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	APPLICATION_LIFECYCLE_ACTIVITY_ID_APPLICATION_LIFECYCLE_ACTIVITY_ID_STOP    APPLICATION_LIFECYCLE_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	APPLICATION_LIFECYCLE_ACTIVITY_ID_APPLICATION_LIFECYCLE_ACTIVITY_ID_OTHER   APPLICATION_LIFECYCLE_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for APPLICATION_LIFECYCLE_ACTIVITY_ID.
var (
	APPLICATION_LIFECYCLE_ACTIVITY_ID_name = map[int32]string{
		0:  "APPLICATION_LIFECYCLE_ACTIVITY_ID_UNKNOWN",
		1:  "APPLICATION_LIFECYCLE_ACTIVITY_ID_INSTALL",
		2:  "APPLICATION_LIFECYCLE_ACTIVITY_ID_REMOVE",
		3:  "APPLICATION_LIFECYCLE_ACTIVITY_ID_START",
		4:  "APPLICATION_LIFECYCLE_ACTIVITY_ID_STOP",
		99: "APPLICATION_LIFECYCLE_ACTIVITY_ID_OTHER",
	}
	APPLICATION_LIFECYCLE_ACTIVITY_ID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_ACTIVITY_ID_UNKNOWN": 0,
		"APPLICATION_LIFECYCLE_ACTIVITY_ID_INSTALL": 1,
		"APPLICATION_LIFECYCLE_ACTIVITY_ID_REMOVE":  2,
		"APPLICATION_LIFECYCLE_ACTIVITY_ID_START":   3,
		"APPLICATION_LIFECYCLE_ACTIVITY_ID_STOP":    4,
		"APPLICATION_LIFECYCLE_ACTIVITY_ID_OTHER":   99,
	}
)

func (x APPLICATION_LIFECYCLE_ACTIVITY_ID) Enum() *APPLICATION_LIFECYCLE_ACTIVITY_ID {
	p := new(APPLICATION_LIFECYCLE_ACTIVITY_ID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[48].Descriptor()
}

func (APPLICATION_LIFECYCLE_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[48]
}

func (x APPLICATION_LIFECYCLE_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_ACTIVITY_ID.Descriptor instead.
func (APPLICATION_LIFECYCLE_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{48}
}

type DATASTORE_ACTIVITY_ACTIVITY_ID int32

const (
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_UNKNOWN DATASTORE_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_READ    DATASTORE_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_UPDATE  DATASTORE_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_CONNECT DATASTORE_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_QUERY   DATASTORE_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_WRITE   DATASTORE_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_CREATE  DATASTORE_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_DELETE  DATASTORE_ACTIVITY_ACTIVITY_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_LIST    DATASTORE_ACTIVITY_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_ENCRYPT DATASTORE_ACTIVITY_ACTIVITY_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_DECRYPT DATASTORE_ACTIVITY_ACTIVITY_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	DATASTORE_ACTIVITY_ACTIVITY_ID_DATASTORE_ACTIVITY_ACTIVITY_ID_OTHER   DATASTORE_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATASTORE_ACTIVITY_ACTIVITY_ID.
var (
	DATASTORE_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "DATASTORE_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "DATASTORE_ACTIVITY_ACTIVITY_ID_READ",
		2:  "DATASTORE_ACTIVITY_ACTIVITY_ID_UPDATE",
		3:  "DATASTORE_ACTIVITY_ACTIVITY_ID_CONNECT",
		4:  "DATASTORE_ACTIVITY_ACTIVITY_ID_QUERY",
		5:  "DATASTORE_ACTIVITY_ACTIVITY_ID_WRITE",
		6:  "DATASTORE_ACTIVITY_ACTIVITY_ID_CREATE",
		7:  "DATASTORE_ACTIVITY_ACTIVITY_ID_DELETE",
		8:  "DATASTORE_ACTIVITY_ACTIVITY_ID_LIST",
		9:  "DATASTORE_ACTIVITY_ACTIVITY_ID_ENCRYPT",
		10: "DATASTORE_ACTIVITY_ACTIVITY_ID_DECRYPT",
		99: "DATASTORE_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	DATASTORE_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"DATASTORE_ACTIVITY_ACTIVITY_ID_UNKNOWN": 0,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_READ":    1,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_UPDATE":  2,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_CONNECT": 3,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_QUERY":   4,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_WRITE":   5,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_CREATE":  6,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_DELETE":  7,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_LIST":    8,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_ENCRYPT": 9,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_DECRYPT": 10,
		"DATASTORE_ACTIVITY_ACTIVITY_ID_OTHER":   99,
	}
)

func (x DATASTORE_ACTIVITY_ACTIVITY_ID) Enum() *DATASTORE_ACTIVITY_ACTIVITY_ID {
	p := new(DATASTORE_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x DATASTORE_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATASTORE_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[49].Descriptor()
}

func (DATASTORE_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[49]
}

func (x DATASTORE_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATASTORE_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (DATASTORE_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{49}
}

type FILE_HOSTING_CLASS_UID int32

const (
	FILE_HOSTING_CLASS_UID_FILE_HOSTING_CLASS_UID_UNSPECIFIED           FILE_HOSTING_CLASS_UID = 0    // Type: NON_OCSF_VALUE;
	FILE_HOSTING_CLASS_UID_FILE_HOSTING_CLASS_UID_FILE_HOSTING_ACTIVITY FILE_HOSTING_CLASS_UID = 6006 // Type: OCSF_VALUE; EnumValue: 6006;
)

// Enum value maps for FILE_HOSTING_CLASS_UID.
var (
	FILE_HOSTING_CLASS_UID_name = map[int32]string{
		0:    "FILE_HOSTING_CLASS_UID_UNSPECIFIED",
		6006: "FILE_HOSTING_CLASS_UID_FILE_HOSTING_ACTIVITY",
	}
	FILE_HOSTING_CLASS_UID_value = map[string]int32{
		"FILE_HOSTING_CLASS_UID_UNSPECIFIED":           0,
		"FILE_HOSTING_CLASS_UID_FILE_HOSTING_ACTIVITY": 6006,
	}
)

func (x FILE_HOSTING_CLASS_UID) Enum() *FILE_HOSTING_CLASS_UID {
	p := new(FILE_HOSTING_CLASS_UID)
	*p = x
	return p
}

func (x FILE_HOSTING_CLASS_UID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_HOSTING_CLASS_UID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[50].Descriptor()
}

func (FILE_HOSTING_CLASS_UID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[50]
}

func (x FILE_HOSTING_CLASS_UID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_HOSTING_CLASS_UID.Descriptor instead.
func (FILE_HOSTING_CLASS_UID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{50}
}

type APPLICATION_LIFECYCLE_STATUS_ID int32

const (
	APPLICATION_LIFECYCLE_STATUS_ID_APPLICATION_LIFECYCLE_STATUS_ID_UNKNOWN APPLICATION_LIFECYCLE_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	APPLICATION_LIFECYCLE_STATUS_ID_APPLICATION_LIFECYCLE_STATUS_ID_SUCCESS APPLICATION_LIFECYCLE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	APPLICATION_LIFECYCLE_STATUS_ID_APPLICATION_LIFECYCLE_STATUS_ID_FAILURE APPLICATION_LIFECYCLE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	APPLICATION_LIFECYCLE_STATUS_ID_APPLICATION_LIFECYCLE_STATUS_ID_OTHER   APPLICATION_LIFECYCLE_STATUS_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for APPLICATION_LIFECYCLE_STATUS_ID.
var (
	APPLICATION_LIFECYCLE_STATUS_ID_name = map[int32]string{
		0:  "APPLICATION_LIFECYCLE_STATUS_ID_UNKNOWN",
		1:  "APPLICATION_LIFECYCLE_STATUS_ID_SUCCESS",
		2:  "APPLICATION_LIFECYCLE_STATUS_ID_FAILURE",
		99: "APPLICATION_LIFECYCLE_STATUS_ID_OTHER",
	}
	APPLICATION_LIFECYCLE_STATUS_ID_value = map[string]int32{
		"APPLICATION_LIFECYCLE_STATUS_ID_UNKNOWN": 0,
		"APPLICATION_LIFECYCLE_STATUS_ID_SUCCESS": 1,
		"APPLICATION_LIFECYCLE_STATUS_ID_FAILURE": 2,
		"APPLICATION_LIFECYCLE_STATUS_ID_OTHER":   99,
	}
)

func (x APPLICATION_LIFECYCLE_STATUS_ID) Enum() *APPLICATION_LIFECYCLE_STATUS_ID {
	p := new(APPLICATION_LIFECYCLE_STATUS_ID)
	*p = x
	return p
}

func (x APPLICATION_LIFECYCLE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APPLICATION_LIFECYCLE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[51].Descriptor()
}

func (APPLICATION_LIFECYCLE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[51]
}

func (x APPLICATION_LIFECYCLE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APPLICATION_LIFECYCLE_STATUS_ID.Descriptor instead.
func (APPLICATION_LIFECYCLE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{51}
}

type SCAN_ACTIVITY_ACTIVITY_ID int32

const (
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_UNKNOWN            SCAN_ACTIVITY_ACTIVITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_STARTED            SCAN_ACTIVITY_ACTIVITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_COMPLETED          SCAN_ACTIVITY_ACTIVITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_CANCELLED          SCAN_ACTIVITY_ACTIVITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_DURATION_VIOLATION SCAN_ACTIVITY_ACTIVITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_PAUSE_VIOLATION    SCAN_ACTIVITY_ACTIVITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_ERROR              SCAN_ACTIVITY_ACTIVITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_PAUSED             SCAN_ACTIVITY_ACTIVITY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_RESUMED            SCAN_ACTIVITY_ACTIVITY_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_RESTARTED          SCAN_ACTIVITY_ACTIVITY_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_DELAYED            SCAN_ACTIVITY_ACTIVITY_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	SCAN_ACTIVITY_ACTIVITY_ID_SCAN_ACTIVITY_ACTIVITY_ID_OTHER              SCAN_ACTIVITY_ACTIVITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SCAN_ACTIVITY_ACTIVITY_ID.
var (
	SCAN_ACTIVITY_ACTIVITY_ID_name = map[int32]string{
		0:  "SCAN_ACTIVITY_ACTIVITY_ID_UNKNOWN",
		1:  "SCAN_ACTIVITY_ACTIVITY_ID_STARTED",
		2:  "SCAN_ACTIVITY_ACTIVITY_ID_COMPLETED",
		3:  "SCAN_ACTIVITY_ACTIVITY_ID_CANCELLED",
		4:  "SCAN_ACTIVITY_ACTIVITY_ID_DURATION_VIOLATION",
		5:  "SCAN_ACTIVITY_ACTIVITY_ID_PAUSE_VIOLATION",
		6:  "SCAN_ACTIVITY_ACTIVITY_ID_ERROR",
		7:  "SCAN_ACTIVITY_ACTIVITY_ID_PAUSED",
		8:  "SCAN_ACTIVITY_ACTIVITY_ID_RESUMED",
		9:  "SCAN_ACTIVITY_ACTIVITY_ID_RESTARTED",
		10: "SCAN_ACTIVITY_ACTIVITY_ID_DELAYED",
		99: "SCAN_ACTIVITY_ACTIVITY_ID_OTHER",
	}
	SCAN_ACTIVITY_ACTIVITY_ID_value = map[string]int32{
		"SCAN_ACTIVITY_ACTIVITY_ID_UNKNOWN":            0,
		"SCAN_ACTIVITY_ACTIVITY_ID_STARTED":            1,
		"SCAN_ACTIVITY_ACTIVITY_ID_COMPLETED":          2,
		"SCAN_ACTIVITY_ACTIVITY_ID_CANCELLED":          3,
		"SCAN_ACTIVITY_ACTIVITY_ID_DURATION_VIOLATION": 4,
		"SCAN_ACTIVITY_ACTIVITY_ID_PAUSE_VIOLATION":    5,
		"SCAN_ACTIVITY_ACTIVITY_ID_ERROR":              6,
		"SCAN_ACTIVITY_ACTIVITY_ID_PAUSED":             7,
		"SCAN_ACTIVITY_ACTIVITY_ID_RESUMED":            8,
		"SCAN_ACTIVITY_ACTIVITY_ID_RESTARTED":          9,
		"SCAN_ACTIVITY_ACTIVITY_ID_DELAYED":            10,
		"SCAN_ACTIVITY_ACTIVITY_ID_OTHER":              99,
	}
)

func (x SCAN_ACTIVITY_ACTIVITY_ID) Enum() *SCAN_ACTIVITY_ACTIVITY_ID {
	p := new(SCAN_ACTIVITY_ACTIVITY_ID)
	*p = x
	return p
}

func (x SCAN_ACTIVITY_ACTIVITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCAN_ACTIVITY_ACTIVITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[52].Descriptor()
}

func (SCAN_ACTIVITY_ACTIVITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes[52]
}

func (x SCAN_ACTIVITY_ACTIVITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCAN_ACTIVITY_ACTIVITY_ID.Descriptor instead.
func (SCAN_ACTIVITY_ACTIVITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP(), []int{52}
}

var File_ocsf_v1_2_0_events_application_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x30, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x24, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2a, 0xc5, 0x02, 0x0a, 0x18, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x41,
	0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x49, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10,
	0x04, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e,
	0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0x8c, 0x01, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x06, 0x2a,
	0xf6, 0x01, 0x0a, 0x26, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32,
	0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xc4, 0x05, 0x0a, 0x16, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2c, 0x53,
	0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xfc, 0xd4, 0x24, 0x12,
	0x32, 0x0a, 0x2c, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10,
	0xfd, 0xd4, 0x24, 0x12, 0x34, 0x0a, 0x2e, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xfe, 0xd4, 0x24, 0x12, 0x34, 0x0a, 0x2e, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xff, 0xd4, 0x24, 0x12,
	0x3d, 0x0a, 0x37, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x80, 0xd5, 0x24, 0x12, 0x3a,
	0x0a, 0x34, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x56, 0x49, 0x4f,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x81, 0xd5, 0x24, 0x12, 0x30, 0x0a, 0x2a, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x82, 0xd5, 0x24, 0x12, 0x31, 0x0a, 0x2b,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x83, 0xd5, 0x24, 0x12,
	0x32, 0x0a, 0x2c, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x44, 0x10,
	0x84, 0xd5, 0x24, 0x12, 0x34, 0x0a, 0x2e, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x85, 0xd5, 0x24, 0x12, 0x32, 0x0a, 0x2c, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x86, 0xd5, 0x24, 0x12, 0x30, 0x0a,
	0x2a, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xdf, 0xd5, 0x24, 0x2a,
	0xab, 0x01, 0x0a, 0x17, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x80, 0x03,
	0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x39, 0x0a, 0x35, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44,
	0x45, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x3a, 0x0a, 0x36, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10,
	0x03, 0x12, 0x39, 0x0a, 0x35, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xd7, 0x01, 0x0a, 0x20, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2a,
	0x0a, 0x26, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x95, 0x01, 0x0a, 0x22, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x32, 0x0a, 0x2e, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3b, 0x0a, 0x37, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x10, 0x06, 0x2a, 0x7a, 0x0a, 0x19, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x41, 0x50,
	0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x06, 0x2a, 0x9f,
	0x03, 0x0a, 0x22, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x45, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0x98, 0x01, 0x0a, 0x23, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x2f, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3c, 0x0a,
	0x38, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x06, 0x2a, 0x7a, 0x0a, 0x19, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x06, 0x2a, 0xf7, 0x03, 0x0a, 0x22, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x2a, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d,
	0x0a, 0x29, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a,
	0x27, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x45, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xa1, 0x01, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf6, 0x01, 0x0a, 0x18, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x49, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50,
	0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x96,
	0x0c, 0x0a, 0x25, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x31,
	0x0a, 0x2d, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41,
	0x4e, 0x54, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x31, 0x0a, 0x2d, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x37, 0x0a, 0x33, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x32, 0x0a, 0x2e, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x34, 0x0a, 0x30, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x33, 0x0a, 0x2f, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x3d,
	0x0a, 0x39, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x35, 0x0a,
	0x31, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x0d, 0x12, 0x31, 0x0a, 0x2d, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x33, 0x0a, 0x2f, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10,
	0x12, 0x30, 0x0a, 0x2c, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x12, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x10, 0x13, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x31, 0x0a, 0x2d, 0x57, 0x45, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x33, 0x0a, 0x2f, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12,
	0x38, 0x0a, 0x34, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x18, 0x12, 0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x19, 0x12, 0x36, 0x0a,
	0x32, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x1b, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x77, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31,
	0x0a, 0x2d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x06, 0x2a, 0xa3, 0x06, 0x0a, 0x1b, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3c,
	0x0a, 0x36, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xb4, 0xd3, 0x24, 0x12, 0x39, 0x0a, 0x33,
	0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x10, 0xb5, 0xd3, 0x24, 0x12, 0x3b, 0x0a, 0x35, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0xb6, 0xd3, 0x24, 0x12, 0x3c, 0x0a, 0x36, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0xb7,
	0xd3, 0x24, 0x12, 0x3a, 0x0a, 0x34, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0xb8, 0xd3, 0x24, 0x12, 0x3a,
	0x0a, 0x34, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xb9, 0xd3, 0x24, 0x12, 0x3b, 0x0a, 0x35, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0xba, 0xd3, 0x24, 0x12, 0x3b, 0x0a, 0x35, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0xbb, 0xd3, 0x24, 0x12, 0x39, 0x0a, 0x33, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xbc, 0xd3, 0x24, 0x12,
	0x3c, 0x0a, 0x36, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0xbd, 0xd3, 0x24, 0x12, 0x3c, 0x0a,
	0x36, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0xbe, 0xd3, 0x24, 0x12, 0x3a, 0x0a, 0x34, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x97, 0xd4, 0x24, 0x2a, 0x6e, 0x0a, 0x17, 0x53, 0x43, 0x41, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x25, 0x53,
	0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x10, 0xf7, 0x2e, 0x2a, 0x7d, 0x0a, 0x1a, 0x53, 0x43, 0x41, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x10, 0x06, 0x2a, 0xac, 0x01, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x31, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xc0, 0xcf, 0x24, 0x12, 0x35,
	0x0a, 0x2f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0xa3, 0xd0, 0x24, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x9e,
	0x0b, 0x0a, 0x21, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x4f,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54,
	0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x39, 0x0a, 0x35, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x47, 0x47, 0x45, 0x44, 0x10, 0x11, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x12, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x13, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x2b,
	0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x15, 0x12, 0x2d, 0x0a, 0x29, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x10, 0x16, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x17, 0x12, 0x34, 0x0a, 0x30, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10,
	0x18, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x19, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x1b, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0x96, 0x03, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x2e,
	0x0a, 0x2a, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x2b,
	0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x81, 0x06, 0x0a, 0x1f, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x44, 0x0a,
	0x3e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0xa4, 0xd0, 0x24, 0x12, 0x43, 0x0a, 0x3d, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0xa5, 0xd0, 0x24, 0x12, 0x41, 0x0a, 0x3b, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xa6, 0xd0, 0x24, 0x12, 0x43, 0x0a, 0x3d, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xa7, 0xd0, 0x24,
	0x12, 0x43, 0x0a, 0x3d, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0xa8, 0xd0, 0x24, 0x12, 0x43, 0x0a, 0x3d, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0xa9, 0xd0, 0x24, 0x12, 0x43, 0x0a, 0x3d, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xaa, 0xd0, 0x24, 0x12,
	0x43, 0x0a, 0x3d, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0xab, 0xd0, 0x24, 0x12, 0x42, 0x0a, 0x3c, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x10, 0xac, 0xd0, 0x24, 0x12, 0x42, 0x0a, 0x3c, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x87, 0xd1, 0x24, 0x2a, 0xc3, 0x01, 0x0a,
	0x1c, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x24, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xe4, 0x01, 0x0a, 0x1a, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41, 0x54,
	0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a,
	0x20, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xaa, 0x01, 0x0a, 0x26, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x32, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x48, 0x0a, 0x43,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x10, 0xf4, 0x2e, 0x2a, 0xbc, 0x02, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x57, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c,
	0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x82, 0x01, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x2f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xf5, 0x2e, 0x2a, 0x8e, 0x01, 0x0a, 0x1f, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x2b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x3a, 0x0a, 0x35, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0xf2, 0x2e, 0x2a, 0xc5, 0x02, 0x0a, 0x18,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a,
	0x0a, 0x26, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xfb, 0x02, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25,
	0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04,
	0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x28, 0x0a,
	0x24, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xc4, 0x01, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02,
	0x12, 0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe2, 0x02, 0x0a, 0x15, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2a, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x49, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xec, 0xd1, 0x24, 0x12, 0x2f, 0x0a, 0x29, 0x41,
	0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0xed, 0xd1, 0x24, 0x12, 0x2d, 0x0a, 0x27,
	0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xee, 0xd1, 0x24, 0x12, 0x2f, 0x0a, 0x29, 0x41,
	0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xef, 0xd1, 0x24, 0x12, 0x2f, 0x0a, 0x29,
	0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xf0, 0xd1, 0x24, 0x12, 0x2e, 0x0a,
	0x28, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xcf, 0xd2, 0x24, 0x2a, 0xd8, 0x01,
	0x0a, 0x20, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2c, 0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x2c,
	0x0a, 0x28, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x61, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd5, 0x03, 0x0a, 0x28,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x30, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x3a,
	0x0a, 0x36, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x03, 0x12, 0x31, 0x0a, 0x2d, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x32, 0x0a, 0x2e, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x12,
	0x32, 0x0a, 0x2e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0x92, 0x01, 0x0a, 0x20, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3c, 0x0a, 0x37, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xf1, 0x2e, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x41, 0x50, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xe0, 0x03, 0x0a, 0x1e, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x3c, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x88, 0xd1, 0x24, 0x12, 0x42, 0x0a, 0x3c, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x89, 0xd1, 0x24, 0x12, 0x41, 0x0a, 0x3b,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45,
	0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x8a, 0xd1, 0x24, 0x12,
	0x40, 0x0a, 0x3a, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x8b, 0xd1,
	0x24, 0x12, 0x3f, 0x0a, 0x39, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x8c,
	0xd1, 0x24, 0x12, 0x40, 0x0a, 0x3a, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0xeb, 0xd1, 0x24, 0x2a, 0xcc, 0x08, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25,
	0x0a, 0x21, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x33, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x98, 0xd4, 0x24,
	0x12, 0x38, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x99, 0xd4, 0x24, 0x12, 0x3a, 0x0a, 0x34, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x10, 0x9a, 0xd4, 0x24, 0x12, 0x38, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x9b, 0xd4, 0x24,
	0x12, 0x38, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x9c, 0xd4, 0x24, 0x12, 0x38, 0x0a, 0x32, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x9d, 0xd4, 0x24, 0x12, 0x36, 0x0a, 0x30, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x9e, 0xd4, 0x24, 0x12, 0x36, 0x0a, 0x30,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x56, 0x45,
	0x10, 0x9f, 0xd4, 0x24, 0x12, 0x39, 0x0a, 0x33, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xa0, 0xd4, 0x24, 0x12,
	0x39, 0x0a, 0x33, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0xa1, 0xd4, 0x24, 0x12, 0x36, 0x0a, 0x30, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xa2,
	0xd4, 0x24, 0x12, 0x38, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xa3, 0xd4, 0x24, 0x12, 0x37, 0x0a, 0x31,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x10, 0xa4, 0xd4, 0x24, 0x12, 0x39, 0x0a, 0x33, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0xa5, 0xd4, 0x24,
	0x12, 0x36, 0x0a, 0x30, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0xa6, 0xd4, 0x24, 0x12, 0x36, 0x0a, 0x30, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49,
	0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xa7, 0xd4, 0x24,
	0x12, 0x38, 0x0a, 0x32, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xa8, 0xd4, 0x24, 0x12, 0x37, 0x0a, 0x31, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0xfb, 0xd4, 0x24, 0x2a, 0x6f, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2a, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0xf0, 0x2e, 0x2a, 0xaa, 0x01, 0x0a, 0x29, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55,
	0x49, 0x44, 0x12, 0x39, 0x0a, 0x35, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x42, 0x0a,
	0x3e, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10,
	0x06, 0x2a, 0xae, 0x05, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x20, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x50, 0x59,
	0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10,
	0x09, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x0c, 0x12, 0x24, 0x0a,
	0x20, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x0f, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x10, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xdc, 0x04, 0x0a, 0x25, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x31,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x50, 0x0a, 0x4a, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0xd0, 0xd2, 0x24, 0x12, 0x55, 0x0a, 0x4f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57,
	0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0xd1, 0xd2, 0x24, 0x12, 0x54, 0x0a, 0x4e,
	0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0xd2,
	0xd2, 0x24, 0x12, 0x56, 0x0a, 0x50, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0xd3, 0xd2, 0x24, 0x12, 0x55, 0x0a, 0x4f, 0x57, 0x45,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xd4, 0xd2,
	0x24, 0x12, 0x4e, 0x0a, 0x48, 0x57, 0x45, 0x42, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xb3, 0xd3,
	0x24, 0x2a, 0x6a, 0x0a, 0x16, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x41,
	0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x41, 0x50,
	0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xf3, 0x2e, 0x2a, 0xb5, 0x02,
	0x0a, 0x21, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45,
	0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa1, 0x04, 0x0a, 0x1e, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a,
	0x25, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x07, 0x12, 0x27,
	0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x0a, 0x12,
	0x28, 0x0a, 0x24, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x73, 0x0a, 0x16, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x55, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2c, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xf6, 0x2e, 0x2a, 0xd3,
	0x01, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45,
	0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0x83, 0x04, 0x0a, 0x19, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x43, 0x41, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4d, 0x45, 0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x42, 0xb1, 0x02, 0x0a, 0x28, 0x63,
	0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62, 0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63,
	0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0xa2, 0x02, 0x05, 0x4f, 0x56, 0x45, 0x41, 0x45, 0xaa, 0x02, 0x22, 0x4f, 0x63, 0x73,
	0x66, 0x2e, 0x56, 0x31, 0x32, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca,
	0x02, 0x22, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x2e, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x32, 0x30,
	0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x26, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31,
	0x32, 0x30, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x3a, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescData = file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDesc
)

func file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDescData
}

var file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 53)
var file_ocsf_v1_2_0_events_application_enums_enums_proto_goTypes = []interface{}{
	(API_ACTIVITY_SEVERITY_ID)(0),                  // 0: ocsf.v1_2_0.events.application.enums.API_ACTIVITY_SEVERITY_ID
	(DATASTORE_ACTIVITY_CATEGORY_UID)(0),           // 1: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_CATEGORY_UID
	(WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID)(0),    // 2: ocsf.v1_2_0.events.application.enums.WEB_RESOURCE_ACCESS_ACTIVITY_STATUS_ID
	(SCAN_ACTIVITY_TYPE_UID)(0),                    // 3: ocsf.v1_2_0.events.application.enums.SCAN_ACTIVITY_TYPE_UID
	(SCAN_ACTIVITY_STATUS_ID)(0),                   // 4: ocsf.v1_2_0.events.application.enums.SCAN_ACTIVITY_STATUS_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID)(0),  // 5: ocsf.v1_2_0.events.application.enums.WEB_RESOURCE_ACCESS_ACTIVITY_ACTIVITY_ID
	(WEB_RESOURCES_ACTIVITY_ACTION_ID)(0),          // 6: ocsf.v1_2_0.events.application.enums.WEB_RESOURCES_ACTIVITY_ACTION_ID
	(APPLICATION_LIFECYCLE_CATEGORY_UID)(0),        // 7: ocsf.v1_2_0.events.application.enums.APPLICATION_LIFECYCLE_CATEGORY_UID
	(API_ACTIVITY_CATEGORY_UID)(0),                 // 8: ocsf.v1_2_0.events.application.enums.API_ACTIVITY_CATEGORY_UID
	(WEB_RESOURCES_ACTIVITY_SEVERITY_ID)(0),        // 9: ocsf.v1_2_0.events.application.enums.WEB_RESOURCES_ACTIVITY_SEVERITY_ID
	(WEB_RESOURCES_ACTIVITY_CATEGORY_UID)(0),       // 10: ocsf.v1_2_0.events.application.enums.WEB_RESOURCES_ACTIVITY_CATEGORY_UID
	(FILE_HOSTING_CATEGORY_UID)(0),                 // 11: ocsf.v1_2_0.events.application.enums.FILE_HOSTING_CATEGORY_UID
	(WEB_RESOURCES_ACTIVITY_ACTIVITY_ID)(0),        // 12: ocsf.v1_2_0.events.application.enums.WEB_RESOURCES_ACTIVITY_ACTIVITY_ID
	(APPLICATION_STATUS_ID)(0),                     // 13: ocsf.v1_2_0.events.application.enums.APPLICATION_STATUS_ID
	(API_ACTIVITY_ACTIVITY_ID)(0),                  // 14: ocsf.v1_2_0.events.application.enums.API_ACTIVITY_ACTIVITY_ID
	(WEB_RESOURCES_ACTIVITY_DISPOSITION_ID)(0),     // 15: ocsf.v1_2_0.events.application.enums.WEB_RESOURCES_ACTIVITY_DISPOSITION_ID
	(SCAN_ACTIVITY_SEVERITY_ID)(0),                 // 16: ocsf.v1_2_0.events.application.enums.SCAN_ACTIVITY_SEVERITY_ID
	(APPLICATION_CATEGORY_UID)(0),                  // 17: ocsf.v1_2_0.events.application.enums.APPLICATION_CATEGORY_UID
	(DATASTORE_ACTIVITY_TYPE_UID)(0),               // 18: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_TYPE_UID
	(SCAN_ACTIVITY_CLASS_UID)(0),                   // 19: ocsf.v1_2_0.events.application.enums.SCAN_ACTIVITY_CLASS_UID
	(SCAN_ACTIVITY_CATEGORY_UID)(0),                // 20: ocsf.v1_2_0.events.application.enums.SCAN_ACTIVITY_CATEGORY_UID
	(APPLICATION_TYPE_UID)(0),                      // 21: ocsf.v1_2_0.events.application.enums.APPLICATION_TYPE_UID
	(FILE_HOSTING_STATUS_ID)(0),                    // 22: ocsf.v1_2_0.events.application.enums.FILE_HOSTING_STATUS_ID
	(DATASTORE_ACTIVITY_DISPOSITION_ID)(0),         // 23: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_DISPOSITION_ID
	(APPLICATION_LIFECYCLE_SEVERITY_ID)(0),         // 24: ocsf.v1_2_0.events.application.enums.APPLICATION_LIFECYCLE_SEVERITY_ID
	(WEB_RESOURCES_ACTIVITY_TYPE_UID)(0),           // 25: ocsf.v1_2_0.events.application.enums.WEB_RESOURCES_ACTIVITY_TYPE_UID
	(DATASTORE_ACTIVITY_ACTION_ID)(0),              // 26: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_ACTION_ID
	(DATASTORE_ACTIVITY_TYPE_ID)(0),                // 27: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_TYPE_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID)(0),    // 28: ocsf.v1_2_0.events.application.enums.WEB_RESOURCE_ACCESS_ACTIVITY_CLASS_UID
	(APPLICATION_SEVERITY_ID)(0),                   // 29: ocsf.v1_2_0.events.application.enums.APPLICATION_SEVERITY_ID
	(DATASTORE_ACTIVITY_CLASS_UID)(0),              // 30: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_CLASS_UID
	(APPLICATION_LIFECYCLE_CLASS_UID)(0),           // 31: ocsf.v1_2_0.events.application.enums.APPLICATION_LIFECYCLE_CLASS_UID
	(FILE_HOSTING_SEVERITY_ID)(0),                  // 32: ocsf.v1_2_0.events.application.enums.FILE_HOSTING_SEVERITY_ID
	(DATASTORE_ACTIVITY_SEVERITY_ID)(0),            // 33: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_SEVERITY_ID
	(DATASTORE_ACTIVITY_STATUS_ID)(0),              // 34: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_STATUS_ID
	(API_ACTIVITY_TYPE_UID)(0),                     // 35: ocsf.v1_2_0.events.application.enums.API_ACTIVITY_TYPE_UID
	(WEB_RESOURCES_ACTIVITY_STATUS_ID)(0),          // 36: ocsf.v1_2_0.events.application.enums.WEB_RESOURCES_ACTIVITY_STATUS_ID
	(APPLICATION_ACTIVITY_ID)(0),                   // 37: ocsf.v1_2_0.events.application.enums.APPLICATION_ACTIVITY_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID)(0),  // 38: ocsf.v1_2_0.events.application.enums.WEB_RESOURCE_ACCESS_ACTIVITY_SEVERITY_ID
	(WEB_RESOURCES_ACTIVITY_CLASS_UID)(0),          // 39: ocsf.v1_2_0.events.application.enums.WEB_RESOURCES_ACTIVITY_CLASS_UID
	(API_ACTIVITY_STATUS_ID)(0),                    // 40: ocsf.v1_2_0.events.application.enums.API_ACTIVITY_STATUS_ID
	(APPLICATION_LIFECYCLE_TYPE_UID)(0),            // 41: ocsf.v1_2_0.events.application.enums.APPLICATION_LIFECYCLE_TYPE_UID
	(FILE_HOSTING_TYPE_UID)(0),                     // 42: ocsf.v1_2_0.events.application.enums.FILE_HOSTING_TYPE_UID
	(APPLICATION_CLASS_UID)(0),                     // 43: ocsf.v1_2_0.events.application.enums.APPLICATION_CLASS_UID
	(WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID)(0), // 44: ocsf.v1_2_0.events.application.enums.WEB_RESOURCE_ACCESS_ACTIVITY_CATEGORY_UID
	(FILE_HOSTING_ACTIVITY_ID)(0),                  // 45: ocsf.v1_2_0.events.application.enums.FILE_HOSTING_ACTIVITY_ID
	(WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID)(0),     // 46: ocsf.v1_2_0.events.application.enums.WEB_RESOURCE_ACCESS_ACTIVITY_TYPE_UID
	(API_ACTIVITY_CLASS_UID)(0),                    // 47: ocsf.v1_2_0.events.application.enums.API_ACTIVITY_CLASS_UID
	(APPLICATION_LIFECYCLE_ACTIVITY_ID)(0),         // 48: ocsf.v1_2_0.events.application.enums.APPLICATION_LIFECYCLE_ACTIVITY_ID
	(DATASTORE_ACTIVITY_ACTIVITY_ID)(0),            // 49: ocsf.v1_2_0.events.application.enums.DATASTORE_ACTIVITY_ACTIVITY_ID
	(FILE_HOSTING_CLASS_UID)(0),                    // 50: ocsf.v1_2_0.events.application.enums.FILE_HOSTING_CLASS_UID
	(APPLICATION_LIFECYCLE_STATUS_ID)(0),           // 51: ocsf.v1_2_0.events.application.enums.APPLICATION_LIFECYCLE_STATUS_ID
	(SCAN_ACTIVITY_ACTIVITY_ID)(0),                 // 52: ocsf.v1_2_0.events.application.enums.SCAN_ACTIVITY_ACTIVITY_ID
}
var file_ocsf_v1_2_0_events_application_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_2_0_events_application_enums_enums_proto_init() }
func file_ocsf_v1_2_0_events_application_enums_enums_proto_init() {
	if File_ocsf_v1_2_0_events_application_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDesc,
			NumEnums:      53,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_2_0_events_application_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_2_0_events_application_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_2_0_events_application_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_2_0_events_application_enums_enums_proto = out.File
	file_ocsf_v1_2_0_events_application_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_2_0_events_application_enums_enums_proto_goTypes = nil
	file_ocsf_v1_2_0_events_application_enums_enums_proto_depIdxs = nil
}
