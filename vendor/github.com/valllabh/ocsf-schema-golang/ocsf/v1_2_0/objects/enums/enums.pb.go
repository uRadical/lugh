// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: ocsf/v1_2_0/objects/enums/enums.proto

package enums

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KERNEL_TYPE_ID int32

const (
	KERNEL_TYPE_ID_KERNEL_TYPE_ID_UNKNOWN      KERNEL_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	KERNEL_TYPE_ID_KERNEL_TYPE_ID_SHARED_MUTEX KERNEL_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	KERNEL_TYPE_ID_KERNEL_TYPE_ID_SYSTEM_CALL  KERNEL_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	KERNEL_TYPE_ID_KERNEL_TYPE_ID_OTHER        KERNEL_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for KERNEL_TYPE_ID.
var (
	KERNEL_TYPE_ID_name = map[int32]string{
		0:  "KERNEL_TYPE_ID_UNKNOWN",
		1:  "KERNEL_TYPE_ID_SHARED_MUTEX",
		2:  "KERNEL_TYPE_ID_SYSTEM_CALL",
		99: "KERNEL_TYPE_ID_OTHER",
	}
	KERNEL_TYPE_ID_value = map[string]int32{
		"KERNEL_TYPE_ID_UNKNOWN":      0,
		"KERNEL_TYPE_ID_SHARED_MUTEX": 1,
		"KERNEL_TYPE_ID_SYSTEM_CALL":  2,
		"KERNEL_TYPE_ID_OTHER":        99,
	}
)

func (x KERNEL_TYPE_ID) Enum() *KERNEL_TYPE_ID {
	p := new(KERNEL_TYPE_ID)
	*p = x
	return p
}

func (x KERNEL_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KERNEL_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[0].Descriptor()
}

func (KERNEL_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[0]
}

func (x KERNEL_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KERNEL_TYPE_ID.Descriptor instead.
func (KERNEL_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{0}
}

type USER_TYPE_ID int32

const (
	USER_TYPE_ID_USER_TYPE_ID_UNKNOWN USER_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	USER_TYPE_ID_USER_TYPE_ID_USER    USER_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	USER_TYPE_ID_USER_TYPE_ID_ADMIN   USER_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	USER_TYPE_ID_USER_TYPE_ID_SYSTEM  USER_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	USER_TYPE_ID_USER_TYPE_ID_OTHER   USER_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for USER_TYPE_ID.
var (
	USER_TYPE_ID_name = map[int32]string{
		0:  "USER_TYPE_ID_UNKNOWN",
		1:  "USER_TYPE_ID_USER",
		2:  "USER_TYPE_ID_ADMIN",
		3:  "USER_TYPE_ID_SYSTEM",
		99: "USER_TYPE_ID_OTHER",
	}
	USER_TYPE_ID_value = map[string]int32{
		"USER_TYPE_ID_UNKNOWN": 0,
		"USER_TYPE_ID_USER":    1,
		"USER_TYPE_ID_ADMIN":   2,
		"USER_TYPE_ID_SYSTEM":  3,
		"USER_TYPE_ID_OTHER":   99,
	}
)

func (x USER_TYPE_ID) Enum() *USER_TYPE_ID {
	p := new(USER_TYPE_ID)
	*p = x
	return p
}

func (x USER_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[1].Descriptor()
}

func (USER_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[1]
}

func (x USER_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_TYPE_ID.Descriptor instead.
func (USER_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{1}
}

type ACCOUNT_TYPE_ID int32

const (
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_UNKNOWN          ACCOUNT_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_LDAP_ACCOUNT     ACCOUNT_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_WINDOWS_ACCOUNT  ACCOUNT_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_AWS_IAM_USER     ACCOUNT_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_AWS_IAM_ROLE     ACCOUNT_TYPE_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_GCP_ACCOUNT      ACCOUNT_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_AZURE_AD_ACCOUNT ACCOUNT_TYPE_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_MAC_OS_ACCOUNT   ACCOUNT_TYPE_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_APPLE_ACCOUNT    ACCOUNT_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_LINUX_ACCOUNT    ACCOUNT_TYPE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_AWS_ACCOUNT      ACCOUNT_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	ACCOUNT_TYPE_ID_ACCOUNT_TYPE_ID_OTHER            ACCOUNT_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ACCOUNT_TYPE_ID.
var (
	ACCOUNT_TYPE_ID_name = map[int32]string{
		0:  "ACCOUNT_TYPE_ID_UNKNOWN",
		1:  "ACCOUNT_TYPE_ID_LDAP_ACCOUNT",
		2:  "ACCOUNT_TYPE_ID_WINDOWS_ACCOUNT",
		3:  "ACCOUNT_TYPE_ID_AWS_IAM_USER",
		4:  "ACCOUNT_TYPE_ID_AWS_IAM_ROLE",
		5:  "ACCOUNT_TYPE_ID_GCP_ACCOUNT",
		6:  "ACCOUNT_TYPE_ID_AZURE_AD_ACCOUNT",
		7:  "ACCOUNT_TYPE_ID_MAC_OS_ACCOUNT",
		8:  "ACCOUNT_TYPE_ID_APPLE_ACCOUNT",
		9:  "ACCOUNT_TYPE_ID_LINUX_ACCOUNT",
		10: "ACCOUNT_TYPE_ID_AWS_ACCOUNT",
		99: "ACCOUNT_TYPE_ID_OTHER",
	}
	ACCOUNT_TYPE_ID_value = map[string]int32{
		"ACCOUNT_TYPE_ID_UNKNOWN":          0,
		"ACCOUNT_TYPE_ID_LDAP_ACCOUNT":     1,
		"ACCOUNT_TYPE_ID_WINDOWS_ACCOUNT":  2,
		"ACCOUNT_TYPE_ID_AWS_IAM_USER":     3,
		"ACCOUNT_TYPE_ID_AWS_IAM_ROLE":     4,
		"ACCOUNT_TYPE_ID_GCP_ACCOUNT":      5,
		"ACCOUNT_TYPE_ID_AZURE_AD_ACCOUNT": 6,
		"ACCOUNT_TYPE_ID_MAC_OS_ACCOUNT":   7,
		"ACCOUNT_TYPE_ID_APPLE_ACCOUNT":    8,
		"ACCOUNT_TYPE_ID_LINUX_ACCOUNT":    9,
		"ACCOUNT_TYPE_ID_AWS_ACCOUNT":      10,
		"ACCOUNT_TYPE_ID_OTHER":            99,
	}
)

func (x ACCOUNT_TYPE_ID) Enum() *ACCOUNT_TYPE_ID {
	p := new(ACCOUNT_TYPE_ID)
	*p = x
	return p
}

func (x ACCOUNT_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[2].Descriptor()
}

func (ACCOUNT_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[2]
}

func (x ACCOUNT_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_TYPE_ID.Descriptor instead.
func (ACCOUNT_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{2}
}

type ANALYTIC_TYPE_ID int32

const (
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_UNKNOWN             ANALYTIC_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_RULE                ANALYTIC_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_BEHAVIORAL          ANALYTIC_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_STATISTICAL         ANALYTIC_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_FINGERPRINTING      ANALYTIC_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_TAGGING             ANALYTIC_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_KEYWORD_MATCH       ANALYTIC_TYPE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_REGULAR_EXPRESSIONS ANALYTIC_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_EXACT_DATA_MATCH    ANALYTIC_TYPE_ID = 9  // EnumValue: 9; Type: OCSF_VALUE;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_PARTIAL_DATA_MATCH  ANALYTIC_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_INDEXED_DATA_MATCH  ANALYTIC_TYPE_ID = 11 // EnumValue: 11; Type: OCSF_VALUE;
	ANALYTIC_TYPE_ID_ANALYTIC_TYPE_ID_OTHER               ANALYTIC_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for ANALYTIC_TYPE_ID.
var (
	ANALYTIC_TYPE_ID_name = map[int32]string{
		0:  "ANALYTIC_TYPE_ID_UNKNOWN",
		1:  "ANALYTIC_TYPE_ID_RULE",
		2:  "ANALYTIC_TYPE_ID_BEHAVIORAL",
		3:  "ANALYTIC_TYPE_ID_STATISTICAL",
		5:  "ANALYTIC_TYPE_ID_FINGERPRINTING",
		6:  "ANALYTIC_TYPE_ID_TAGGING",
		7:  "ANALYTIC_TYPE_ID_KEYWORD_MATCH",
		8:  "ANALYTIC_TYPE_ID_REGULAR_EXPRESSIONS",
		9:  "ANALYTIC_TYPE_ID_EXACT_DATA_MATCH",
		10: "ANALYTIC_TYPE_ID_PARTIAL_DATA_MATCH",
		11: "ANALYTIC_TYPE_ID_INDEXED_DATA_MATCH",
		99: "ANALYTIC_TYPE_ID_OTHER",
	}
	ANALYTIC_TYPE_ID_value = map[string]int32{
		"ANALYTIC_TYPE_ID_UNKNOWN":             0,
		"ANALYTIC_TYPE_ID_RULE":                1,
		"ANALYTIC_TYPE_ID_BEHAVIORAL":          2,
		"ANALYTIC_TYPE_ID_STATISTICAL":         3,
		"ANALYTIC_TYPE_ID_FINGERPRINTING":      5,
		"ANALYTIC_TYPE_ID_TAGGING":             6,
		"ANALYTIC_TYPE_ID_KEYWORD_MATCH":       7,
		"ANALYTIC_TYPE_ID_REGULAR_EXPRESSIONS": 8,
		"ANALYTIC_TYPE_ID_EXACT_DATA_MATCH":    9,
		"ANALYTIC_TYPE_ID_PARTIAL_DATA_MATCH":  10,
		"ANALYTIC_TYPE_ID_INDEXED_DATA_MATCH":  11,
		"ANALYTIC_TYPE_ID_OTHER":               99,
	}
)

func (x ANALYTIC_TYPE_ID) Enum() *ANALYTIC_TYPE_ID {
	p := new(ANALYTIC_TYPE_ID)
	*p = x
	return p
}

func (x ANALYTIC_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ANALYTIC_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[3].Descriptor()
}

func (ANALYTIC_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[3]
}

func (x ANALYTIC_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ANALYTIC_TYPE_ID.Descriptor instead.
func (ANALYTIC_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{3}
}

type DEVICE_RISK_LEVEL_ID int32

const (
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_INFO     DEVICE_RISK_LEVEL_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_LOW      DEVICE_RISK_LEVEL_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_MEDIUM   DEVICE_RISK_LEVEL_ID = 2 // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_HIGH     DEVICE_RISK_LEVEL_ID = 3 // Type: OCSF_VALUE; EnumValue: 3;
	DEVICE_RISK_LEVEL_ID_DEVICE_RISK_LEVEL_ID_CRITICAL DEVICE_RISK_LEVEL_ID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for DEVICE_RISK_LEVEL_ID.
var (
	DEVICE_RISK_LEVEL_ID_name = map[int32]string{
		0: "DEVICE_RISK_LEVEL_ID_INFO",
		1: "DEVICE_RISK_LEVEL_ID_LOW",
		2: "DEVICE_RISK_LEVEL_ID_MEDIUM",
		3: "DEVICE_RISK_LEVEL_ID_HIGH",
		4: "DEVICE_RISK_LEVEL_ID_CRITICAL",
	}
	DEVICE_RISK_LEVEL_ID_value = map[string]int32{
		"DEVICE_RISK_LEVEL_ID_INFO":     0,
		"DEVICE_RISK_LEVEL_ID_LOW":      1,
		"DEVICE_RISK_LEVEL_ID_MEDIUM":   2,
		"DEVICE_RISK_LEVEL_ID_HIGH":     3,
		"DEVICE_RISK_LEVEL_ID_CRITICAL": 4,
	}
)

func (x DEVICE_RISK_LEVEL_ID) Enum() *DEVICE_RISK_LEVEL_ID {
	p := new(DEVICE_RISK_LEVEL_ID)
	*p = x
	return p
}

func (x DEVICE_RISK_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_RISK_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[4].Descriptor()
}

func (DEVICE_RISK_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[4]
}

func (x DEVICE_RISK_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_RISK_LEVEL_ID.Descriptor instead.
func (DEVICE_RISK_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{4}
}

type SECURITY_STATE_STATE_ID int32

const (
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_UNKNOWN                        SECURITY_STATE_STATE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_MISSING_OR_OUTDATED_CONTENT    SECURITY_STATE_STATE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_POLICY_MISMATCH                SECURITY_STATE_STATE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_IN_NETWORK_QUARANTINE          SECURITY_STATE_STATE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_PROTECTION_OFF                 SECURITY_STATE_STATE_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_PROTECTION_MALFUNCTION         SECURITY_STATE_STATE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_PROTECTION_NOT_LICENSED        SECURITY_STATE_STATE_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_UNREMEDIATED_THREAT            SECURITY_STATE_STATE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_SUSPICIOUS_REPUTATION          SECURITY_STATE_STATE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_REBOOT_PENDING                 SECURITY_STATE_STATE_ID = 9  // EnumValue: 9; Type: OCSF_VALUE;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_CONTENT_IS_LOCKED              SECURITY_STATE_STATE_ID = 10 // EnumValue: 10; Type: OCSF_VALUE;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_NOT_INSTALLED                  SECURITY_STATE_STATE_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_WRITABLE_SYSTEM_PARTITION      SECURITY_STATE_STATE_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_SAFETY_NET_FAILURE             SECURITY_STATE_STATE_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_FAILED_BOOT_VERIFY             SECURITY_STATE_STATE_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_MODIFIED_EXECUTION_ENVIRONMENT SECURITY_STATE_STATE_ID = 15 // Type: OCSF_VALUE; EnumValue: 15;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_SE_LINUX_DISABLED              SECURITY_STATE_STATE_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_ELEVATED_PRIVILEGE_SHELL       SECURITY_STATE_STATE_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_I_OS_FILE_SYSTEM_ALTERED       SECURITY_STATE_STATE_ID = 18 // Type: OCSF_VALUE; EnumValue: 18;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_OPEN_REMOTE_ACCESS             SECURITY_STATE_STATE_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_OTA_UPDATES_DISABLED           SECURITY_STATE_STATE_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_ROOTED                         SECURITY_STATE_STATE_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_ANDROID_PARTITION_MODIFIED     SECURITY_STATE_STATE_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_COMPLIANCE_FAILURE             SECURITY_STATE_STATE_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	SECURITY_STATE_STATE_ID_SECURITY_STATE_STATE_ID_OTHER                          SECURITY_STATE_STATE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for SECURITY_STATE_STATE_ID.
var (
	SECURITY_STATE_STATE_ID_name = map[int32]string{
		0:  "SECURITY_STATE_STATE_ID_UNKNOWN",
		1:  "SECURITY_STATE_STATE_ID_MISSING_OR_OUTDATED_CONTENT",
		2:  "SECURITY_STATE_STATE_ID_POLICY_MISMATCH",
		3:  "SECURITY_STATE_STATE_ID_IN_NETWORK_QUARANTINE",
		4:  "SECURITY_STATE_STATE_ID_PROTECTION_OFF",
		5:  "SECURITY_STATE_STATE_ID_PROTECTION_MALFUNCTION",
		6:  "SECURITY_STATE_STATE_ID_PROTECTION_NOT_LICENSED",
		7:  "SECURITY_STATE_STATE_ID_UNREMEDIATED_THREAT",
		8:  "SECURITY_STATE_STATE_ID_SUSPICIOUS_REPUTATION",
		9:  "SECURITY_STATE_STATE_ID_REBOOT_PENDING",
		10: "SECURITY_STATE_STATE_ID_CONTENT_IS_LOCKED",
		11: "SECURITY_STATE_STATE_ID_NOT_INSTALLED",
		12: "SECURITY_STATE_STATE_ID_WRITABLE_SYSTEM_PARTITION",
		13: "SECURITY_STATE_STATE_ID_SAFETY_NET_FAILURE",
		14: "SECURITY_STATE_STATE_ID_FAILED_BOOT_VERIFY",
		15: "SECURITY_STATE_STATE_ID_MODIFIED_EXECUTION_ENVIRONMENT",
		16: "SECURITY_STATE_STATE_ID_SE_LINUX_DISABLED",
		17: "SECURITY_STATE_STATE_ID_ELEVATED_PRIVILEGE_SHELL",
		18: "SECURITY_STATE_STATE_ID_I_OS_FILE_SYSTEM_ALTERED",
		19: "SECURITY_STATE_STATE_ID_OPEN_REMOTE_ACCESS",
		20: "SECURITY_STATE_STATE_ID_OTA_UPDATES_DISABLED",
		21: "SECURITY_STATE_STATE_ID_ROOTED",
		22: "SECURITY_STATE_STATE_ID_ANDROID_PARTITION_MODIFIED",
		23: "SECURITY_STATE_STATE_ID_COMPLIANCE_FAILURE",
		99: "SECURITY_STATE_STATE_ID_OTHER",
	}
	SECURITY_STATE_STATE_ID_value = map[string]int32{
		"SECURITY_STATE_STATE_ID_UNKNOWN":                        0,
		"SECURITY_STATE_STATE_ID_MISSING_OR_OUTDATED_CONTENT":    1,
		"SECURITY_STATE_STATE_ID_POLICY_MISMATCH":                2,
		"SECURITY_STATE_STATE_ID_IN_NETWORK_QUARANTINE":          3,
		"SECURITY_STATE_STATE_ID_PROTECTION_OFF":                 4,
		"SECURITY_STATE_STATE_ID_PROTECTION_MALFUNCTION":         5,
		"SECURITY_STATE_STATE_ID_PROTECTION_NOT_LICENSED":        6,
		"SECURITY_STATE_STATE_ID_UNREMEDIATED_THREAT":            7,
		"SECURITY_STATE_STATE_ID_SUSPICIOUS_REPUTATION":          8,
		"SECURITY_STATE_STATE_ID_REBOOT_PENDING":                 9,
		"SECURITY_STATE_STATE_ID_CONTENT_IS_LOCKED":              10,
		"SECURITY_STATE_STATE_ID_NOT_INSTALLED":                  11,
		"SECURITY_STATE_STATE_ID_WRITABLE_SYSTEM_PARTITION":      12,
		"SECURITY_STATE_STATE_ID_SAFETY_NET_FAILURE":             13,
		"SECURITY_STATE_STATE_ID_FAILED_BOOT_VERIFY":             14,
		"SECURITY_STATE_STATE_ID_MODIFIED_EXECUTION_ENVIRONMENT": 15,
		"SECURITY_STATE_STATE_ID_SE_LINUX_DISABLED":              16,
		"SECURITY_STATE_STATE_ID_ELEVATED_PRIVILEGE_SHELL":       17,
		"SECURITY_STATE_STATE_ID_I_OS_FILE_SYSTEM_ALTERED":       18,
		"SECURITY_STATE_STATE_ID_OPEN_REMOTE_ACCESS":             19,
		"SECURITY_STATE_STATE_ID_OTA_UPDATES_DISABLED":           20,
		"SECURITY_STATE_STATE_ID_ROOTED":                         21,
		"SECURITY_STATE_STATE_ID_ANDROID_PARTITION_MODIFIED":     22,
		"SECURITY_STATE_STATE_ID_COMPLIANCE_FAILURE":             23,
		"SECURITY_STATE_STATE_ID_OTHER":                          99,
	}
)

func (x SECURITY_STATE_STATE_ID) Enum() *SECURITY_STATE_STATE_ID {
	p := new(SECURITY_STATE_STATE_ID)
	*p = x
	return p
}

func (x SECURITY_STATE_STATE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SECURITY_STATE_STATE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[5].Descriptor()
}

func (SECURITY_STATE_STATE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[5]
}

func (x SECURITY_STATE_STATE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SECURITY_STATE_STATE_ID.Descriptor instead.
func (SECURITY_STATE_STATE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{5}
}

type REG_VALUE_TYPE_ID int32

const (
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_UNKNOWN                 REG_VALUE_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_BINARY              REG_VALUE_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_DWORD               REG_VALUE_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_DWORD_BIG_ENDIAN    REG_VALUE_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_EXPAND_SZ           REG_VALUE_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_LINK                REG_VALUE_TYPE_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_MULTI_SZ            REG_VALUE_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_NONE                REG_VALUE_TYPE_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_QWORD               REG_VALUE_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_QWORD_LITTLE_ENDIAN REG_VALUE_TYPE_ID = 9  // EnumValue: 9; Type: OCSF_VALUE;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_REG_SZ                  REG_VALUE_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	REG_VALUE_TYPE_ID_REG_VALUE_TYPE_ID_OTHER                   REG_VALUE_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REG_VALUE_TYPE_ID.
var (
	REG_VALUE_TYPE_ID_name = map[int32]string{
		0:  "REG_VALUE_TYPE_ID_UNKNOWN",
		1:  "REG_VALUE_TYPE_ID_REG_BINARY",
		2:  "REG_VALUE_TYPE_ID_REG_DWORD",
		3:  "REG_VALUE_TYPE_ID_REG_DWORD_BIG_ENDIAN",
		4:  "REG_VALUE_TYPE_ID_REG_EXPAND_SZ",
		5:  "REG_VALUE_TYPE_ID_REG_LINK",
		6:  "REG_VALUE_TYPE_ID_REG_MULTI_SZ",
		7:  "REG_VALUE_TYPE_ID_REG_NONE",
		8:  "REG_VALUE_TYPE_ID_REG_QWORD",
		9:  "REG_VALUE_TYPE_ID_REG_QWORD_LITTLE_ENDIAN",
		10: "REG_VALUE_TYPE_ID_REG_SZ",
		99: "REG_VALUE_TYPE_ID_OTHER",
	}
	REG_VALUE_TYPE_ID_value = map[string]int32{
		"REG_VALUE_TYPE_ID_UNKNOWN":                 0,
		"REG_VALUE_TYPE_ID_REG_BINARY":              1,
		"REG_VALUE_TYPE_ID_REG_DWORD":               2,
		"REG_VALUE_TYPE_ID_REG_DWORD_BIG_ENDIAN":    3,
		"REG_VALUE_TYPE_ID_REG_EXPAND_SZ":           4,
		"REG_VALUE_TYPE_ID_REG_LINK":                5,
		"REG_VALUE_TYPE_ID_REG_MULTI_SZ":            6,
		"REG_VALUE_TYPE_ID_REG_NONE":                7,
		"REG_VALUE_TYPE_ID_REG_QWORD":               8,
		"REG_VALUE_TYPE_ID_REG_QWORD_LITTLE_ENDIAN": 9,
		"REG_VALUE_TYPE_ID_REG_SZ":                  10,
		"REG_VALUE_TYPE_ID_OTHER":                   99,
	}
)

func (x REG_VALUE_TYPE_ID) Enum() *REG_VALUE_TYPE_ID {
	p := new(REG_VALUE_TYPE_ID)
	*p = x
	return p
}

func (x REG_VALUE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REG_VALUE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[6].Descriptor()
}

func (REG_VALUE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[6]
}

func (x REG_VALUE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REG_VALUE_TYPE_ID.Descriptor instead.
func (REG_VALUE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{6}
}

type USER_RISK_LEVEL_ID int32

const (
	USER_RISK_LEVEL_ID_USER_RISK_LEVEL_ID_INFO     USER_RISK_LEVEL_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	USER_RISK_LEVEL_ID_USER_RISK_LEVEL_ID_LOW      USER_RISK_LEVEL_ID = 1 // EnumValue: 1; Type: OCSF_VALUE;
	USER_RISK_LEVEL_ID_USER_RISK_LEVEL_ID_MEDIUM   USER_RISK_LEVEL_ID = 2 // Type: OCSF_VALUE; EnumValue: 2;
	USER_RISK_LEVEL_ID_USER_RISK_LEVEL_ID_HIGH     USER_RISK_LEVEL_ID = 3 // Type: OCSF_VALUE; EnumValue: 3;
	USER_RISK_LEVEL_ID_USER_RISK_LEVEL_ID_CRITICAL USER_RISK_LEVEL_ID = 4 // Type: OCSF_VALUE; EnumValue: 4;
)

// Enum value maps for USER_RISK_LEVEL_ID.
var (
	USER_RISK_LEVEL_ID_name = map[int32]string{
		0: "USER_RISK_LEVEL_ID_INFO",
		1: "USER_RISK_LEVEL_ID_LOW",
		2: "USER_RISK_LEVEL_ID_MEDIUM",
		3: "USER_RISK_LEVEL_ID_HIGH",
		4: "USER_RISK_LEVEL_ID_CRITICAL",
	}
	USER_RISK_LEVEL_ID_value = map[string]int32{
		"USER_RISK_LEVEL_ID_INFO":     0,
		"USER_RISK_LEVEL_ID_LOW":      1,
		"USER_RISK_LEVEL_ID_MEDIUM":   2,
		"USER_RISK_LEVEL_ID_HIGH":     3,
		"USER_RISK_LEVEL_ID_CRITICAL": 4,
	}
)

func (x USER_RISK_LEVEL_ID) Enum() *USER_RISK_LEVEL_ID {
	p := new(USER_RISK_LEVEL_ID)
	*p = x
	return p
}

func (x USER_RISK_LEVEL_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USER_RISK_LEVEL_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[7].Descriptor()
}

func (USER_RISK_LEVEL_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[7]
}

func (x USER_RISK_LEVEL_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USER_RISK_LEVEL_ID.Descriptor instead.
func (USER_RISK_LEVEL_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{7}
}

type URL_CATEGORY_IDS int32

const (
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_UNKNOWN                         URL_CATEGORY_IDS = 0   // Type: OCSF_VALUE; EnumValue: 0;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ADULT_MATURE_CONTENT            URL_CATEGORY_IDS = 1   // Type: OCSF_VALUE; EnumValue: 1;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PORNOGRAPHY                     URL_CATEGORY_IDS = 3   // Type: OCSF_VALUE; EnumValue: 3;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SEX_EDUCATION                   URL_CATEGORY_IDS = 4   // EnumValue: 4; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_INTIMATE_APPAREL_SWIMSUIT       URL_CATEGORY_IDS = 5   // EnumValue: 5; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_NUDITY                          URL_CATEGORY_IDS = 6   // Type: OCSF_VALUE; EnumValue: 6;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_EXTREME                         URL_CATEGORY_IDS = 7   // Type: OCSF_VALUE; EnumValue: 7;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SCAM_QUESTIONABLE_ILLEGAL       URL_CATEGORY_IDS = 9   // Type: OCSF_VALUE; EnumValue: 9;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_GAMBLING                        URL_CATEGORY_IDS = 11  // Type: OCSF_VALUE; EnumValue: 11;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_VIOLENCE_HATE_RACISM            URL_CATEGORY_IDS = 14  // Type: OCSF_VALUE; EnumValue: 14;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_WEAPONS                         URL_CATEGORY_IDS = 15  // Type: OCSF_VALUE; EnumValue: 15;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ABORTION                        URL_CATEGORY_IDS = 16  // Type: OCSF_VALUE; EnumValue: 16;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_HACKING                         URL_CATEGORY_IDS = 17  // Type: OCSF_VALUE; EnumValue: 17;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PHISHING                        URL_CATEGORY_IDS = 18  // Type: OCSF_VALUE; EnumValue: 18;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ENTERTAINMENT                   URL_CATEGORY_IDS = 20  // Type: OCSF_VALUE; EnumValue: 20;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_BUSINESS_ECONOMY                URL_CATEGORY_IDS = 21  // Type: OCSF_VALUE; EnumValue: 21;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ALTERNATIVE_SPIRITUALITY_BELIEF URL_CATEGORY_IDS = 22  // Type: OCSF_VALUE; EnumValue: 22;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ALCOHOL                         URL_CATEGORY_IDS = 23  // Type: OCSF_VALUE; EnumValue: 23;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TOBACCO                         URL_CATEGORY_IDS = 24  // EnumValue: 24; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CONTROLLED_SUBSTANCES           URL_CATEGORY_IDS = 25  // Type: OCSF_VALUE; EnumValue: 25;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CHILD_PORNOGRAPHY               URL_CATEGORY_IDS = 26  // Type: OCSF_VALUE; EnumValue: 26;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_EDUCATION                       URL_CATEGORY_IDS = 27  // Type: OCSF_VALUE; EnumValue: 27;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CHARITABLE_ORGANIZATIONS        URL_CATEGORY_IDS = 29  // Type: OCSF_VALUE; EnumValue: 29;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ART_CULTURE                     URL_CATEGORY_IDS = 30  // Type: OCSF_VALUE; EnumValue: 30;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_FINANCIAL_SERVICES              URL_CATEGORY_IDS = 31  // Type: OCSF_VALUE; EnumValue: 31;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_BROKERAGE_TRADING               URL_CATEGORY_IDS = 32  // Type: OCSF_VALUE; EnumValue: 32;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_GAMES                           URL_CATEGORY_IDS = 33  // EnumValue: 33; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_GOVERNMENT_LEGAL                URL_CATEGORY_IDS = 34  // Type: OCSF_VALUE; EnumValue: 34;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MILITARY                        URL_CATEGORY_IDS = 35  // EnumValue: 35; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_POLITICAL_SOCIAL_ADVOCACY       URL_CATEGORY_IDS = 36  // Type: OCSF_VALUE; EnumValue: 36;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_HEALTH                          URL_CATEGORY_IDS = 37  // Type: OCSF_VALUE; EnumValue: 37;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TECHNOLOGY_INTERNET             URL_CATEGORY_IDS = 38  // Type: OCSF_VALUE; EnumValue: 38;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SEARCH_ENGINES_PORTALS          URL_CATEGORY_IDS = 40  // Type: OCSF_VALUE; EnumValue: 40;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MALICIOUS_SOURCES_MALNETS       URL_CATEGORY_IDS = 43  // Type: OCSF_VALUE; EnumValue: 43;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MALICIOUS_OUTBOUND_DATA_BOTNETS URL_CATEGORY_IDS = 44  // Type: OCSF_VALUE; EnumValue: 44;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_JOB_SEARCH_CAREERS              URL_CATEGORY_IDS = 45  // EnumValue: 45; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_NEWS_MEDIA                      URL_CATEGORY_IDS = 46  // Type: OCSF_VALUE; EnumValue: 46;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PERSONALS_DATING                URL_CATEGORY_IDS = 47  // Type: OCSF_VALUE; EnumValue: 47;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_REFERENCE                       URL_CATEGORY_IDS = 49  // Type: OCSF_VALUE; EnumValue: 49;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MIXED_CONTENT_POTENTIALLY_ADULT URL_CATEGORY_IDS = 50  // Type: OCSF_VALUE; EnumValue: 50;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CHAT_IM_SMS                     URL_CATEGORY_IDS = 51  // Type: OCSF_VALUE; EnumValue: 51;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_EMAIL                           URL_CATEGORY_IDS = 52  // Type: OCSF_VALUE; EnumValue: 52;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_NEWSGROUPS_FORUMS               URL_CATEGORY_IDS = 53  // Type: OCSF_VALUE; EnumValue: 53;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_RELIGION                        URL_CATEGORY_IDS = 54  // Type: OCSF_VALUE; EnumValue: 54;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SOCIAL_NETWORKING               URL_CATEGORY_IDS = 55  // Type: OCSF_VALUE; EnumValue: 55;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_FILE_STORAGE_SHARING            URL_CATEGORY_IDS = 56  // EnumValue: 56; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_REMOTE_ACCESS_TOOLS             URL_CATEGORY_IDS = 57  // Type: OCSF_VALUE; EnumValue: 57;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SHOPPING                        URL_CATEGORY_IDS = 58  // EnumValue: 58; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_AUCTIONS                        URL_CATEGORY_IDS = 59  // Type: OCSF_VALUE; EnumValue: 59;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_REAL_ESTATE                     URL_CATEGORY_IDS = 60  // Type: OCSF_VALUE; EnumValue: 60;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SOCIETY_DAILY_LIVING            URL_CATEGORY_IDS = 61  // Type: OCSF_VALUE; EnumValue: 61;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PERSONAL_SITES                  URL_CATEGORY_IDS = 63  // Type: OCSF_VALUE; EnumValue: 63;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_RESTAURANTS_DINING_FOOD         URL_CATEGORY_IDS = 64  // Type: OCSF_VALUE; EnumValue: 64;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SPORTS_RECREATION               URL_CATEGORY_IDS = 65  // EnumValue: 65; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TRAVEL                          URL_CATEGORY_IDS = 66  // Type: OCSF_VALUE; EnumValue: 66;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_VEHICLES                        URL_CATEGORY_IDS = 67  // Type: OCSF_VALUE; EnumValue: 67;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_HUMOR_JOKES                     URL_CATEGORY_IDS = 68  // EnumValue: 68; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SOFTWARE_DOWNLOADS              URL_CATEGORY_IDS = 71  // Type: OCSF_VALUE; EnumValue: 71;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PEER_TO_PEER_P_2_P              URL_CATEGORY_IDS = 83  // Type: OCSF_VALUE; EnumValue: 83;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_AUDIO_VIDEO_CLIPS               URL_CATEGORY_IDS = 84  // Type: OCSF_VALUE; EnumValue: 84;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_OFFICE_BUSINESS_APPLICATIONS    URL_CATEGORY_IDS = 85  // Type: OCSF_VALUE; EnumValue: 85;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PROXY_AVOIDANCE                 URL_CATEGORY_IDS = 86  // Type: OCSF_VALUE; EnumValue: 86;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_FOR_KIDS                        URL_CATEGORY_IDS = 87  // Type: OCSF_VALUE; EnumValue: 87;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_WEB_ADS_ANALYTICS               URL_CATEGORY_IDS = 88  // Type: OCSF_VALUE; EnumValue: 88;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_WEB_HOSTING                     URL_CATEGORY_IDS = 89  // Type: OCSF_VALUE; EnumValue: 89;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_UNCATEGORIZED                   URL_CATEGORY_IDS = 90  // Type: OCSF_VALUE; EnumValue: 90;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SUSPICIOUS                      URL_CATEGORY_IDS = 92  // Type: OCSF_VALUE; EnumValue: 92;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SEXUAL_EXPRESSION               URL_CATEGORY_IDS = 93  // EnumValue: 93; Type: OCSF_VALUE;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TRANSLATION                     URL_CATEGORY_IDS = 95  // Type: OCSF_VALUE; EnumValue: 95;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_NON_VIEWABLE_INFRASTRUCTURE     URL_CATEGORY_IDS = 96  // Type: OCSF_VALUE; EnumValue: 96;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_CONTENT_SERVERS                 URL_CATEGORY_IDS = 97  // Type: OCSF_VALUE; EnumValue: 97;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PLACEHOLDERS                    URL_CATEGORY_IDS = 98  // Type: OCSF_VALUE; EnumValue: 98;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_OTHER                           URL_CATEGORY_IDS = 99  // Type: OCSF_VALUE; EnumValue: 99;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_SPAM                            URL_CATEGORY_IDS = 101 // Type: OCSF_VALUE; EnumValue: 101;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_POTENTIALLY_UNWANTED_SOFTWARE   URL_CATEGORY_IDS = 102 // Type: OCSF_VALUE; EnumValue: 102;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_DYNAMIC_DNS_HOST                URL_CATEGORY_IDS = 103 // Type: OCSF_VALUE; EnumValue: 103;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_E_CARD_INVITATIONS              URL_CATEGORY_IDS = 106 // Type: OCSF_VALUE; EnumValue: 106;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_INFORMATIONAL                   URL_CATEGORY_IDS = 107 // Type: OCSF_VALUE; EnumValue: 107;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_COMPUTER_INFORMATION_SECURITY   URL_CATEGORY_IDS = 108 // Type: OCSF_VALUE; EnumValue: 108;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_INTERNET_CONNECTED_DEVICES      URL_CATEGORY_IDS = 109 // Type: OCSF_VALUE; EnumValue: 109;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_INTERNET_TELEPHONY              URL_CATEGORY_IDS = 110 // Type: OCSF_VALUE; EnumValue: 110;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_ONLINE_MEETINGS                 URL_CATEGORY_IDS = 111 // Type: OCSF_VALUE; EnumValue: 111;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MEDIA_SHARING                   URL_CATEGORY_IDS = 112 // Type: OCSF_VALUE; EnumValue: 112;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_RADIO_AUDIO_STREAMS             URL_CATEGORY_IDS = 113 // Type: OCSF_VALUE; EnumValue: 113;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_TV_VIDEO_STREAMS                URL_CATEGORY_IDS = 114 // Type: OCSF_VALUE; EnumValue: 114;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_PIRACY_COPYRIGHT_CONCERNS       URL_CATEGORY_IDS = 118 // Type: OCSF_VALUE; EnumValue: 118;
	URL_CATEGORY_IDS_URL_CATEGORY_IDS_MARIJUANA                       URL_CATEGORY_IDS = 121 // Type: OCSF_VALUE; EnumValue: 121;
)

// Enum value maps for URL_CATEGORY_IDS.
var (
	URL_CATEGORY_IDS_name = map[int32]string{
		0:   "URL_CATEGORY_IDS_UNKNOWN",
		1:   "URL_CATEGORY_IDS_ADULT_MATURE_CONTENT",
		3:   "URL_CATEGORY_IDS_PORNOGRAPHY",
		4:   "URL_CATEGORY_IDS_SEX_EDUCATION",
		5:   "URL_CATEGORY_IDS_INTIMATE_APPAREL_SWIMSUIT",
		6:   "URL_CATEGORY_IDS_NUDITY",
		7:   "URL_CATEGORY_IDS_EXTREME",
		9:   "URL_CATEGORY_IDS_SCAM_QUESTIONABLE_ILLEGAL",
		11:  "URL_CATEGORY_IDS_GAMBLING",
		14:  "URL_CATEGORY_IDS_VIOLENCE_HATE_RACISM",
		15:  "URL_CATEGORY_IDS_WEAPONS",
		16:  "URL_CATEGORY_IDS_ABORTION",
		17:  "URL_CATEGORY_IDS_HACKING",
		18:  "URL_CATEGORY_IDS_PHISHING",
		20:  "URL_CATEGORY_IDS_ENTERTAINMENT",
		21:  "URL_CATEGORY_IDS_BUSINESS_ECONOMY",
		22:  "URL_CATEGORY_IDS_ALTERNATIVE_SPIRITUALITY_BELIEF",
		23:  "URL_CATEGORY_IDS_ALCOHOL",
		24:  "URL_CATEGORY_IDS_TOBACCO",
		25:  "URL_CATEGORY_IDS_CONTROLLED_SUBSTANCES",
		26:  "URL_CATEGORY_IDS_CHILD_PORNOGRAPHY",
		27:  "URL_CATEGORY_IDS_EDUCATION",
		29:  "URL_CATEGORY_IDS_CHARITABLE_ORGANIZATIONS",
		30:  "URL_CATEGORY_IDS_ART_CULTURE",
		31:  "URL_CATEGORY_IDS_FINANCIAL_SERVICES",
		32:  "URL_CATEGORY_IDS_BROKERAGE_TRADING",
		33:  "URL_CATEGORY_IDS_GAMES",
		34:  "URL_CATEGORY_IDS_GOVERNMENT_LEGAL",
		35:  "URL_CATEGORY_IDS_MILITARY",
		36:  "URL_CATEGORY_IDS_POLITICAL_SOCIAL_ADVOCACY",
		37:  "URL_CATEGORY_IDS_HEALTH",
		38:  "URL_CATEGORY_IDS_TECHNOLOGY_INTERNET",
		40:  "URL_CATEGORY_IDS_SEARCH_ENGINES_PORTALS",
		43:  "URL_CATEGORY_IDS_MALICIOUS_SOURCES_MALNETS",
		44:  "URL_CATEGORY_IDS_MALICIOUS_OUTBOUND_DATA_BOTNETS",
		45:  "URL_CATEGORY_IDS_JOB_SEARCH_CAREERS",
		46:  "URL_CATEGORY_IDS_NEWS_MEDIA",
		47:  "URL_CATEGORY_IDS_PERSONALS_DATING",
		49:  "URL_CATEGORY_IDS_REFERENCE",
		50:  "URL_CATEGORY_IDS_MIXED_CONTENT_POTENTIALLY_ADULT",
		51:  "URL_CATEGORY_IDS_CHAT_IM_SMS",
		52:  "URL_CATEGORY_IDS_EMAIL",
		53:  "URL_CATEGORY_IDS_NEWSGROUPS_FORUMS",
		54:  "URL_CATEGORY_IDS_RELIGION",
		55:  "URL_CATEGORY_IDS_SOCIAL_NETWORKING",
		56:  "URL_CATEGORY_IDS_FILE_STORAGE_SHARING",
		57:  "URL_CATEGORY_IDS_REMOTE_ACCESS_TOOLS",
		58:  "URL_CATEGORY_IDS_SHOPPING",
		59:  "URL_CATEGORY_IDS_AUCTIONS",
		60:  "URL_CATEGORY_IDS_REAL_ESTATE",
		61:  "URL_CATEGORY_IDS_SOCIETY_DAILY_LIVING",
		63:  "URL_CATEGORY_IDS_PERSONAL_SITES",
		64:  "URL_CATEGORY_IDS_RESTAURANTS_DINING_FOOD",
		65:  "URL_CATEGORY_IDS_SPORTS_RECREATION",
		66:  "URL_CATEGORY_IDS_TRAVEL",
		67:  "URL_CATEGORY_IDS_VEHICLES",
		68:  "URL_CATEGORY_IDS_HUMOR_JOKES",
		71:  "URL_CATEGORY_IDS_SOFTWARE_DOWNLOADS",
		83:  "URL_CATEGORY_IDS_PEER_TO_PEER_P_2_P",
		84:  "URL_CATEGORY_IDS_AUDIO_VIDEO_CLIPS",
		85:  "URL_CATEGORY_IDS_OFFICE_BUSINESS_APPLICATIONS",
		86:  "URL_CATEGORY_IDS_PROXY_AVOIDANCE",
		87:  "URL_CATEGORY_IDS_FOR_KIDS",
		88:  "URL_CATEGORY_IDS_WEB_ADS_ANALYTICS",
		89:  "URL_CATEGORY_IDS_WEB_HOSTING",
		90:  "URL_CATEGORY_IDS_UNCATEGORIZED",
		92:  "URL_CATEGORY_IDS_SUSPICIOUS",
		93:  "URL_CATEGORY_IDS_SEXUAL_EXPRESSION",
		95:  "URL_CATEGORY_IDS_TRANSLATION",
		96:  "URL_CATEGORY_IDS_NON_VIEWABLE_INFRASTRUCTURE",
		97:  "URL_CATEGORY_IDS_CONTENT_SERVERS",
		98:  "URL_CATEGORY_IDS_PLACEHOLDERS",
		99:  "URL_CATEGORY_IDS_OTHER",
		101: "URL_CATEGORY_IDS_SPAM",
		102: "URL_CATEGORY_IDS_POTENTIALLY_UNWANTED_SOFTWARE",
		103: "URL_CATEGORY_IDS_DYNAMIC_DNS_HOST",
		106: "URL_CATEGORY_IDS_E_CARD_INVITATIONS",
		107: "URL_CATEGORY_IDS_INFORMATIONAL",
		108: "URL_CATEGORY_IDS_COMPUTER_INFORMATION_SECURITY",
		109: "URL_CATEGORY_IDS_INTERNET_CONNECTED_DEVICES",
		110: "URL_CATEGORY_IDS_INTERNET_TELEPHONY",
		111: "URL_CATEGORY_IDS_ONLINE_MEETINGS",
		112: "URL_CATEGORY_IDS_MEDIA_SHARING",
		113: "URL_CATEGORY_IDS_RADIO_AUDIO_STREAMS",
		114: "URL_CATEGORY_IDS_TV_VIDEO_STREAMS",
		118: "URL_CATEGORY_IDS_PIRACY_COPYRIGHT_CONCERNS",
		121: "URL_CATEGORY_IDS_MARIJUANA",
	}
	URL_CATEGORY_IDS_value = map[string]int32{
		"URL_CATEGORY_IDS_UNKNOWN":                         0,
		"URL_CATEGORY_IDS_ADULT_MATURE_CONTENT":            1,
		"URL_CATEGORY_IDS_PORNOGRAPHY":                     3,
		"URL_CATEGORY_IDS_SEX_EDUCATION":                   4,
		"URL_CATEGORY_IDS_INTIMATE_APPAREL_SWIMSUIT":       5,
		"URL_CATEGORY_IDS_NUDITY":                          6,
		"URL_CATEGORY_IDS_EXTREME":                         7,
		"URL_CATEGORY_IDS_SCAM_QUESTIONABLE_ILLEGAL":       9,
		"URL_CATEGORY_IDS_GAMBLING":                        11,
		"URL_CATEGORY_IDS_VIOLENCE_HATE_RACISM":            14,
		"URL_CATEGORY_IDS_WEAPONS":                         15,
		"URL_CATEGORY_IDS_ABORTION":                        16,
		"URL_CATEGORY_IDS_HACKING":                         17,
		"URL_CATEGORY_IDS_PHISHING":                        18,
		"URL_CATEGORY_IDS_ENTERTAINMENT":                   20,
		"URL_CATEGORY_IDS_BUSINESS_ECONOMY":                21,
		"URL_CATEGORY_IDS_ALTERNATIVE_SPIRITUALITY_BELIEF": 22,
		"URL_CATEGORY_IDS_ALCOHOL":                         23,
		"URL_CATEGORY_IDS_TOBACCO":                         24,
		"URL_CATEGORY_IDS_CONTROLLED_SUBSTANCES":           25,
		"URL_CATEGORY_IDS_CHILD_PORNOGRAPHY":               26,
		"URL_CATEGORY_IDS_EDUCATION":                       27,
		"URL_CATEGORY_IDS_CHARITABLE_ORGANIZATIONS":        29,
		"URL_CATEGORY_IDS_ART_CULTURE":                     30,
		"URL_CATEGORY_IDS_FINANCIAL_SERVICES":              31,
		"URL_CATEGORY_IDS_BROKERAGE_TRADING":               32,
		"URL_CATEGORY_IDS_GAMES":                           33,
		"URL_CATEGORY_IDS_GOVERNMENT_LEGAL":                34,
		"URL_CATEGORY_IDS_MILITARY":                        35,
		"URL_CATEGORY_IDS_POLITICAL_SOCIAL_ADVOCACY":       36,
		"URL_CATEGORY_IDS_HEALTH":                          37,
		"URL_CATEGORY_IDS_TECHNOLOGY_INTERNET":             38,
		"URL_CATEGORY_IDS_SEARCH_ENGINES_PORTALS":          40,
		"URL_CATEGORY_IDS_MALICIOUS_SOURCES_MALNETS":       43,
		"URL_CATEGORY_IDS_MALICIOUS_OUTBOUND_DATA_BOTNETS": 44,
		"URL_CATEGORY_IDS_JOB_SEARCH_CAREERS":              45,
		"URL_CATEGORY_IDS_NEWS_MEDIA":                      46,
		"URL_CATEGORY_IDS_PERSONALS_DATING":                47,
		"URL_CATEGORY_IDS_REFERENCE":                       49,
		"URL_CATEGORY_IDS_MIXED_CONTENT_POTENTIALLY_ADULT": 50,
		"URL_CATEGORY_IDS_CHAT_IM_SMS":                     51,
		"URL_CATEGORY_IDS_EMAIL":                           52,
		"URL_CATEGORY_IDS_NEWSGROUPS_FORUMS":               53,
		"URL_CATEGORY_IDS_RELIGION":                        54,
		"URL_CATEGORY_IDS_SOCIAL_NETWORKING":               55,
		"URL_CATEGORY_IDS_FILE_STORAGE_SHARING":            56,
		"URL_CATEGORY_IDS_REMOTE_ACCESS_TOOLS":             57,
		"URL_CATEGORY_IDS_SHOPPING":                        58,
		"URL_CATEGORY_IDS_AUCTIONS":                        59,
		"URL_CATEGORY_IDS_REAL_ESTATE":                     60,
		"URL_CATEGORY_IDS_SOCIETY_DAILY_LIVING":            61,
		"URL_CATEGORY_IDS_PERSONAL_SITES":                  63,
		"URL_CATEGORY_IDS_RESTAURANTS_DINING_FOOD":         64,
		"URL_CATEGORY_IDS_SPORTS_RECREATION":               65,
		"URL_CATEGORY_IDS_TRAVEL":                          66,
		"URL_CATEGORY_IDS_VEHICLES":                        67,
		"URL_CATEGORY_IDS_HUMOR_JOKES":                     68,
		"URL_CATEGORY_IDS_SOFTWARE_DOWNLOADS":              71,
		"URL_CATEGORY_IDS_PEER_TO_PEER_P_2_P":              83,
		"URL_CATEGORY_IDS_AUDIO_VIDEO_CLIPS":               84,
		"URL_CATEGORY_IDS_OFFICE_BUSINESS_APPLICATIONS":    85,
		"URL_CATEGORY_IDS_PROXY_AVOIDANCE":                 86,
		"URL_CATEGORY_IDS_FOR_KIDS":                        87,
		"URL_CATEGORY_IDS_WEB_ADS_ANALYTICS":               88,
		"URL_CATEGORY_IDS_WEB_HOSTING":                     89,
		"URL_CATEGORY_IDS_UNCATEGORIZED":                   90,
		"URL_CATEGORY_IDS_SUSPICIOUS":                      92,
		"URL_CATEGORY_IDS_SEXUAL_EXPRESSION":               93,
		"URL_CATEGORY_IDS_TRANSLATION":                     95,
		"URL_CATEGORY_IDS_NON_VIEWABLE_INFRASTRUCTURE":     96,
		"URL_CATEGORY_IDS_CONTENT_SERVERS":                 97,
		"URL_CATEGORY_IDS_PLACEHOLDERS":                    98,
		"URL_CATEGORY_IDS_OTHER":                           99,
		"URL_CATEGORY_IDS_SPAM":                            101,
		"URL_CATEGORY_IDS_POTENTIALLY_UNWANTED_SOFTWARE":   102,
		"URL_CATEGORY_IDS_DYNAMIC_DNS_HOST":                103,
		"URL_CATEGORY_IDS_E_CARD_INVITATIONS":              106,
		"URL_CATEGORY_IDS_INFORMATIONAL":                   107,
		"URL_CATEGORY_IDS_COMPUTER_INFORMATION_SECURITY":   108,
		"URL_CATEGORY_IDS_INTERNET_CONNECTED_DEVICES":      109,
		"URL_CATEGORY_IDS_INTERNET_TELEPHONY":              110,
		"URL_CATEGORY_IDS_ONLINE_MEETINGS":                 111,
		"URL_CATEGORY_IDS_MEDIA_SHARING":                   112,
		"URL_CATEGORY_IDS_RADIO_AUDIO_STREAMS":             113,
		"URL_CATEGORY_IDS_TV_VIDEO_STREAMS":                114,
		"URL_CATEGORY_IDS_PIRACY_COPYRIGHT_CONCERNS":       118,
		"URL_CATEGORY_IDS_MARIJUANA":                       121,
	}
)

func (x URL_CATEGORY_IDS) Enum() *URL_CATEGORY_IDS {
	p := new(URL_CATEGORY_IDS)
	*p = x
	return p
}

func (x URL_CATEGORY_IDS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (URL_CATEGORY_IDS) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[8].Descriptor()
}

func (URL_CATEGORY_IDS) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[8]
}

func (x URL_CATEGORY_IDS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use URL_CATEGORY_IDS.Descriptor instead.
func (URL_CATEGORY_IDS) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{8}
}

type NETWORK_CONNECTION_INFO_BOUNDARY_ID int32

const (
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_UNKNOWN                 NETWORK_CONNECTION_INFO_BOUNDARY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCALHOST               NETWORK_CONNECTION_INFO_BOUNDARY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNAL                NETWORK_CONNECTION_INFO_BOUNDARY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_EXTERNAL                NETWORK_CONNECTION_INFO_BOUNDARY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_SAME_VPC                NETWORK_CONNECTION_INFO_BOUNDARY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_VPC_GATEWAY    NETWORK_CONNECTION_INFO_BOUNDARY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_VIRTUAL_PRIVATE_GATEWAY NETWORK_CONNECTION_INFO_BOUNDARY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTRA_REGION_VPC        NETWORK_CONNECTION_INFO_BOUNDARY_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTER_REGION_VPC        NETWORK_CONNECTION_INFO_BOUNDARY_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCAL_GATEWAY           NETWORK_CONNECTION_INFO_BOUNDARY_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_GATEWAY_VPC             NETWORK_CONNECTION_INFO_BOUNDARY_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_GATEWAY        NETWORK_CONNECTION_INFO_BOUNDARY_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_NETWORK_CONNECTION_INFO_BOUNDARY_ID_OTHER                   NETWORK_CONNECTION_INFO_BOUNDARY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_CONNECTION_INFO_BOUNDARY_ID.
var (
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_UNKNOWN",
		1:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCALHOST",
		2:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNAL",
		3:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_EXTERNAL",
		4:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_SAME_VPC",
		5:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_VPC_GATEWAY",
		6:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_VIRTUAL_PRIVATE_GATEWAY",
		7:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTRA_REGION_VPC",
		8:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTER_REGION_VPC",
		9:  "NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCAL_GATEWAY",
		10: "NETWORK_CONNECTION_INFO_BOUNDARY_ID_GATEWAY_VPC",
		11: "NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_GATEWAY",
		99: "NETWORK_CONNECTION_INFO_BOUNDARY_ID_OTHER",
	}
	NETWORK_CONNECTION_INFO_BOUNDARY_ID_value = map[string]int32{
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_UNKNOWN":                 0,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCALHOST":               1,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNAL":                2,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_EXTERNAL":                3,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_SAME_VPC":                4,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_VPC_GATEWAY":    5,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_VIRTUAL_PRIVATE_GATEWAY": 6,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTRA_REGION_VPC":        7,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTER_REGION_VPC":        8,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_LOCAL_GATEWAY":           9,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_GATEWAY_VPC":             10,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_INTERNET_GATEWAY":        11,
		"NETWORK_CONNECTION_INFO_BOUNDARY_ID_OTHER":                   99,
	}
)

func (x NETWORK_CONNECTION_INFO_BOUNDARY_ID) Enum() *NETWORK_CONNECTION_INFO_BOUNDARY_ID {
	p := new(NETWORK_CONNECTION_INFO_BOUNDARY_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_INFO_BOUNDARY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_INFO_BOUNDARY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[9].Descriptor()
}

func (NETWORK_CONNECTION_INFO_BOUNDARY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[9]
}

func (x NETWORK_CONNECTION_INFO_BOUNDARY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_INFO_BOUNDARY_ID.Descriptor instead.
func (NETWORK_CONNECTION_INFO_BOUNDARY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{9}
}

type KILL_CHAIN_PHASE_PHASE_ID int32

const (
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_UNKNOWN               KILL_CHAIN_PHASE_PHASE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_RECONNAISSANCE        KILL_CHAIN_PHASE_PHASE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_WEAPONIZATION         KILL_CHAIN_PHASE_PHASE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_DELIVERY              KILL_CHAIN_PHASE_PHASE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_EXPLOITATION          KILL_CHAIN_PHASE_PHASE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_INSTALLATION          KILL_CHAIN_PHASE_PHASE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_COMMAND_CONTROL       KILL_CHAIN_PHASE_PHASE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_ACTIONS_ON_OBJECTIVES KILL_CHAIN_PHASE_PHASE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	KILL_CHAIN_PHASE_PHASE_ID_KILL_CHAIN_PHASE_PHASE_ID_OTHER                 KILL_CHAIN_PHASE_PHASE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for KILL_CHAIN_PHASE_PHASE_ID.
var (
	KILL_CHAIN_PHASE_PHASE_ID_name = map[int32]string{
		0:  "KILL_CHAIN_PHASE_PHASE_ID_UNKNOWN",
		1:  "KILL_CHAIN_PHASE_PHASE_ID_RECONNAISSANCE",
		2:  "KILL_CHAIN_PHASE_PHASE_ID_WEAPONIZATION",
		3:  "KILL_CHAIN_PHASE_PHASE_ID_DELIVERY",
		4:  "KILL_CHAIN_PHASE_PHASE_ID_EXPLOITATION",
		5:  "KILL_CHAIN_PHASE_PHASE_ID_INSTALLATION",
		6:  "KILL_CHAIN_PHASE_PHASE_ID_COMMAND_CONTROL",
		7:  "KILL_CHAIN_PHASE_PHASE_ID_ACTIONS_ON_OBJECTIVES",
		99: "KILL_CHAIN_PHASE_PHASE_ID_OTHER",
	}
	KILL_CHAIN_PHASE_PHASE_ID_value = map[string]int32{
		"KILL_CHAIN_PHASE_PHASE_ID_UNKNOWN":               0,
		"KILL_CHAIN_PHASE_PHASE_ID_RECONNAISSANCE":        1,
		"KILL_CHAIN_PHASE_PHASE_ID_WEAPONIZATION":         2,
		"KILL_CHAIN_PHASE_PHASE_ID_DELIVERY":              3,
		"KILL_CHAIN_PHASE_PHASE_ID_EXPLOITATION":          4,
		"KILL_CHAIN_PHASE_PHASE_ID_INSTALLATION":          5,
		"KILL_CHAIN_PHASE_PHASE_ID_COMMAND_CONTROL":       6,
		"KILL_CHAIN_PHASE_PHASE_ID_ACTIONS_ON_OBJECTIVES": 7,
		"KILL_CHAIN_PHASE_PHASE_ID_OTHER":                 99,
	}
)

func (x KILL_CHAIN_PHASE_PHASE_ID) Enum() *KILL_CHAIN_PHASE_PHASE_ID {
	p := new(KILL_CHAIN_PHASE_PHASE_ID)
	*p = x
	return p
}

func (x KILL_CHAIN_PHASE_PHASE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KILL_CHAIN_PHASE_PHASE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[10].Descriptor()
}

func (KILL_CHAIN_PHASE_PHASE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[10]
}

func (x KILL_CHAIN_PHASE_PHASE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KILL_CHAIN_PHASE_PHASE_ID.Descriptor instead.
func (KILL_CHAIN_PHASE_PHASE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{10}
}

type NETWORK_CONNECTION_INFO_DIRECTION_ID int32

const (
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_UNKNOWN  NETWORK_CONNECTION_INFO_DIRECTION_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_INBOUND  NETWORK_CONNECTION_INFO_DIRECTION_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_OUTBOUND NETWORK_CONNECTION_INFO_DIRECTION_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_LATERAL  NETWORK_CONNECTION_INFO_DIRECTION_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_CONNECTION_INFO_DIRECTION_ID_NETWORK_CONNECTION_INFO_DIRECTION_ID_OTHER    NETWORK_CONNECTION_INFO_DIRECTION_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_CONNECTION_INFO_DIRECTION_ID.
var (
	NETWORK_CONNECTION_INFO_DIRECTION_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_INFO_DIRECTION_ID_UNKNOWN",
		1:  "NETWORK_CONNECTION_INFO_DIRECTION_ID_INBOUND",
		2:  "NETWORK_CONNECTION_INFO_DIRECTION_ID_OUTBOUND",
		3:  "NETWORK_CONNECTION_INFO_DIRECTION_ID_LATERAL",
		99: "NETWORK_CONNECTION_INFO_DIRECTION_ID_OTHER",
	}
	NETWORK_CONNECTION_INFO_DIRECTION_ID_value = map[string]int32{
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_UNKNOWN":  0,
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_INBOUND":  1,
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_OUTBOUND": 2,
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_LATERAL":  3,
		"NETWORK_CONNECTION_INFO_DIRECTION_ID_OTHER":    99,
	}
)

func (x NETWORK_CONNECTION_INFO_DIRECTION_ID) Enum() *NETWORK_CONNECTION_INFO_DIRECTION_ID {
	p := new(NETWORK_CONNECTION_INFO_DIRECTION_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_INFO_DIRECTION_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_INFO_DIRECTION_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[11].Descriptor()
}

func (NETWORK_CONNECTION_INFO_DIRECTION_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[11]
}

func (x NETWORK_CONNECTION_INFO_DIRECTION_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_INFO_DIRECTION_ID.Descriptor instead.
func (NETWORK_CONNECTION_INFO_DIRECTION_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{11}
}

type JOB_RUN_STATE_ID int32

const (
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_UNKNOWN JOB_RUN_STATE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_READY   JOB_RUN_STATE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_QUEUED  JOB_RUN_STATE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_RUNNING JOB_RUN_STATE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_STOPPED JOB_RUN_STATE_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	JOB_RUN_STATE_ID_JOB_RUN_STATE_ID_OTHER   JOB_RUN_STATE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for JOB_RUN_STATE_ID.
var (
	JOB_RUN_STATE_ID_name = map[int32]string{
		0:  "JOB_RUN_STATE_ID_UNKNOWN",
		1:  "JOB_RUN_STATE_ID_READY",
		2:  "JOB_RUN_STATE_ID_QUEUED",
		3:  "JOB_RUN_STATE_ID_RUNNING",
		4:  "JOB_RUN_STATE_ID_STOPPED",
		99: "JOB_RUN_STATE_ID_OTHER",
	}
	JOB_RUN_STATE_ID_value = map[string]int32{
		"JOB_RUN_STATE_ID_UNKNOWN": 0,
		"JOB_RUN_STATE_ID_READY":   1,
		"JOB_RUN_STATE_ID_QUEUED":  2,
		"JOB_RUN_STATE_ID_RUNNING": 3,
		"JOB_RUN_STATE_ID_STOPPED": 4,
		"JOB_RUN_STATE_ID_OTHER":   99,
	}
)

func (x JOB_RUN_STATE_ID) Enum() *JOB_RUN_STATE_ID {
	p := new(JOB_RUN_STATE_ID)
	*p = x
	return p
}

func (x JOB_RUN_STATE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JOB_RUN_STATE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[12].Descriptor()
}

func (JOB_RUN_STATE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[12]
}

func (x JOB_RUN_STATE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JOB_RUN_STATE_ID.Descriptor instead.
func (JOB_RUN_STATE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{12}
}

type DIGITAL_SIGNATURE_ALGORITHM_ID int32

const (
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_UNKNOWN      DIGITAL_SIGNATURE_ALGORITHM_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_DSA          DIGITAL_SIGNATURE_ALGORITHM_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_RSA          DIGITAL_SIGNATURE_ALGORITHM_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_ECDSA        DIGITAL_SIGNATURE_ALGORITHM_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_AUTHENTICODE DIGITAL_SIGNATURE_ALGORITHM_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DIGITAL_SIGNATURE_ALGORITHM_ID_DIGITAL_SIGNATURE_ALGORITHM_ID_OTHER        DIGITAL_SIGNATURE_ALGORITHM_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DIGITAL_SIGNATURE_ALGORITHM_ID.
var (
	DIGITAL_SIGNATURE_ALGORITHM_ID_name = map[int32]string{
		0:  "DIGITAL_SIGNATURE_ALGORITHM_ID_UNKNOWN",
		1:  "DIGITAL_SIGNATURE_ALGORITHM_ID_DSA",
		2:  "DIGITAL_SIGNATURE_ALGORITHM_ID_RSA",
		3:  "DIGITAL_SIGNATURE_ALGORITHM_ID_ECDSA",
		4:  "DIGITAL_SIGNATURE_ALGORITHM_ID_AUTHENTICODE",
		99: "DIGITAL_SIGNATURE_ALGORITHM_ID_OTHER",
	}
	DIGITAL_SIGNATURE_ALGORITHM_ID_value = map[string]int32{
		"DIGITAL_SIGNATURE_ALGORITHM_ID_UNKNOWN":      0,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_DSA":          1,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_RSA":          2,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_ECDSA":        3,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_AUTHENTICODE": 4,
		"DIGITAL_SIGNATURE_ALGORITHM_ID_OTHER":        99,
	}
)

func (x DIGITAL_SIGNATURE_ALGORITHM_ID) Enum() *DIGITAL_SIGNATURE_ALGORITHM_ID {
	p := new(DIGITAL_SIGNATURE_ALGORITHM_ID)
	*p = x
	return p
}

func (x DIGITAL_SIGNATURE_ALGORITHM_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DIGITAL_SIGNATURE_ALGORITHM_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[13].Descriptor()
}

func (DIGITAL_SIGNATURE_ALGORITHM_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[13]
}

func (x DIGITAL_SIGNATURE_ALGORITHM_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DIGITAL_SIGNATURE_ALGORITHM_ID.Descriptor instead.
func (DIGITAL_SIGNATURE_ALGORITHM_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{13}
}

type OBSERVABLE_TYPE_ID int32

const (
	OBSERVABLE_TYPE_ID_OBSERVABLE_TYPE_ID_UNKNOWN OBSERVABLE_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	OBSERVABLE_TYPE_ID_OBSERVABLE_TYPE_ID_OTHER   OBSERVABLE_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for OBSERVABLE_TYPE_ID.
var (
	OBSERVABLE_TYPE_ID_name = map[int32]string{
		0:  "OBSERVABLE_TYPE_ID_UNKNOWN",
		99: "OBSERVABLE_TYPE_ID_OTHER",
	}
	OBSERVABLE_TYPE_ID_value = map[string]int32{
		"OBSERVABLE_TYPE_ID_UNKNOWN": 0,
		"OBSERVABLE_TYPE_ID_OTHER":   99,
	}
)

func (x OBSERVABLE_TYPE_ID) Enum() *OBSERVABLE_TYPE_ID {
	p := new(OBSERVABLE_TYPE_ID)
	*p = x
	return p
}

func (x OBSERVABLE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OBSERVABLE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[14].Descriptor()
}

func (OBSERVABLE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[14]
}

func (x OBSERVABLE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OBSERVABLE_TYPE_ID.Descriptor instead.
func (OBSERVABLE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{14}
}

type DATA_SECURITY_DETECTION_SYSTEM_ID int32

const (
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_UNKNOWN                          DATA_SECURITY_DETECTION_SYSTEM_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_ENDPOINT                         DATA_SECURITY_DETECTION_SYSTEM_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_DLP_GATEWAY                      DATA_SECURITY_DETECTION_SYSTEM_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_MOBILE_DEVICE_MANAGEMENT         DATA_SECURITY_DETECTION_SYSTEM_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_DISCOVERY_CLASSIFICATION    DATA_SECURITY_DETECTION_SYSTEM_ID = 4  // EnumValue: 4; Type: OCSF_VALUE;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_SECURE_WEB_GATEWAY               DATA_SECURITY_DETECTION_SYSTEM_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_SECURE_EMAIL_GATEWAY             DATA_SECURITY_DETECTION_SYSTEM_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_DIGITAL_RIGHTS_MANAGEMENT        DATA_SECURITY_DETECTION_SYSTEM_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_CLOUD_ACCESS_SECURITY_BROKER     DATA_SECURITY_DETECTION_SYSTEM_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_DATABASE_ACTIVITY_MONITORING     DATA_SECURITY_DETECTION_SYSTEM_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_APPLICATION_LEVEL_DLP            DATA_SECURITY_DETECTION_SYSTEM_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_DEVELOPER_SECURITY               DATA_SECURITY_DETECTION_SYSTEM_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_POSTURE_MANAGEMENT DATA_SECURITY_DETECTION_SYSTEM_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_DETECTION_SYSTEM_ID_OTHER                            DATA_SECURITY_DETECTION_SYSTEM_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_DETECTION_SYSTEM_ID.
var (
	DATA_SECURITY_DETECTION_SYSTEM_ID_name = map[int32]string{
		0:  "DATA_SECURITY_DETECTION_SYSTEM_ID_UNKNOWN",
		1:  "DATA_SECURITY_DETECTION_SYSTEM_ID_ENDPOINT",
		2:  "DATA_SECURITY_DETECTION_SYSTEM_ID_DLP_GATEWAY",
		3:  "DATA_SECURITY_DETECTION_SYSTEM_ID_MOBILE_DEVICE_MANAGEMENT",
		4:  "DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_DISCOVERY_CLASSIFICATION",
		5:  "DATA_SECURITY_DETECTION_SYSTEM_ID_SECURE_WEB_GATEWAY",
		6:  "DATA_SECURITY_DETECTION_SYSTEM_ID_SECURE_EMAIL_GATEWAY",
		7:  "DATA_SECURITY_DETECTION_SYSTEM_ID_DIGITAL_RIGHTS_MANAGEMENT",
		8:  "DATA_SECURITY_DETECTION_SYSTEM_ID_CLOUD_ACCESS_SECURITY_BROKER",
		9:  "DATA_SECURITY_DETECTION_SYSTEM_ID_DATABASE_ACTIVITY_MONITORING",
		10: "DATA_SECURITY_DETECTION_SYSTEM_ID_APPLICATION_LEVEL_DLP",
		11: "DATA_SECURITY_DETECTION_SYSTEM_ID_DEVELOPER_SECURITY",
		12: "DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_POSTURE_MANAGEMENT",
		99: "DATA_SECURITY_DETECTION_SYSTEM_ID_OTHER",
	}
	DATA_SECURITY_DETECTION_SYSTEM_ID_value = map[string]int32{
		"DATA_SECURITY_DETECTION_SYSTEM_ID_UNKNOWN":                          0,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_ENDPOINT":                         1,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_DLP_GATEWAY":                      2,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_MOBILE_DEVICE_MANAGEMENT":         3,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_DISCOVERY_CLASSIFICATION":    4,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_SECURE_WEB_GATEWAY":               5,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_SECURE_EMAIL_GATEWAY":             6,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_DIGITAL_RIGHTS_MANAGEMENT":        7,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_CLOUD_ACCESS_SECURITY_BROKER":     8,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_DATABASE_ACTIVITY_MONITORING":     9,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_APPLICATION_LEVEL_DLP":            10,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_DEVELOPER_SECURITY":               11,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_DATA_SECURITY_POSTURE_MANAGEMENT": 12,
		"DATA_SECURITY_DETECTION_SYSTEM_ID_OTHER":                            99,
	}
)

func (x DATA_SECURITY_DETECTION_SYSTEM_ID) Enum() *DATA_SECURITY_DETECTION_SYSTEM_ID {
	p := new(DATA_SECURITY_DETECTION_SYSTEM_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_DETECTION_SYSTEM_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_DETECTION_SYSTEM_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[15].Descriptor()
}

func (DATA_SECURITY_DETECTION_SYSTEM_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[15]
}

func (x DATA_SECURITY_DETECTION_SYSTEM_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_DETECTION_SYSTEM_ID.Descriptor instead.
func (DATA_SECURITY_DETECTION_SYSTEM_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{15}
}

type MODULE_LOAD_TYPE_ID int32

const (
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_UNKNOWN             MODULE_LOAD_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_STANDARD            MODULE_LOAD_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_NON_STANDARD        MODULE_LOAD_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_SHELL_CODE          MODULE_LOAD_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_MAPPED              MODULE_LOAD_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_NON_STANDARD_BACKED MODULE_LOAD_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	MODULE_LOAD_TYPE_ID_MODULE_LOAD_TYPE_ID_OTHER               MODULE_LOAD_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for MODULE_LOAD_TYPE_ID.
var (
	MODULE_LOAD_TYPE_ID_name = map[int32]string{
		0:  "MODULE_LOAD_TYPE_ID_UNKNOWN",
		1:  "MODULE_LOAD_TYPE_ID_STANDARD",
		2:  "MODULE_LOAD_TYPE_ID_NON_STANDARD",
		3:  "MODULE_LOAD_TYPE_ID_SHELL_CODE",
		4:  "MODULE_LOAD_TYPE_ID_MAPPED",
		5:  "MODULE_LOAD_TYPE_ID_NON_STANDARD_BACKED",
		99: "MODULE_LOAD_TYPE_ID_OTHER",
	}
	MODULE_LOAD_TYPE_ID_value = map[string]int32{
		"MODULE_LOAD_TYPE_ID_UNKNOWN":             0,
		"MODULE_LOAD_TYPE_ID_STANDARD":            1,
		"MODULE_LOAD_TYPE_ID_NON_STANDARD":        2,
		"MODULE_LOAD_TYPE_ID_SHELL_CODE":          3,
		"MODULE_LOAD_TYPE_ID_MAPPED":              4,
		"MODULE_LOAD_TYPE_ID_NON_STANDARD_BACKED": 5,
		"MODULE_LOAD_TYPE_ID_OTHER":               99,
	}
)

func (x MODULE_LOAD_TYPE_ID) Enum() *MODULE_LOAD_TYPE_ID {
	p := new(MODULE_LOAD_TYPE_ID)
	*p = x
	return p
}

func (x MODULE_LOAD_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MODULE_LOAD_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[16].Descriptor()
}

func (MODULE_LOAD_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[16]
}

func (x MODULE_LOAD_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MODULE_LOAD_TYPE_ID.Descriptor instead.
func (MODULE_LOAD_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{16}
}

type FILE_CONFIDENTIALITY_ID int32

const (
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_UNKNOWN          FILE_CONFIDENTIALITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL FILE_CONFIDENTIALITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_CONFIDENTIAL     FILE_CONFIDENTIALITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_SECRET           FILE_CONFIDENTIALITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_TOP_SECRET       FILE_CONFIDENTIALITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_PRIVATE          FILE_CONFIDENTIALITY_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_RESTRICTED       FILE_CONFIDENTIALITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FILE_CONFIDENTIALITY_ID_FILE_CONFIDENTIALITY_ID_OTHER            FILE_CONFIDENTIALITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FILE_CONFIDENTIALITY_ID.
var (
	FILE_CONFIDENTIALITY_ID_name = map[int32]string{
		0:  "FILE_CONFIDENTIALITY_ID_UNKNOWN",
		1:  "FILE_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL",
		2:  "FILE_CONFIDENTIALITY_ID_CONFIDENTIAL",
		3:  "FILE_CONFIDENTIALITY_ID_SECRET",
		4:  "FILE_CONFIDENTIALITY_ID_TOP_SECRET",
		5:  "FILE_CONFIDENTIALITY_ID_PRIVATE",
		6:  "FILE_CONFIDENTIALITY_ID_RESTRICTED",
		99: "FILE_CONFIDENTIALITY_ID_OTHER",
	}
	FILE_CONFIDENTIALITY_ID_value = map[string]int32{
		"FILE_CONFIDENTIALITY_ID_UNKNOWN":          0,
		"FILE_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL": 1,
		"FILE_CONFIDENTIALITY_ID_CONFIDENTIAL":     2,
		"FILE_CONFIDENTIALITY_ID_SECRET":           3,
		"FILE_CONFIDENTIALITY_ID_TOP_SECRET":       4,
		"FILE_CONFIDENTIALITY_ID_PRIVATE":          5,
		"FILE_CONFIDENTIALITY_ID_RESTRICTED":       6,
		"FILE_CONFIDENTIALITY_ID_OTHER":            99,
	}
)

func (x FILE_CONFIDENTIALITY_ID) Enum() *FILE_CONFIDENTIALITY_ID {
	p := new(FILE_CONFIDENTIALITY_ID)
	*p = x
	return p
}

func (x FILE_CONFIDENTIALITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_CONFIDENTIALITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[17].Descriptor()
}

func (FILE_CONFIDENTIALITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[17]
}

func (x FILE_CONFIDENTIALITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_CONFIDENTIALITY_ID.Descriptor instead.
func (FILE_CONFIDENTIALITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{17}
}

type NETWORK_ENDPOINT_TYPE_ID int32

const (
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_UNKNOWN  NETWORK_ENDPOINT_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_SERVER   NETWORK_ENDPOINT_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_DESKTOP  NETWORK_ENDPOINT_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_LAPTOP   NETWORK_ENDPOINT_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_TABLET   NETWORK_ENDPOINT_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_MOBILE   NETWORK_ENDPOINT_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_VIRTUAL  NETWORK_ENDPOINT_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_IOT      NETWORK_ENDPOINT_TYPE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_BROWSER  NETWORK_ENDPOINT_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_FIREWALL NETWORK_ENDPOINT_TYPE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_SWITCH   NETWORK_ENDPOINT_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_HUB      NETWORK_ENDPOINT_TYPE_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NETWORK_ENDPOINT_TYPE_ID_NETWORK_ENDPOINT_TYPE_ID_OTHER    NETWORK_ENDPOINT_TYPE_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for NETWORK_ENDPOINT_TYPE_ID.
var (
	NETWORK_ENDPOINT_TYPE_ID_name = map[int32]string{
		0:  "NETWORK_ENDPOINT_TYPE_ID_UNKNOWN",
		1:  "NETWORK_ENDPOINT_TYPE_ID_SERVER",
		2:  "NETWORK_ENDPOINT_TYPE_ID_DESKTOP",
		3:  "NETWORK_ENDPOINT_TYPE_ID_LAPTOP",
		4:  "NETWORK_ENDPOINT_TYPE_ID_TABLET",
		5:  "NETWORK_ENDPOINT_TYPE_ID_MOBILE",
		6:  "NETWORK_ENDPOINT_TYPE_ID_VIRTUAL",
		7:  "NETWORK_ENDPOINT_TYPE_ID_IOT",
		8:  "NETWORK_ENDPOINT_TYPE_ID_BROWSER",
		9:  "NETWORK_ENDPOINT_TYPE_ID_FIREWALL",
		10: "NETWORK_ENDPOINT_TYPE_ID_SWITCH",
		11: "NETWORK_ENDPOINT_TYPE_ID_HUB",
		99: "NETWORK_ENDPOINT_TYPE_ID_OTHER",
	}
	NETWORK_ENDPOINT_TYPE_ID_value = map[string]int32{
		"NETWORK_ENDPOINT_TYPE_ID_UNKNOWN":  0,
		"NETWORK_ENDPOINT_TYPE_ID_SERVER":   1,
		"NETWORK_ENDPOINT_TYPE_ID_DESKTOP":  2,
		"NETWORK_ENDPOINT_TYPE_ID_LAPTOP":   3,
		"NETWORK_ENDPOINT_TYPE_ID_TABLET":   4,
		"NETWORK_ENDPOINT_TYPE_ID_MOBILE":   5,
		"NETWORK_ENDPOINT_TYPE_ID_VIRTUAL":  6,
		"NETWORK_ENDPOINT_TYPE_ID_IOT":      7,
		"NETWORK_ENDPOINT_TYPE_ID_BROWSER":  8,
		"NETWORK_ENDPOINT_TYPE_ID_FIREWALL": 9,
		"NETWORK_ENDPOINT_TYPE_ID_SWITCH":   10,
		"NETWORK_ENDPOINT_TYPE_ID_HUB":      11,
		"NETWORK_ENDPOINT_TYPE_ID_OTHER":    99,
	}
)

func (x NETWORK_ENDPOINT_TYPE_ID) Enum() *NETWORK_ENDPOINT_TYPE_ID {
	p := new(NETWORK_ENDPOINT_TYPE_ID)
	*p = x
	return p
}

func (x NETWORK_ENDPOINT_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_ENDPOINT_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[18].Descriptor()
}

func (NETWORK_ENDPOINT_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[18]
}

func (x NETWORK_ENDPOINT_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_ENDPOINT_TYPE_ID.Descriptor instead.
func (NETWORK_ENDPOINT_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{18}
}

type MALWARE_CLASSIFICATION_IDS int32

const (
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_UNKNOWN                 MALWARE_CLASSIFICATION_IDS = 0  // Type: OCSF_VALUE; EnumValue: 0;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_ADWARE                  MALWARE_CLASSIFICATION_IDS = 1  // Type: OCSF_VALUE; EnumValue: 1;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_BACKDOOR                MALWARE_CLASSIFICATION_IDS = 2  // Type: OCSF_VALUE; EnumValue: 2;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_BOT                     MALWARE_CLASSIFICATION_IDS = 3  // EnumValue: 3; Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_BOOTKIT                 MALWARE_CLASSIFICATION_IDS = 4  // Type: OCSF_VALUE; EnumValue: 4;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_DDOS                    MALWARE_CLASSIFICATION_IDS = 5  // Type: OCSF_VALUE; EnumValue: 5;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_DOWNLOADER              MALWARE_CLASSIFICATION_IDS = 6  // Type: OCSF_VALUE; EnumValue: 6;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_DROPPER                 MALWARE_CLASSIFICATION_IDS = 7  // Type: OCSF_VALUE; EnumValue: 7;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_EXPLOIT_KIT             MALWARE_CLASSIFICATION_IDS = 8  // EnumValue: 8; Type: OCSF_VALUE;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_KEYLOGGER               MALWARE_CLASSIFICATION_IDS = 9  // Type: OCSF_VALUE; EnumValue: 9;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_RANSOMWARE              MALWARE_CLASSIFICATION_IDS = 10 // Type: OCSF_VALUE; EnumValue: 10;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_REMOTE_ACCESS_TROJAN    MALWARE_CLASSIFICATION_IDS = 11 // Type: OCSF_VALUE; EnumValue: 11;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_RESOURCE_EXPLOITATION   MALWARE_CLASSIFICATION_IDS = 13 // Type: OCSF_VALUE; EnumValue: 13;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_ROGUE_SECURITY_SOFTWARE MALWARE_CLASSIFICATION_IDS = 14 // Type: OCSF_VALUE; EnumValue: 14;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_ROOTKIT                 MALWARE_CLASSIFICATION_IDS = 15 // Type: OCSF_VALUE; EnumValue: 15;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_SCREEN_CAPTURE          MALWARE_CLASSIFICATION_IDS = 16 // Type: OCSF_VALUE; EnumValue: 16;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_SPYWARE                 MALWARE_CLASSIFICATION_IDS = 17 // Type: OCSF_VALUE; EnumValue: 17;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_TROJAN                  MALWARE_CLASSIFICATION_IDS = 18 // Type: OCSF_VALUE; EnumValue: 18;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_VIRUS                   MALWARE_CLASSIFICATION_IDS = 19 // Type: OCSF_VALUE; EnumValue: 19;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_WEBSHELL                MALWARE_CLASSIFICATION_IDS = 20 // Type: OCSF_VALUE; EnumValue: 20;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_WIPER                   MALWARE_CLASSIFICATION_IDS = 21 // Type: OCSF_VALUE; EnumValue: 21;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_WORM                    MALWARE_CLASSIFICATION_IDS = 22 // Type: OCSF_VALUE; EnumValue: 22;
	MALWARE_CLASSIFICATION_IDS_MALWARE_CLASSIFICATION_IDS_OTHER                   MALWARE_CLASSIFICATION_IDS = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for MALWARE_CLASSIFICATION_IDS.
var (
	MALWARE_CLASSIFICATION_IDS_name = map[int32]string{
		0:  "MALWARE_CLASSIFICATION_IDS_UNKNOWN",
		1:  "MALWARE_CLASSIFICATION_IDS_ADWARE",
		2:  "MALWARE_CLASSIFICATION_IDS_BACKDOOR",
		3:  "MALWARE_CLASSIFICATION_IDS_BOT",
		4:  "MALWARE_CLASSIFICATION_IDS_BOOTKIT",
		5:  "MALWARE_CLASSIFICATION_IDS_DDOS",
		6:  "MALWARE_CLASSIFICATION_IDS_DOWNLOADER",
		7:  "MALWARE_CLASSIFICATION_IDS_DROPPER",
		8:  "MALWARE_CLASSIFICATION_IDS_EXPLOIT_KIT",
		9:  "MALWARE_CLASSIFICATION_IDS_KEYLOGGER",
		10: "MALWARE_CLASSIFICATION_IDS_RANSOMWARE",
		11: "MALWARE_CLASSIFICATION_IDS_REMOTE_ACCESS_TROJAN",
		13: "MALWARE_CLASSIFICATION_IDS_RESOURCE_EXPLOITATION",
		14: "MALWARE_CLASSIFICATION_IDS_ROGUE_SECURITY_SOFTWARE",
		15: "MALWARE_CLASSIFICATION_IDS_ROOTKIT",
		16: "MALWARE_CLASSIFICATION_IDS_SCREEN_CAPTURE",
		17: "MALWARE_CLASSIFICATION_IDS_SPYWARE",
		18: "MALWARE_CLASSIFICATION_IDS_TROJAN",
		19: "MALWARE_CLASSIFICATION_IDS_VIRUS",
		20: "MALWARE_CLASSIFICATION_IDS_WEBSHELL",
		21: "MALWARE_CLASSIFICATION_IDS_WIPER",
		22: "MALWARE_CLASSIFICATION_IDS_WORM",
		99: "MALWARE_CLASSIFICATION_IDS_OTHER",
	}
	MALWARE_CLASSIFICATION_IDS_value = map[string]int32{
		"MALWARE_CLASSIFICATION_IDS_UNKNOWN":                 0,
		"MALWARE_CLASSIFICATION_IDS_ADWARE":                  1,
		"MALWARE_CLASSIFICATION_IDS_BACKDOOR":                2,
		"MALWARE_CLASSIFICATION_IDS_BOT":                     3,
		"MALWARE_CLASSIFICATION_IDS_BOOTKIT":                 4,
		"MALWARE_CLASSIFICATION_IDS_DDOS":                    5,
		"MALWARE_CLASSIFICATION_IDS_DOWNLOADER":              6,
		"MALWARE_CLASSIFICATION_IDS_DROPPER":                 7,
		"MALWARE_CLASSIFICATION_IDS_EXPLOIT_KIT":             8,
		"MALWARE_CLASSIFICATION_IDS_KEYLOGGER":               9,
		"MALWARE_CLASSIFICATION_IDS_RANSOMWARE":              10,
		"MALWARE_CLASSIFICATION_IDS_REMOTE_ACCESS_TROJAN":    11,
		"MALWARE_CLASSIFICATION_IDS_RESOURCE_EXPLOITATION":   13,
		"MALWARE_CLASSIFICATION_IDS_ROGUE_SECURITY_SOFTWARE": 14,
		"MALWARE_CLASSIFICATION_IDS_ROOTKIT":                 15,
		"MALWARE_CLASSIFICATION_IDS_SCREEN_CAPTURE":          16,
		"MALWARE_CLASSIFICATION_IDS_SPYWARE":                 17,
		"MALWARE_CLASSIFICATION_IDS_TROJAN":                  18,
		"MALWARE_CLASSIFICATION_IDS_VIRUS":                   19,
		"MALWARE_CLASSIFICATION_IDS_WEBSHELL":                20,
		"MALWARE_CLASSIFICATION_IDS_WIPER":                   21,
		"MALWARE_CLASSIFICATION_IDS_WORM":                    22,
		"MALWARE_CLASSIFICATION_IDS_OTHER":                   99,
	}
)

func (x MALWARE_CLASSIFICATION_IDS) Enum() *MALWARE_CLASSIFICATION_IDS {
	p := new(MALWARE_CLASSIFICATION_IDS)
	*p = x
	return p
}

func (x MALWARE_CLASSIFICATION_IDS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MALWARE_CLASSIFICATION_IDS) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[19].Descriptor()
}

func (MALWARE_CLASSIFICATION_IDS) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[19]
}

func (x MALWARE_CLASSIFICATION_IDS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MALWARE_CLASSIFICATION_IDS.Descriptor instead.
func (MALWARE_CLASSIFICATION_IDS) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{19}
}

type DATABUCKET_TYPE_ID int32

const (
	DATABUCKET_TYPE_ID_DATABUCKET_TYPE_ID_UNKNOWN    DATABUCKET_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATABUCKET_TYPE_ID_DATABUCKET_TYPE_ID_S_3        DATABUCKET_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATABUCKET_TYPE_ID_DATABUCKET_TYPE_ID_AZURE_BLOB DATABUCKET_TYPE_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	DATABUCKET_TYPE_ID_DATABUCKET_TYPE_ID_GCP_BUCKET DATABUCKET_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATABUCKET_TYPE_ID_DATABUCKET_TYPE_ID_OTHER      DATABUCKET_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATABUCKET_TYPE_ID.
var (
	DATABUCKET_TYPE_ID_name = map[int32]string{
		0:  "DATABUCKET_TYPE_ID_UNKNOWN",
		1:  "DATABUCKET_TYPE_ID_S_3",
		2:  "DATABUCKET_TYPE_ID_AZURE_BLOB",
		3:  "DATABUCKET_TYPE_ID_GCP_BUCKET",
		99: "DATABUCKET_TYPE_ID_OTHER",
	}
	DATABUCKET_TYPE_ID_value = map[string]int32{
		"DATABUCKET_TYPE_ID_UNKNOWN":    0,
		"DATABUCKET_TYPE_ID_S_3":        1,
		"DATABUCKET_TYPE_ID_AZURE_BLOB": 2,
		"DATABUCKET_TYPE_ID_GCP_BUCKET": 3,
		"DATABUCKET_TYPE_ID_OTHER":      99,
	}
)

func (x DATABUCKET_TYPE_ID) Enum() *DATABUCKET_TYPE_ID {
	p := new(DATABUCKET_TYPE_ID)
	*p = x
	return p
}

func (x DATABUCKET_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATABUCKET_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[20].Descriptor()
}

func (DATABUCKET_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[20]
}

func (x DATABUCKET_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATABUCKET_TYPE_ID.Descriptor instead.
func (DATABUCKET_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{20}
}

type TLS_EXTENSION_TYPE_ID int32

const (
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_UNKNOWN                                TLS_EXTENSION_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_MAXIMUM_FRAGMENT_LENGTH                TLS_EXTENSION_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_STATUS_REQUEST                         TLS_EXTENSION_TYPE_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SUPPORTED_GROUPS                       TLS_EXTENSION_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS                   TLS_EXTENSION_TYPE_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_USE_SRTP                               TLS_EXTENSION_TYPE_ID = 14 // Type: OCSF_VALUE; EnumValue: 14;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_HEARTBEAT                              TLS_EXTENSION_TYPE_ID = 15 // EnumValue: 15; Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_APPLICATION_LAYER_PROTOCOL_NEGOTIATION TLS_EXTENSION_TYPE_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SIGNED_CERTIFICATE_TIMESTAMP           TLS_EXTENSION_TYPE_ID = 18 // EnumValue: 18; Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_CLIENT_CERTIFICATE_TYPE                TLS_EXTENSION_TYPE_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SERVER_CERTIFICATE_TYPE                TLS_EXTENSION_TYPE_ID = 20 // EnumValue: 20; Type: OCSF_VALUE;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_PADDING                                TLS_EXTENSION_TYPE_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_PRE_SHARED_KEY                         TLS_EXTENSION_TYPE_ID = 41 // Type: OCSF_VALUE; EnumValue: 41;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_EARLY_DATA                             TLS_EXTENSION_TYPE_ID = 42 // Type: OCSF_VALUE; EnumValue: 42;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SUPPORTED_VERSIONS                     TLS_EXTENSION_TYPE_ID = 43 // Type: OCSF_VALUE; EnumValue: 43;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_COOKIE                                 TLS_EXTENSION_TYPE_ID = 44 // Type: OCSF_VALUE; EnumValue: 44;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_PSK_KEY_EXCHANGE_MODES                 TLS_EXTENSION_TYPE_ID = 45 // Type: OCSF_VALUE; EnumValue: 45;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_CERTIFICATE_AUTHORITIES                TLS_EXTENSION_TYPE_ID = 47 // Type: OCSF_VALUE; EnumValue: 47;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_OID_FILTERS                            TLS_EXTENSION_TYPE_ID = 48 // Type: OCSF_VALUE; EnumValue: 48;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_POST_HANDSHAKE_AUTH                    TLS_EXTENSION_TYPE_ID = 49 // Type: OCSF_VALUE; EnumValue: 49;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS_CERT              TLS_EXTENSION_TYPE_ID = 50 // Type: OCSF_VALUE; EnumValue: 50;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_KEY_SHARE                              TLS_EXTENSION_TYPE_ID = 51 // Type: OCSF_VALUE; EnumValue: 51;
	TLS_EXTENSION_TYPE_ID_TLS_EXTENSION_TYPE_ID_OTHER                                  TLS_EXTENSION_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for TLS_EXTENSION_TYPE_ID.
var (
	TLS_EXTENSION_TYPE_ID_name = map[int32]string{
		0:  "TLS_EXTENSION_TYPE_ID_UNKNOWN",
		1:  "TLS_EXTENSION_TYPE_ID_MAXIMUM_FRAGMENT_LENGTH",
		5:  "TLS_EXTENSION_TYPE_ID_STATUS_REQUEST",
		10: "TLS_EXTENSION_TYPE_ID_SUPPORTED_GROUPS",
		13: "TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS",
		14: "TLS_EXTENSION_TYPE_ID_USE_SRTP",
		15: "TLS_EXTENSION_TYPE_ID_HEARTBEAT",
		16: "TLS_EXTENSION_TYPE_ID_APPLICATION_LAYER_PROTOCOL_NEGOTIATION",
		18: "TLS_EXTENSION_TYPE_ID_SIGNED_CERTIFICATE_TIMESTAMP",
		19: "TLS_EXTENSION_TYPE_ID_CLIENT_CERTIFICATE_TYPE",
		20: "TLS_EXTENSION_TYPE_ID_SERVER_CERTIFICATE_TYPE",
		21: "TLS_EXTENSION_TYPE_ID_PADDING",
		41: "TLS_EXTENSION_TYPE_ID_PRE_SHARED_KEY",
		42: "TLS_EXTENSION_TYPE_ID_EARLY_DATA",
		43: "TLS_EXTENSION_TYPE_ID_SUPPORTED_VERSIONS",
		44: "TLS_EXTENSION_TYPE_ID_COOKIE",
		45: "TLS_EXTENSION_TYPE_ID_PSK_KEY_EXCHANGE_MODES",
		47: "TLS_EXTENSION_TYPE_ID_CERTIFICATE_AUTHORITIES",
		48: "TLS_EXTENSION_TYPE_ID_OID_FILTERS",
		49: "TLS_EXTENSION_TYPE_ID_POST_HANDSHAKE_AUTH",
		50: "TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS_CERT",
		51: "TLS_EXTENSION_TYPE_ID_KEY_SHARE",
		99: "TLS_EXTENSION_TYPE_ID_OTHER",
	}
	TLS_EXTENSION_TYPE_ID_value = map[string]int32{
		"TLS_EXTENSION_TYPE_ID_UNKNOWN":                                0,
		"TLS_EXTENSION_TYPE_ID_MAXIMUM_FRAGMENT_LENGTH":                1,
		"TLS_EXTENSION_TYPE_ID_STATUS_REQUEST":                         5,
		"TLS_EXTENSION_TYPE_ID_SUPPORTED_GROUPS":                       10,
		"TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS":                   13,
		"TLS_EXTENSION_TYPE_ID_USE_SRTP":                               14,
		"TLS_EXTENSION_TYPE_ID_HEARTBEAT":                              15,
		"TLS_EXTENSION_TYPE_ID_APPLICATION_LAYER_PROTOCOL_NEGOTIATION": 16,
		"TLS_EXTENSION_TYPE_ID_SIGNED_CERTIFICATE_TIMESTAMP":           18,
		"TLS_EXTENSION_TYPE_ID_CLIENT_CERTIFICATE_TYPE":                19,
		"TLS_EXTENSION_TYPE_ID_SERVER_CERTIFICATE_TYPE":                20,
		"TLS_EXTENSION_TYPE_ID_PADDING":                                21,
		"TLS_EXTENSION_TYPE_ID_PRE_SHARED_KEY":                         41,
		"TLS_EXTENSION_TYPE_ID_EARLY_DATA":                             42,
		"TLS_EXTENSION_TYPE_ID_SUPPORTED_VERSIONS":                     43,
		"TLS_EXTENSION_TYPE_ID_COOKIE":                                 44,
		"TLS_EXTENSION_TYPE_ID_PSK_KEY_EXCHANGE_MODES":                 45,
		"TLS_EXTENSION_TYPE_ID_CERTIFICATE_AUTHORITIES":                47,
		"TLS_EXTENSION_TYPE_ID_OID_FILTERS":                            48,
		"TLS_EXTENSION_TYPE_ID_POST_HANDSHAKE_AUTH":                    49,
		"TLS_EXTENSION_TYPE_ID_SIGNATURE_ALGORITHMS_CERT":              50,
		"TLS_EXTENSION_TYPE_ID_KEY_SHARE":                              51,
		"TLS_EXTENSION_TYPE_ID_OTHER":                                  99,
	}
)

func (x TLS_EXTENSION_TYPE_ID) Enum() *TLS_EXTENSION_TYPE_ID {
	p := new(TLS_EXTENSION_TYPE_ID)
	*p = x
	return p
}

func (x TLS_EXTENSION_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLS_EXTENSION_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[21].Descriptor()
}

func (TLS_EXTENSION_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[21]
}

func (x TLS_EXTENSION_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLS_EXTENSION_TYPE_ID.Descriptor instead.
func (TLS_EXTENSION_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{21}
}

type DATABASE_TYPE_ID int32

const (
	DATABASE_TYPE_ID_DATABASE_TYPE_ID_UNKNOWN         DATABASE_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATABASE_TYPE_ID_DATABASE_TYPE_ID_RELATIONAL      DATABASE_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATABASE_TYPE_ID_DATABASE_TYPE_ID_NETWORK         DATABASE_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATABASE_TYPE_ID_DATABASE_TYPE_ID_OBJECT_ORIENTED DATABASE_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATABASE_TYPE_ID_DATABASE_TYPE_ID_CENTRALIZED     DATABASE_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATABASE_TYPE_ID_DATABASE_TYPE_ID_OPERATIONAL     DATABASE_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATABASE_TYPE_ID_DATABASE_TYPE_ID_NO_SQL          DATABASE_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATABASE_TYPE_ID_DATABASE_TYPE_ID_OTHER           DATABASE_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATABASE_TYPE_ID.
var (
	DATABASE_TYPE_ID_name = map[int32]string{
		0:  "DATABASE_TYPE_ID_UNKNOWN",
		1:  "DATABASE_TYPE_ID_RELATIONAL",
		2:  "DATABASE_TYPE_ID_NETWORK",
		3:  "DATABASE_TYPE_ID_OBJECT_ORIENTED",
		4:  "DATABASE_TYPE_ID_CENTRALIZED",
		5:  "DATABASE_TYPE_ID_OPERATIONAL",
		6:  "DATABASE_TYPE_ID_NO_SQL",
		99: "DATABASE_TYPE_ID_OTHER",
	}
	DATABASE_TYPE_ID_value = map[string]int32{
		"DATABASE_TYPE_ID_UNKNOWN":         0,
		"DATABASE_TYPE_ID_RELATIONAL":      1,
		"DATABASE_TYPE_ID_NETWORK":         2,
		"DATABASE_TYPE_ID_OBJECT_ORIENTED": 3,
		"DATABASE_TYPE_ID_CENTRALIZED":     4,
		"DATABASE_TYPE_ID_OPERATIONAL":     5,
		"DATABASE_TYPE_ID_NO_SQL":          6,
		"DATABASE_TYPE_ID_OTHER":           99,
	}
)

func (x DATABASE_TYPE_ID) Enum() *DATABASE_TYPE_ID {
	p := new(DATABASE_TYPE_ID)
	*p = x
	return p
}

func (x DATABASE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATABASE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[22].Descriptor()
}

func (DATABASE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[22]
}

func (x DATABASE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATABASE_TYPE_ID.Descriptor instead.
func (DATABASE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{22}
}

type COMPLIANCE_STATUS_ID int32

const (
	COMPLIANCE_STATUS_ID_COMPLIANCE_STATUS_ID_UNKNOWN COMPLIANCE_STATUS_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	COMPLIANCE_STATUS_ID_COMPLIANCE_STATUS_ID_SUCCESS COMPLIANCE_STATUS_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	COMPLIANCE_STATUS_ID_COMPLIANCE_STATUS_ID_FAILURE COMPLIANCE_STATUS_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	COMPLIANCE_STATUS_ID_COMPLIANCE_STATUS_ID_FAIL    COMPLIANCE_STATUS_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	COMPLIANCE_STATUS_ID_COMPLIANCE_STATUS_ID_OTHER   COMPLIANCE_STATUS_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for COMPLIANCE_STATUS_ID.
var (
	COMPLIANCE_STATUS_ID_name = map[int32]string{
		0:  "COMPLIANCE_STATUS_ID_UNKNOWN",
		1:  "COMPLIANCE_STATUS_ID_SUCCESS",
		2:  "COMPLIANCE_STATUS_ID_FAILURE",
		3:  "COMPLIANCE_STATUS_ID_FAIL",
		99: "COMPLIANCE_STATUS_ID_OTHER",
	}
	COMPLIANCE_STATUS_ID_value = map[string]int32{
		"COMPLIANCE_STATUS_ID_UNKNOWN": 0,
		"COMPLIANCE_STATUS_ID_SUCCESS": 1,
		"COMPLIANCE_STATUS_ID_FAILURE": 2,
		"COMPLIANCE_STATUS_ID_FAIL":    3,
		"COMPLIANCE_STATUS_ID_OTHER":   99,
	}
)

func (x COMPLIANCE_STATUS_ID) Enum() *COMPLIANCE_STATUS_ID {
	p := new(COMPLIANCE_STATUS_ID)
	*p = x
	return p
}

func (x COMPLIANCE_STATUS_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COMPLIANCE_STATUS_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[23].Descriptor()
}

func (COMPLIANCE_STATUS_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[23]
}

func (x COMPLIANCE_STATUS_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COMPLIANCE_STATUS_ID.Descriptor instead.
func (COMPLIANCE_STATUS_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{23}
}

type DATA_SECURITY_DATA_LIFECYCLE_STATE_ID int32

const (
	DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_UNKNOWN         DATA_SECURITY_DATA_LIFECYCLE_STATE_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_AT_REST    DATA_SECURITY_DATA_LIFECYCLE_STATE_ID = 1 // Type: OCSF_VALUE; EnumValue: 1;
	DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_IN_TRANSIT DATA_SECURITY_DATA_LIFECYCLE_STATE_ID = 2 // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_IN_USE     DATA_SECURITY_DATA_LIFECYCLE_STATE_ID = 3 // EnumValue: 3; Type: OCSF_VALUE;
)

// Enum value maps for DATA_SECURITY_DATA_LIFECYCLE_STATE_ID.
var (
	DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_name = map[int32]string{
		0: "DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_UNKNOWN",
		1: "DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_AT_REST",
		2: "DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_IN_TRANSIT",
		3: "DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_IN_USE",
	}
	DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_value = map[string]int32{
		"DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_UNKNOWN":         0,
		"DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_AT_REST":    1,
		"DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_IN_TRANSIT": 2,
		"DATA_SECURITY_DATA_LIFECYCLE_STATE_ID_DATA_IN_USE":     3,
	}
)

func (x DATA_SECURITY_DATA_LIFECYCLE_STATE_ID) Enum() *DATA_SECURITY_DATA_LIFECYCLE_STATE_ID {
	p := new(DATA_SECURITY_DATA_LIFECYCLE_STATE_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_DATA_LIFECYCLE_STATE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_DATA_LIFECYCLE_STATE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[24].Descriptor()
}

func (DATA_SECURITY_DATA_LIFECYCLE_STATE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[24]
}

func (x DATA_SECURITY_DATA_LIFECYCLE_STATE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_DATA_LIFECYCLE_STATE_ID.Descriptor instead.
func (DATA_SECURITY_DATA_LIFECYCLE_STATE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{24}
}

type REPUTATION_SCORE_ID int32

const (
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_UNKNOWN            REPUTATION_SCORE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_VERY_SAFE          REPUTATION_SCORE_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_SAFE               REPUTATION_SCORE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_PROBABLY_SAFE      REPUTATION_SCORE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_LEANS_SAFE         REPUTATION_SCORE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_MAY_NOT_BE_SAFE    REPUTATION_SCORE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_EXERCISE_CAUTION   REPUTATION_SCORE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_SUSPICIOUS_RISKY   REPUTATION_SCORE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_POSSIBLY_MALICIOUS REPUTATION_SCORE_ID = 8  // EnumValue: 8; Type: OCSF_VALUE;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_PROBABLY_MALICIOUS REPUTATION_SCORE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_MALICIOUS          REPUTATION_SCORE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	REPUTATION_SCORE_ID_REPUTATION_SCORE_ID_OTHER              REPUTATION_SCORE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for REPUTATION_SCORE_ID.
var (
	REPUTATION_SCORE_ID_name = map[int32]string{
		0:  "REPUTATION_SCORE_ID_UNKNOWN",
		1:  "REPUTATION_SCORE_ID_VERY_SAFE",
		2:  "REPUTATION_SCORE_ID_SAFE",
		3:  "REPUTATION_SCORE_ID_PROBABLY_SAFE",
		4:  "REPUTATION_SCORE_ID_LEANS_SAFE",
		5:  "REPUTATION_SCORE_ID_MAY_NOT_BE_SAFE",
		6:  "REPUTATION_SCORE_ID_EXERCISE_CAUTION",
		7:  "REPUTATION_SCORE_ID_SUSPICIOUS_RISKY",
		8:  "REPUTATION_SCORE_ID_POSSIBLY_MALICIOUS",
		9:  "REPUTATION_SCORE_ID_PROBABLY_MALICIOUS",
		10: "REPUTATION_SCORE_ID_MALICIOUS",
		99: "REPUTATION_SCORE_ID_OTHER",
	}
	REPUTATION_SCORE_ID_value = map[string]int32{
		"REPUTATION_SCORE_ID_UNKNOWN":            0,
		"REPUTATION_SCORE_ID_VERY_SAFE":          1,
		"REPUTATION_SCORE_ID_SAFE":               2,
		"REPUTATION_SCORE_ID_PROBABLY_SAFE":      3,
		"REPUTATION_SCORE_ID_LEANS_SAFE":         4,
		"REPUTATION_SCORE_ID_MAY_NOT_BE_SAFE":    5,
		"REPUTATION_SCORE_ID_EXERCISE_CAUTION":   6,
		"REPUTATION_SCORE_ID_SUSPICIOUS_RISKY":   7,
		"REPUTATION_SCORE_ID_POSSIBLY_MALICIOUS": 8,
		"REPUTATION_SCORE_ID_PROBABLY_MALICIOUS": 9,
		"REPUTATION_SCORE_ID_MALICIOUS":          10,
		"REPUTATION_SCORE_ID_OTHER":              99,
	}
)

func (x REPUTATION_SCORE_ID) Enum() *REPUTATION_SCORE_ID {
	p := new(REPUTATION_SCORE_ID)
	*p = x
	return p
}

func (x REPUTATION_SCORE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REPUTATION_SCORE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[25].Descriptor()
}

func (REPUTATION_SCORE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[25]
}

func (x REPUTATION_SCORE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REPUTATION_SCORE_ID.Descriptor instead.
func (REPUTATION_SCORE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{25}
}

type FILE_TYPE_ID int32

const (
	FILE_TYPE_ID_FILE_TYPE_ID_UNKNOWN          FILE_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FILE_TYPE_ID_FILE_TYPE_ID_REGULAR_FILE     FILE_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FILE_TYPE_ID_FILE_TYPE_ID_FOLDER           FILE_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FILE_TYPE_ID_FILE_TYPE_ID_CHARACTER_DEVICE FILE_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FILE_TYPE_ID_FILE_TYPE_ID_BLOCK_DEVICE     FILE_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FILE_TYPE_ID_FILE_TYPE_ID_LOCAL_SOCKET     FILE_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FILE_TYPE_ID_FILE_TYPE_ID_NAMED_PIPE       FILE_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FILE_TYPE_ID_FILE_TYPE_ID_SYMBOLIC_LINK    FILE_TYPE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	FILE_TYPE_ID_FILE_TYPE_ID_OTHER            FILE_TYPE_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for FILE_TYPE_ID.
var (
	FILE_TYPE_ID_name = map[int32]string{
		0:  "FILE_TYPE_ID_UNKNOWN",
		1:  "FILE_TYPE_ID_REGULAR_FILE",
		2:  "FILE_TYPE_ID_FOLDER",
		3:  "FILE_TYPE_ID_CHARACTER_DEVICE",
		4:  "FILE_TYPE_ID_BLOCK_DEVICE",
		5:  "FILE_TYPE_ID_LOCAL_SOCKET",
		6:  "FILE_TYPE_ID_NAMED_PIPE",
		7:  "FILE_TYPE_ID_SYMBOLIC_LINK",
		99: "FILE_TYPE_ID_OTHER",
	}
	FILE_TYPE_ID_value = map[string]int32{
		"FILE_TYPE_ID_UNKNOWN":          0,
		"FILE_TYPE_ID_REGULAR_FILE":     1,
		"FILE_TYPE_ID_FOLDER":           2,
		"FILE_TYPE_ID_CHARACTER_DEVICE": 3,
		"FILE_TYPE_ID_BLOCK_DEVICE":     4,
		"FILE_TYPE_ID_LOCAL_SOCKET":     5,
		"FILE_TYPE_ID_NAMED_PIPE":       6,
		"FILE_TYPE_ID_SYMBOLIC_LINK":    7,
		"FILE_TYPE_ID_OTHER":            99,
	}
)

func (x FILE_TYPE_ID) Enum() *FILE_TYPE_ID {
	p := new(FILE_TYPE_ID)
	*p = x
	return p
}

func (x FILE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FILE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[26].Descriptor()
}

func (FILE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[26]
}

func (x FILE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FILE_TYPE_ID.Descriptor instead.
func (FILE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{26}
}

type DATA_SECURITY_CONFIDENTIALITY_ID int32

const (
	DATA_SECURITY_CONFIDENTIALITY_ID_DATA_SECURITY_CONFIDENTIALITY_ID_UNKNOWN          DATA_SECURITY_CONFIDENTIALITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_SECURITY_CONFIDENTIALITY_ID_DATA_SECURITY_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL DATA_SECURITY_CONFIDENTIALITY_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	DATA_SECURITY_CONFIDENTIALITY_ID_DATA_SECURITY_CONFIDENTIALITY_ID_CONFIDENTIAL     DATA_SECURITY_CONFIDENTIALITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_CONFIDENTIALITY_ID_DATA_SECURITY_CONFIDENTIALITY_ID_SECRET           DATA_SECURITY_CONFIDENTIALITY_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	DATA_SECURITY_CONFIDENTIALITY_ID_DATA_SECURITY_CONFIDENTIALITY_ID_TOP_SECRET       DATA_SECURITY_CONFIDENTIALITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATA_SECURITY_CONFIDENTIALITY_ID_DATA_SECURITY_CONFIDENTIALITY_ID_PRIVATE          DATA_SECURITY_CONFIDENTIALITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATA_SECURITY_CONFIDENTIALITY_ID_DATA_SECURITY_CONFIDENTIALITY_ID_RESTRICTED       DATA_SECURITY_CONFIDENTIALITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATA_SECURITY_CONFIDENTIALITY_ID_DATA_SECURITY_CONFIDENTIALITY_ID_OTHER            DATA_SECURITY_CONFIDENTIALITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_CONFIDENTIALITY_ID.
var (
	DATA_SECURITY_CONFIDENTIALITY_ID_name = map[int32]string{
		0:  "DATA_SECURITY_CONFIDENTIALITY_ID_UNKNOWN",
		1:  "DATA_SECURITY_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL",
		2:  "DATA_SECURITY_CONFIDENTIALITY_ID_CONFIDENTIAL",
		3:  "DATA_SECURITY_CONFIDENTIALITY_ID_SECRET",
		4:  "DATA_SECURITY_CONFIDENTIALITY_ID_TOP_SECRET",
		5:  "DATA_SECURITY_CONFIDENTIALITY_ID_PRIVATE",
		6:  "DATA_SECURITY_CONFIDENTIALITY_ID_RESTRICTED",
		99: "DATA_SECURITY_CONFIDENTIALITY_ID_OTHER",
	}
	DATA_SECURITY_CONFIDENTIALITY_ID_value = map[string]int32{
		"DATA_SECURITY_CONFIDENTIALITY_ID_UNKNOWN":          0,
		"DATA_SECURITY_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL": 1,
		"DATA_SECURITY_CONFIDENTIALITY_ID_CONFIDENTIAL":     2,
		"DATA_SECURITY_CONFIDENTIALITY_ID_SECRET":           3,
		"DATA_SECURITY_CONFIDENTIALITY_ID_TOP_SECRET":       4,
		"DATA_SECURITY_CONFIDENTIALITY_ID_PRIVATE":          5,
		"DATA_SECURITY_CONFIDENTIALITY_ID_RESTRICTED":       6,
		"DATA_SECURITY_CONFIDENTIALITY_ID_OTHER":            99,
	}
)

func (x DATA_SECURITY_CONFIDENTIALITY_ID) Enum() *DATA_SECURITY_CONFIDENTIALITY_ID {
	p := new(DATA_SECURITY_CONFIDENTIALITY_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_CONFIDENTIALITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_CONFIDENTIALITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[27].Descriptor()
}

func (DATA_SECURITY_CONFIDENTIALITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[27]
}

func (x DATA_SECURITY_CONFIDENTIALITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_CONFIDENTIALITY_ID.Descriptor instead.
func (DATA_SECURITY_CONFIDENTIALITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{27}
}

type AGENT_TYPE_ID int32

const (
	AGENT_TYPE_ID_AGENT_TYPE_ID_UNKNOWN                              AGENT_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AGENT_TYPE_ID_AGENT_TYPE_ID_ENDPOINT_DETECTION_AND_RESPONSE      AGENT_TYPE_ID = 1  // EnumValue: 1; Type: OCSF_VALUE;
	AGENT_TYPE_ID_AGENT_TYPE_ID_DATA_LOSS_PREVENTION                 AGENT_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AGENT_TYPE_ID_AGENT_TYPE_ID_BACKUP_RECOVERY                      AGENT_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	AGENT_TYPE_ID_AGENT_TYPE_ID_PERFORMANCE_MONITORING_OBSERVABILITY AGENT_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	AGENT_TYPE_ID_AGENT_TYPE_ID_VULNERABILITY_MANAGEMENT             AGENT_TYPE_ID = 5  // EnumValue: 5; Type: OCSF_VALUE;
	AGENT_TYPE_ID_AGENT_TYPE_ID_LOG_FORWARDING                       AGENT_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	AGENT_TYPE_ID_AGENT_TYPE_ID_MOBILE_DEVICE_MANAGEMENT             AGENT_TYPE_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	AGENT_TYPE_ID_AGENT_TYPE_ID_CONFIGURATION_MANAGEMENT             AGENT_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	AGENT_TYPE_ID_AGENT_TYPE_ID_REMOTE_ACCESS                        AGENT_TYPE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	AGENT_TYPE_ID_AGENT_TYPE_ID_OTHER                                AGENT_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AGENT_TYPE_ID.
var (
	AGENT_TYPE_ID_name = map[int32]string{
		0:  "AGENT_TYPE_ID_UNKNOWN",
		1:  "AGENT_TYPE_ID_ENDPOINT_DETECTION_AND_RESPONSE",
		2:  "AGENT_TYPE_ID_DATA_LOSS_PREVENTION",
		3:  "AGENT_TYPE_ID_BACKUP_RECOVERY",
		4:  "AGENT_TYPE_ID_PERFORMANCE_MONITORING_OBSERVABILITY",
		5:  "AGENT_TYPE_ID_VULNERABILITY_MANAGEMENT",
		6:  "AGENT_TYPE_ID_LOG_FORWARDING",
		7:  "AGENT_TYPE_ID_MOBILE_DEVICE_MANAGEMENT",
		8:  "AGENT_TYPE_ID_CONFIGURATION_MANAGEMENT",
		9:  "AGENT_TYPE_ID_REMOTE_ACCESS",
		99: "AGENT_TYPE_ID_OTHER",
	}
	AGENT_TYPE_ID_value = map[string]int32{
		"AGENT_TYPE_ID_UNKNOWN":                              0,
		"AGENT_TYPE_ID_ENDPOINT_DETECTION_AND_RESPONSE":      1,
		"AGENT_TYPE_ID_DATA_LOSS_PREVENTION":                 2,
		"AGENT_TYPE_ID_BACKUP_RECOVERY":                      3,
		"AGENT_TYPE_ID_PERFORMANCE_MONITORING_OBSERVABILITY": 4,
		"AGENT_TYPE_ID_VULNERABILITY_MANAGEMENT":             5,
		"AGENT_TYPE_ID_LOG_FORWARDING":                       6,
		"AGENT_TYPE_ID_MOBILE_DEVICE_MANAGEMENT":             7,
		"AGENT_TYPE_ID_CONFIGURATION_MANAGEMENT":             8,
		"AGENT_TYPE_ID_REMOTE_ACCESS":                        9,
		"AGENT_TYPE_ID_OTHER":                                99,
	}
)

func (x AGENT_TYPE_ID) Enum() *AGENT_TYPE_ID {
	p := new(AGENT_TYPE_ID)
	*p = x
	return p
}

func (x AGENT_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AGENT_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[28].Descriptor()
}

func (AGENT_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[28]
}

func (x AGENT_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AGENT_TYPE_ID.Descriptor instead.
func (AGENT_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{28}
}

type NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID int32

const (
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_UNKNOWN                            NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_4_I_PV_4 NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_6_I_PV_6 NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_OTHER                              NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID.
var (
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_name = map[int32]string{
		0:  "NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_UNKNOWN",
		4:  "NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_4_I_PV_4",
		6:  "NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_6_I_PV_6",
		99: "NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_OTHER",
	}
	NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_value = map[string]int32{
		"NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_UNKNOWN":                            0,
		"NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_4_I_PV_4": 4,
		"NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_6_I_PV_6": 6,
		"NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID_OTHER":                              99,
	}
)

func (x NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) Enum() *NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID {
	p := new(NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID)
	*p = x
	return p
}

func (x NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[29].Descriptor()
}

func (NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[29]
}

func (x NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID.Descriptor instead.
func (NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{29}
}

type SCAN_TYPE_ID int32

const (
	SCAN_TYPE_ID_SCAN_TYPE_ID_UNKNOWN           SCAN_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	SCAN_TYPE_ID_SCAN_TYPE_ID_MANUAL            SCAN_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	SCAN_TYPE_ID_SCAN_TYPE_ID_SCHEDULED         SCAN_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	SCAN_TYPE_ID_SCAN_TYPE_ID_UPDATED_CONTENT   SCAN_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	SCAN_TYPE_ID_SCAN_TYPE_ID_QUARANTINED_ITEMS SCAN_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	SCAN_TYPE_ID_SCAN_TYPE_ID_ATTACHED_MEDIA    SCAN_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	SCAN_TYPE_ID_SCAN_TYPE_ID_USER_LOGON        SCAN_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	SCAN_TYPE_ID_SCAN_TYPE_ID_ELAM              SCAN_TYPE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	SCAN_TYPE_ID_SCAN_TYPE_ID_OTHER             SCAN_TYPE_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for SCAN_TYPE_ID.
var (
	SCAN_TYPE_ID_name = map[int32]string{
		0:  "SCAN_TYPE_ID_UNKNOWN",
		1:  "SCAN_TYPE_ID_MANUAL",
		2:  "SCAN_TYPE_ID_SCHEDULED",
		3:  "SCAN_TYPE_ID_UPDATED_CONTENT",
		4:  "SCAN_TYPE_ID_QUARANTINED_ITEMS",
		5:  "SCAN_TYPE_ID_ATTACHED_MEDIA",
		6:  "SCAN_TYPE_ID_USER_LOGON",
		7:  "SCAN_TYPE_ID_ELAM",
		99: "SCAN_TYPE_ID_OTHER",
	}
	SCAN_TYPE_ID_value = map[string]int32{
		"SCAN_TYPE_ID_UNKNOWN":           0,
		"SCAN_TYPE_ID_MANUAL":            1,
		"SCAN_TYPE_ID_SCHEDULED":         2,
		"SCAN_TYPE_ID_UPDATED_CONTENT":   3,
		"SCAN_TYPE_ID_QUARANTINED_ITEMS": 4,
		"SCAN_TYPE_ID_ATTACHED_MEDIA":    5,
		"SCAN_TYPE_ID_USER_LOGON":        6,
		"SCAN_TYPE_ID_ELAM":              7,
		"SCAN_TYPE_ID_OTHER":             99,
	}
)

func (x SCAN_TYPE_ID) Enum() *SCAN_TYPE_ID {
	p := new(SCAN_TYPE_ID)
	*p = x
	return p
}

func (x SCAN_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCAN_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[30].Descriptor()
}

func (SCAN_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[30]
}

func (x SCAN_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCAN_TYPE_ID.Descriptor instead.
func (SCAN_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{30}
}

type NETWORK_INTERFACE_TYPE_ID int32

const (
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_UNKNOWN  NETWORK_INTERFACE_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_WIRED    NETWORK_INTERFACE_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_WIRELESS NETWORK_INTERFACE_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_MOBILE   NETWORK_INTERFACE_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_TUNNEL   NETWORK_INTERFACE_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_INTERFACE_TYPE_ID_NETWORK_INTERFACE_TYPE_ID_OTHER    NETWORK_INTERFACE_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_INTERFACE_TYPE_ID.
var (
	NETWORK_INTERFACE_TYPE_ID_name = map[int32]string{
		0:  "NETWORK_INTERFACE_TYPE_ID_UNKNOWN",
		1:  "NETWORK_INTERFACE_TYPE_ID_WIRED",
		2:  "NETWORK_INTERFACE_TYPE_ID_WIRELESS",
		3:  "NETWORK_INTERFACE_TYPE_ID_MOBILE",
		4:  "NETWORK_INTERFACE_TYPE_ID_TUNNEL",
		99: "NETWORK_INTERFACE_TYPE_ID_OTHER",
	}
	NETWORK_INTERFACE_TYPE_ID_value = map[string]int32{
		"NETWORK_INTERFACE_TYPE_ID_UNKNOWN":  0,
		"NETWORK_INTERFACE_TYPE_ID_WIRED":    1,
		"NETWORK_INTERFACE_TYPE_ID_WIRELESS": 2,
		"NETWORK_INTERFACE_TYPE_ID_MOBILE":   3,
		"NETWORK_INTERFACE_TYPE_ID_TUNNEL":   4,
		"NETWORK_INTERFACE_TYPE_ID_OTHER":    99,
	}
)

func (x NETWORK_INTERFACE_TYPE_ID) Enum() *NETWORK_INTERFACE_TYPE_ID {
	p := new(NETWORK_INTERFACE_TYPE_ID)
	*p = x
	return p
}

func (x NETWORK_INTERFACE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_INTERFACE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[31].Descriptor()
}

func (NETWORK_INTERFACE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[31]
}

func (x NETWORK_INTERFACE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_INTERFACE_TYPE_ID.Descriptor instead.
func (NETWORK_INTERFACE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{31}
}

type OS_TYPE_ID int32

const (
	OS_TYPE_ID_OS_TYPE_ID_UNKNOWN        OS_TYPE_ID = 0   // Type: OCSF_VALUE; EnumValue: 0;
	OS_TYPE_ID_OS_TYPE_ID_OTHER          OS_TYPE_ID = 99  // Type: OCSF_VALUE; EnumValue: 99;
	OS_TYPE_ID_OS_TYPE_ID_WINDOWS        OS_TYPE_ID = 100 // Type: OCSF_VALUE; EnumValue: 100;
	OS_TYPE_ID_OS_TYPE_ID_WINDOWS_MOBILE OS_TYPE_ID = 101 // EnumValue: 101; Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_LINUX          OS_TYPE_ID = 200 // EnumValue: 200; Type: OCSF_VALUE;
	OS_TYPE_ID_OS_TYPE_ID_ANDROID        OS_TYPE_ID = 201 // Type: OCSF_VALUE; EnumValue: 201;
	OS_TYPE_ID_OS_TYPE_ID_MAC_OS         OS_TYPE_ID = 300 // Type: OCSF_VALUE; EnumValue: 300;
	OS_TYPE_ID_OS_TYPE_ID_I_OS           OS_TYPE_ID = 301 // Type: OCSF_VALUE; EnumValue: 301;
	OS_TYPE_ID_OS_TYPE_ID_I_PAD_OS       OS_TYPE_ID = 302 // Type: OCSF_VALUE; EnumValue: 302;
	OS_TYPE_ID_OS_TYPE_ID_SOLARIS        OS_TYPE_ID = 400 // Type: OCSF_VALUE; EnumValue: 400;
	OS_TYPE_ID_OS_TYPE_ID_AIX            OS_TYPE_ID = 401 // Type: OCSF_VALUE; EnumValue: 401;
	OS_TYPE_ID_OS_TYPE_ID_HP_UX          OS_TYPE_ID = 402 // EnumValue: 402; Type: OCSF_VALUE;
)

// Enum value maps for OS_TYPE_ID.
var (
	OS_TYPE_ID_name = map[int32]string{
		0:   "OS_TYPE_ID_UNKNOWN",
		99:  "OS_TYPE_ID_OTHER",
		100: "OS_TYPE_ID_WINDOWS",
		101: "OS_TYPE_ID_WINDOWS_MOBILE",
		200: "OS_TYPE_ID_LINUX",
		201: "OS_TYPE_ID_ANDROID",
		300: "OS_TYPE_ID_MAC_OS",
		301: "OS_TYPE_ID_I_OS",
		302: "OS_TYPE_ID_I_PAD_OS",
		400: "OS_TYPE_ID_SOLARIS",
		401: "OS_TYPE_ID_AIX",
		402: "OS_TYPE_ID_HP_UX",
	}
	OS_TYPE_ID_value = map[string]int32{
		"OS_TYPE_ID_UNKNOWN":        0,
		"OS_TYPE_ID_OTHER":          99,
		"OS_TYPE_ID_WINDOWS":        100,
		"OS_TYPE_ID_WINDOWS_MOBILE": 101,
		"OS_TYPE_ID_LINUX":          200,
		"OS_TYPE_ID_ANDROID":        201,
		"OS_TYPE_ID_MAC_OS":         300,
		"OS_TYPE_ID_I_OS":           301,
		"OS_TYPE_ID_I_PAD_OS":       302,
		"OS_TYPE_ID_SOLARIS":        400,
		"OS_TYPE_ID_AIX":            401,
		"OS_TYPE_ID_HP_UX":          402,
	}
)

func (x OS_TYPE_ID) Enum() *OS_TYPE_ID {
	p := new(OS_TYPE_ID)
	*p = x
	return p
}

func (x OS_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OS_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[32].Descriptor()
}

func (OS_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[32]
}

func (x OS_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OS_TYPE_ID.Descriptor instead.
func (OS_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{32}
}

type DEVICE_TYPE_ID int32

const (
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_UNKNOWN  DEVICE_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_SERVER   DEVICE_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_DESKTOP  DEVICE_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_LAPTOP   DEVICE_TYPE_ID = 3  // EnumValue: 3; Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_TABLET   DEVICE_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_MOBILE   DEVICE_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_VIRTUAL  DEVICE_TYPE_ID = 6  // EnumValue: 6; Type: OCSF_VALUE;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_IOT      DEVICE_TYPE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_BROWSER  DEVICE_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_FIREWALL DEVICE_TYPE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_SWITCH   DEVICE_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_HUB      DEVICE_TYPE_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	DEVICE_TYPE_ID_DEVICE_TYPE_ID_OTHER    DEVICE_TYPE_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DEVICE_TYPE_ID.
var (
	DEVICE_TYPE_ID_name = map[int32]string{
		0:  "DEVICE_TYPE_ID_UNKNOWN",
		1:  "DEVICE_TYPE_ID_SERVER",
		2:  "DEVICE_TYPE_ID_DESKTOP",
		3:  "DEVICE_TYPE_ID_LAPTOP",
		4:  "DEVICE_TYPE_ID_TABLET",
		5:  "DEVICE_TYPE_ID_MOBILE",
		6:  "DEVICE_TYPE_ID_VIRTUAL",
		7:  "DEVICE_TYPE_ID_IOT",
		8:  "DEVICE_TYPE_ID_BROWSER",
		9:  "DEVICE_TYPE_ID_FIREWALL",
		10: "DEVICE_TYPE_ID_SWITCH",
		11: "DEVICE_TYPE_ID_HUB",
		99: "DEVICE_TYPE_ID_OTHER",
	}
	DEVICE_TYPE_ID_value = map[string]int32{
		"DEVICE_TYPE_ID_UNKNOWN":  0,
		"DEVICE_TYPE_ID_SERVER":   1,
		"DEVICE_TYPE_ID_DESKTOP":  2,
		"DEVICE_TYPE_ID_LAPTOP":   3,
		"DEVICE_TYPE_ID_TABLET":   4,
		"DEVICE_TYPE_ID_MOBILE":   5,
		"DEVICE_TYPE_ID_VIRTUAL":  6,
		"DEVICE_TYPE_ID_IOT":      7,
		"DEVICE_TYPE_ID_BROWSER":  8,
		"DEVICE_TYPE_ID_FIREWALL": 9,
		"DEVICE_TYPE_ID_SWITCH":   10,
		"DEVICE_TYPE_ID_HUB":      11,
		"DEVICE_TYPE_ID_OTHER":    99,
	}
)

func (x DEVICE_TYPE_ID) Enum() *DEVICE_TYPE_ID {
	p := new(DEVICE_TYPE_ID)
	*p = x
	return p
}

func (x DEVICE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[33].Descriptor()
}

func (DEVICE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[33]
}

func (x DEVICE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_TYPE_ID.Descriptor instead.
func (DEVICE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{33}
}

type NETWORK_PROXY_TYPE_ID int32

const (
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_UNKNOWN  NETWORK_PROXY_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_SERVER   NETWORK_PROXY_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_DESKTOP  NETWORK_PROXY_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_LAPTOP   NETWORK_PROXY_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_TABLET   NETWORK_PROXY_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_MOBILE   NETWORK_PROXY_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_VIRTUAL  NETWORK_PROXY_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_IOT      NETWORK_PROXY_TYPE_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_BROWSER  NETWORK_PROXY_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_FIREWALL NETWORK_PROXY_TYPE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_SWITCH   NETWORK_PROXY_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_HUB      NETWORK_PROXY_TYPE_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	NETWORK_PROXY_TYPE_ID_NETWORK_PROXY_TYPE_ID_OTHER    NETWORK_PROXY_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for NETWORK_PROXY_TYPE_ID.
var (
	NETWORK_PROXY_TYPE_ID_name = map[int32]string{
		0:  "NETWORK_PROXY_TYPE_ID_UNKNOWN",
		1:  "NETWORK_PROXY_TYPE_ID_SERVER",
		2:  "NETWORK_PROXY_TYPE_ID_DESKTOP",
		3:  "NETWORK_PROXY_TYPE_ID_LAPTOP",
		4:  "NETWORK_PROXY_TYPE_ID_TABLET",
		5:  "NETWORK_PROXY_TYPE_ID_MOBILE",
		6:  "NETWORK_PROXY_TYPE_ID_VIRTUAL",
		7:  "NETWORK_PROXY_TYPE_ID_IOT",
		8:  "NETWORK_PROXY_TYPE_ID_BROWSER",
		9:  "NETWORK_PROXY_TYPE_ID_FIREWALL",
		10: "NETWORK_PROXY_TYPE_ID_SWITCH",
		11: "NETWORK_PROXY_TYPE_ID_HUB",
		99: "NETWORK_PROXY_TYPE_ID_OTHER",
	}
	NETWORK_PROXY_TYPE_ID_value = map[string]int32{
		"NETWORK_PROXY_TYPE_ID_UNKNOWN":  0,
		"NETWORK_PROXY_TYPE_ID_SERVER":   1,
		"NETWORK_PROXY_TYPE_ID_DESKTOP":  2,
		"NETWORK_PROXY_TYPE_ID_LAPTOP":   3,
		"NETWORK_PROXY_TYPE_ID_TABLET":   4,
		"NETWORK_PROXY_TYPE_ID_MOBILE":   5,
		"NETWORK_PROXY_TYPE_ID_VIRTUAL":  6,
		"NETWORK_PROXY_TYPE_ID_IOT":      7,
		"NETWORK_PROXY_TYPE_ID_BROWSER":  8,
		"NETWORK_PROXY_TYPE_ID_FIREWALL": 9,
		"NETWORK_PROXY_TYPE_ID_SWITCH":   10,
		"NETWORK_PROXY_TYPE_ID_HUB":      11,
		"NETWORK_PROXY_TYPE_ID_OTHER":    99,
	}
)

func (x NETWORK_PROXY_TYPE_ID) Enum() *NETWORK_PROXY_TYPE_ID {
	p := new(NETWORK_PROXY_TYPE_ID)
	*p = x
	return p
}

func (x NETWORK_PROXY_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NETWORK_PROXY_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[34].Descriptor()
}

func (NETWORK_PROXY_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[34]
}

func (x NETWORK_PROXY_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NETWORK_PROXY_TYPE_ID.Descriptor instead.
func (NETWORK_PROXY_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{34}
}

type AUTH_FACTOR_FACTOR_TYPE_ID int32

const (
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_UNKNOWN           AUTH_FACTOR_FACTOR_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_SMS               AUTH_FACTOR_FACTOR_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_SECURITY_QUESTION AUTH_FACTOR_FACTOR_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_PHONE_CALL        AUTH_FACTOR_FACTOR_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_BIOMETRIC         AUTH_FACTOR_FACTOR_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_PUSH_NOTIFICATION AUTH_FACTOR_FACTOR_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_HARDWARE_TOKEN    AUTH_FACTOR_FACTOR_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_OTP               AUTH_FACTOR_FACTOR_TYPE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_EMAIL             AUTH_FACTOR_FACTOR_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_U_2_F             AUTH_FACTOR_FACTOR_TYPE_ID = 9  // Type: OCSF_VALUE; EnumValue: 9;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_WEB_AUTHN         AUTH_FACTOR_FACTOR_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_PASSWORD          AUTH_FACTOR_FACTOR_TYPE_ID = 11 // Type: OCSF_VALUE; EnumValue: 11;
	AUTH_FACTOR_FACTOR_TYPE_ID_AUTH_FACTOR_FACTOR_TYPE_ID_OTHER             AUTH_FACTOR_FACTOR_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for AUTH_FACTOR_FACTOR_TYPE_ID.
var (
	AUTH_FACTOR_FACTOR_TYPE_ID_name = map[int32]string{
		0:  "AUTH_FACTOR_FACTOR_TYPE_ID_UNKNOWN",
		1:  "AUTH_FACTOR_FACTOR_TYPE_ID_SMS",
		2:  "AUTH_FACTOR_FACTOR_TYPE_ID_SECURITY_QUESTION",
		3:  "AUTH_FACTOR_FACTOR_TYPE_ID_PHONE_CALL",
		4:  "AUTH_FACTOR_FACTOR_TYPE_ID_BIOMETRIC",
		5:  "AUTH_FACTOR_FACTOR_TYPE_ID_PUSH_NOTIFICATION",
		6:  "AUTH_FACTOR_FACTOR_TYPE_ID_HARDWARE_TOKEN",
		7:  "AUTH_FACTOR_FACTOR_TYPE_ID_OTP",
		8:  "AUTH_FACTOR_FACTOR_TYPE_ID_EMAIL",
		9:  "AUTH_FACTOR_FACTOR_TYPE_ID_U_2_F",
		10: "AUTH_FACTOR_FACTOR_TYPE_ID_WEB_AUTHN",
		11: "AUTH_FACTOR_FACTOR_TYPE_ID_PASSWORD",
		99: "AUTH_FACTOR_FACTOR_TYPE_ID_OTHER",
	}
	AUTH_FACTOR_FACTOR_TYPE_ID_value = map[string]int32{
		"AUTH_FACTOR_FACTOR_TYPE_ID_UNKNOWN":           0,
		"AUTH_FACTOR_FACTOR_TYPE_ID_SMS":               1,
		"AUTH_FACTOR_FACTOR_TYPE_ID_SECURITY_QUESTION": 2,
		"AUTH_FACTOR_FACTOR_TYPE_ID_PHONE_CALL":        3,
		"AUTH_FACTOR_FACTOR_TYPE_ID_BIOMETRIC":         4,
		"AUTH_FACTOR_FACTOR_TYPE_ID_PUSH_NOTIFICATION": 5,
		"AUTH_FACTOR_FACTOR_TYPE_ID_HARDWARE_TOKEN":    6,
		"AUTH_FACTOR_FACTOR_TYPE_ID_OTP":               7,
		"AUTH_FACTOR_FACTOR_TYPE_ID_EMAIL":             8,
		"AUTH_FACTOR_FACTOR_TYPE_ID_U_2_F":             9,
		"AUTH_FACTOR_FACTOR_TYPE_ID_WEB_AUTHN":         10,
		"AUTH_FACTOR_FACTOR_TYPE_ID_PASSWORD":          11,
		"AUTH_FACTOR_FACTOR_TYPE_ID_OTHER":             99,
	}
)

func (x AUTH_FACTOR_FACTOR_TYPE_ID) Enum() *AUTH_FACTOR_FACTOR_TYPE_ID {
	p := new(AUTH_FACTOR_FACTOR_TYPE_ID)
	*p = x
	return p
}

func (x AUTH_FACTOR_FACTOR_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AUTH_FACTOR_FACTOR_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[35].Descriptor()
}

func (AUTH_FACTOR_FACTOR_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[35]
}

func (x AUTH_FACTOR_FACTOR_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AUTH_FACTOR_FACTOR_TYPE_ID.Descriptor instead.
func (AUTH_FACTOR_FACTOR_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{35}
}

type DATA_SECURITY_CATEGORY_ID int32

const (
	DATA_SECURITY_CATEGORY_ID_DATA_SECURITY_CATEGORY_ID_UNKNOWN                      DATA_SECURITY_CATEGORY_ID = 0  // EnumValue: 0; Type: OCSF_VALUE;
	DATA_SECURITY_CATEGORY_ID_DATA_SECURITY_CATEGORY_ID_PERSONAL                     DATA_SECURITY_CATEGORY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATA_SECURITY_CATEGORY_ID_DATA_SECURITY_CATEGORY_ID_GOVERNMENTAL                 DATA_SECURITY_CATEGORY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_SECURITY_CATEGORY_ID_DATA_SECURITY_CATEGORY_ID_FINANCIAL                    DATA_SECURITY_CATEGORY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATA_SECURITY_CATEGORY_ID_DATA_SECURITY_CATEGORY_ID_BUSINESS                     DATA_SECURITY_CATEGORY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATA_SECURITY_CATEGORY_ID_DATA_SECURITY_CATEGORY_ID_MILITARY_AND_LAW_ENFORCEMENT DATA_SECURITY_CATEGORY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATA_SECURITY_CATEGORY_ID_DATA_SECURITY_CATEGORY_ID_SECURITY                     DATA_SECURITY_CATEGORY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATA_SECURITY_CATEGORY_ID_DATA_SECURITY_CATEGORY_ID_OTHER                        DATA_SECURITY_CATEGORY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_SECURITY_CATEGORY_ID.
var (
	DATA_SECURITY_CATEGORY_ID_name = map[int32]string{
		0:  "DATA_SECURITY_CATEGORY_ID_UNKNOWN",
		1:  "DATA_SECURITY_CATEGORY_ID_PERSONAL",
		2:  "DATA_SECURITY_CATEGORY_ID_GOVERNMENTAL",
		3:  "DATA_SECURITY_CATEGORY_ID_FINANCIAL",
		4:  "DATA_SECURITY_CATEGORY_ID_BUSINESS",
		5:  "DATA_SECURITY_CATEGORY_ID_MILITARY_AND_LAW_ENFORCEMENT",
		6:  "DATA_SECURITY_CATEGORY_ID_SECURITY",
		99: "DATA_SECURITY_CATEGORY_ID_OTHER",
	}
	DATA_SECURITY_CATEGORY_ID_value = map[string]int32{
		"DATA_SECURITY_CATEGORY_ID_UNKNOWN":                      0,
		"DATA_SECURITY_CATEGORY_ID_PERSONAL":                     1,
		"DATA_SECURITY_CATEGORY_ID_GOVERNMENTAL":                 2,
		"DATA_SECURITY_CATEGORY_ID_FINANCIAL":                    3,
		"DATA_SECURITY_CATEGORY_ID_BUSINESS":                     4,
		"DATA_SECURITY_CATEGORY_ID_MILITARY_AND_LAW_ENFORCEMENT": 5,
		"DATA_SECURITY_CATEGORY_ID_SECURITY":                     6,
		"DATA_SECURITY_CATEGORY_ID_OTHER":                        99,
	}
)

func (x DATA_SECURITY_CATEGORY_ID) Enum() *DATA_SECURITY_CATEGORY_ID {
	p := new(DATA_SECURITY_CATEGORY_ID)
	*p = x
	return p
}

func (x DATA_SECURITY_CATEGORY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_SECURITY_CATEGORY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[36].Descriptor()
}

func (DATA_SECURITY_CATEGORY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[36]
}

func (x DATA_SECURITY_CATEGORY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_SECURITY_CATEGORY_ID.Descriptor instead.
func (DATA_SECURITY_CATEGORY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{36}
}

type DATA_CLASSIFICATION_CONFIDENTIALITY_ID int32

const (
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_DATA_CLASSIFICATION_CONFIDENTIALITY_ID_UNKNOWN          DATA_CLASSIFICATION_CONFIDENTIALITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_DATA_CLASSIFICATION_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL DATA_CLASSIFICATION_CONFIDENTIALITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_DATA_CLASSIFICATION_CONFIDENTIALITY_ID_CONFIDENTIAL     DATA_CLASSIFICATION_CONFIDENTIALITY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_DATA_CLASSIFICATION_CONFIDENTIALITY_ID_SECRET           DATA_CLASSIFICATION_CONFIDENTIALITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_DATA_CLASSIFICATION_CONFIDENTIALITY_ID_TOP_SECRET       DATA_CLASSIFICATION_CONFIDENTIALITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_DATA_CLASSIFICATION_CONFIDENTIALITY_ID_PRIVATE          DATA_CLASSIFICATION_CONFIDENTIALITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_DATA_CLASSIFICATION_CONFIDENTIALITY_ID_RESTRICTED       DATA_CLASSIFICATION_CONFIDENTIALITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_DATA_CLASSIFICATION_CONFIDENTIALITY_ID_OTHER            DATA_CLASSIFICATION_CONFIDENTIALITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DATA_CLASSIFICATION_CONFIDENTIALITY_ID.
var (
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_name = map[int32]string{
		0:  "DATA_CLASSIFICATION_CONFIDENTIALITY_ID_UNKNOWN",
		1:  "DATA_CLASSIFICATION_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL",
		2:  "DATA_CLASSIFICATION_CONFIDENTIALITY_ID_CONFIDENTIAL",
		3:  "DATA_CLASSIFICATION_CONFIDENTIALITY_ID_SECRET",
		4:  "DATA_CLASSIFICATION_CONFIDENTIALITY_ID_TOP_SECRET",
		5:  "DATA_CLASSIFICATION_CONFIDENTIALITY_ID_PRIVATE",
		6:  "DATA_CLASSIFICATION_CONFIDENTIALITY_ID_RESTRICTED",
		99: "DATA_CLASSIFICATION_CONFIDENTIALITY_ID_OTHER",
	}
	DATA_CLASSIFICATION_CONFIDENTIALITY_ID_value = map[string]int32{
		"DATA_CLASSIFICATION_CONFIDENTIALITY_ID_UNKNOWN":          0,
		"DATA_CLASSIFICATION_CONFIDENTIALITY_ID_NOT_CONFIDENTIAL": 1,
		"DATA_CLASSIFICATION_CONFIDENTIALITY_ID_CONFIDENTIAL":     2,
		"DATA_CLASSIFICATION_CONFIDENTIALITY_ID_SECRET":           3,
		"DATA_CLASSIFICATION_CONFIDENTIALITY_ID_TOP_SECRET":       4,
		"DATA_CLASSIFICATION_CONFIDENTIALITY_ID_PRIVATE":          5,
		"DATA_CLASSIFICATION_CONFIDENTIALITY_ID_RESTRICTED":       6,
		"DATA_CLASSIFICATION_CONFIDENTIALITY_ID_OTHER":            99,
	}
)

func (x DATA_CLASSIFICATION_CONFIDENTIALITY_ID) Enum() *DATA_CLASSIFICATION_CONFIDENTIALITY_ID {
	p := new(DATA_CLASSIFICATION_CONFIDENTIALITY_ID)
	*p = x
	return p
}

func (x DATA_CLASSIFICATION_CONFIDENTIALITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_CLASSIFICATION_CONFIDENTIALITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[37].Descriptor()
}

func (DATA_CLASSIFICATION_CONFIDENTIALITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[37]
}

func (x DATA_CLASSIFICATION_CONFIDENTIALITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_CLASSIFICATION_CONFIDENTIALITY_ID.Descriptor instead.
func (DATA_CLASSIFICATION_CONFIDENTIALITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{37}
}

type FINGERPRINT_ALGORITHM_ID int32

const (
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_UNKNOWN        FINGERPRINT_ALGORITHM_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_MD_5           FINGERPRINT_ALGORITHM_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_SHA_1          FINGERPRINT_ALGORITHM_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_SHA_256        FINGERPRINT_ALGORITHM_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_SHA_512        FINGERPRINT_ALGORITHM_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_CTPH           FINGERPRINT_ALGORITHM_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_TLSH           FINGERPRINT_ALGORITHM_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_QUICK_XOR_HASH FINGERPRINT_ALGORITHM_ID = 7  // EnumValue: 7; Type: OCSF_VALUE;
	FINGERPRINT_ALGORITHM_ID_FINGERPRINT_ALGORITHM_ID_OTHER          FINGERPRINT_ALGORITHM_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for FINGERPRINT_ALGORITHM_ID.
var (
	FINGERPRINT_ALGORITHM_ID_name = map[int32]string{
		0:  "FINGERPRINT_ALGORITHM_ID_UNKNOWN",
		1:  "FINGERPRINT_ALGORITHM_ID_MD_5",
		2:  "FINGERPRINT_ALGORITHM_ID_SHA_1",
		3:  "FINGERPRINT_ALGORITHM_ID_SHA_256",
		4:  "FINGERPRINT_ALGORITHM_ID_SHA_512",
		5:  "FINGERPRINT_ALGORITHM_ID_CTPH",
		6:  "FINGERPRINT_ALGORITHM_ID_TLSH",
		7:  "FINGERPRINT_ALGORITHM_ID_QUICK_XOR_HASH",
		99: "FINGERPRINT_ALGORITHM_ID_OTHER",
	}
	FINGERPRINT_ALGORITHM_ID_value = map[string]int32{
		"FINGERPRINT_ALGORITHM_ID_UNKNOWN":        0,
		"FINGERPRINT_ALGORITHM_ID_MD_5":           1,
		"FINGERPRINT_ALGORITHM_ID_SHA_1":          2,
		"FINGERPRINT_ALGORITHM_ID_SHA_256":        3,
		"FINGERPRINT_ALGORITHM_ID_SHA_512":        4,
		"FINGERPRINT_ALGORITHM_ID_CTPH":           5,
		"FINGERPRINT_ALGORITHM_ID_TLSH":           6,
		"FINGERPRINT_ALGORITHM_ID_QUICK_XOR_HASH": 7,
		"FINGERPRINT_ALGORITHM_ID_OTHER":          99,
	}
)

func (x FINGERPRINT_ALGORITHM_ID) Enum() *FINGERPRINT_ALGORITHM_ID {
	p := new(FINGERPRINT_ALGORITHM_ID)
	*p = x
	return p
}

func (x FINGERPRINT_ALGORITHM_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINGERPRINT_ALGORITHM_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[38].Descriptor()
}

func (FINGERPRINT_ALGORITHM_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[38]
}

func (x FINGERPRINT_ALGORITHM_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINGERPRINT_ALGORITHM_ID.Descriptor instead.
func (FINGERPRINT_ALGORITHM_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{38}
}

type DNS_QUERY_OPCODE_ID int32

const (
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_QUERY         DNS_QUERY_OPCODE_ID = 0 // Type: OCSF_VALUE; EnumValue: 0;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_INVERSE_QUERY DNS_QUERY_OPCODE_ID = 1 // EnumValue: 1; Type: OCSF_VALUE;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_STATUS        DNS_QUERY_OPCODE_ID = 2 // Type: OCSF_VALUE; EnumValue: 2;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_RESERVED      DNS_QUERY_OPCODE_ID = 3 // Type: OCSF_VALUE; EnumValue: 3;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_NOTIFY        DNS_QUERY_OPCODE_ID = 4 // Type: OCSF_VALUE; EnumValue: 4;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_UPDATE        DNS_QUERY_OPCODE_ID = 5 // Type: OCSF_VALUE; EnumValue: 5;
	DNS_QUERY_OPCODE_ID_DNS_QUERY_OPCODE_ID_DSO_MESSAGE   DNS_QUERY_OPCODE_ID = 6 // Type: OCSF_VALUE; EnumValue: 6;
)

// Enum value maps for DNS_QUERY_OPCODE_ID.
var (
	DNS_QUERY_OPCODE_ID_name = map[int32]string{
		0: "DNS_QUERY_OPCODE_ID_QUERY",
		1: "DNS_QUERY_OPCODE_ID_INVERSE_QUERY",
		2: "DNS_QUERY_OPCODE_ID_STATUS",
		3: "DNS_QUERY_OPCODE_ID_RESERVED",
		4: "DNS_QUERY_OPCODE_ID_NOTIFY",
		5: "DNS_QUERY_OPCODE_ID_UPDATE",
		6: "DNS_QUERY_OPCODE_ID_DSO_MESSAGE",
	}
	DNS_QUERY_OPCODE_ID_value = map[string]int32{
		"DNS_QUERY_OPCODE_ID_QUERY":         0,
		"DNS_QUERY_OPCODE_ID_INVERSE_QUERY": 1,
		"DNS_QUERY_OPCODE_ID_STATUS":        2,
		"DNS_QUERY_OPCODE_ID_RESERVED":      3,
		"DNS_QUERY_OPCODE_ID_NOTIFY":        4,
		"DNS_QUERY_OPCODE_ID_UPDATE":        5,
		"DNS_QUERY_OPCODE_ID_DSO_MESSAGE":   6,
	}
)

func (x DNS_QUERY_OPCODE_ID) Enum() *DNS_QUERY_OPCODE_ID {
	p := new(DNS_QUERY_OPCODE_ID)
	*p = x
	return p
}

func (x DNS_QUERY_OPCODE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_QUERY_OPCODE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[39].Descriptor()
}

func (DNS_QUERY_OPCODE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[39]
}

func (x DNS_QUERY_OPCODE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_QUERY_OPCODE_ID.Descriptor instead.
func (DNS_QUERY_OPCODE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{39}
}

type PROCESS_INTEGRITY_ID int32

const (
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_UNKNOWN   PROCESS_INTEGRITY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_UNTRUSTED PROCESS_INTEGRITY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_LOW       PROCESS_INTEGRITY_ID = 2  // EnumValue: 2; Type: OCSF_VALUE;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_MEDIUM    PROCESS_INTEGRITY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_HIGH      PROCESS_INTEGRITY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_SYSTEM    PROCESS_INTEGRITY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_PROTECTED PROCESS_INTEGRITY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	PROCESS_INTEGRITY_ID_PROCESS_INTEGRITY_ID_OTHER     PROCESS_INTEGRITY_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for PROCESS_INTEGRITY_ID.
var (
	PROCESS_INTEGRITY_ID_name = map[int32]string{
		0:  "PROCESS_INTEGRITY_ID_UNKNOWN",
		1:  "PROCESS_INTEGRITY_ID_UNTRUSTED",
		2:  "PROCESS_INTEGRITY_ID_LOW",
		3:  "PROCESS_INTEGRITY_ID_MEDIUM",
		4:  "PROCESS_INTEGRITY_ID_HIGH",
		5:  "PROCESS_INTEGRITY_ID_SYSTEM",
		6:  "PROCESS_INTEGRITY_ID_PROTECTED",
		99: "PROCESS_INTEGRITY_ID_OTHER",
	}
	PROCESS_INTEGRITY_ID_value = map[string]int32{
		"PROCESS_INTEGRITY_ID_UNKNOWN":   0,
		"PROCESS_INTEGRITY_ID_UNTRUSTED": 1,
		"PROCESS_INTEGRITY_ID_LOW":       2,
		"PROCESS_INTEGRITY_ID_MEDIUM":    3,
		"PROCESS_INTEGRITY_ID_HIGH":      4,
		"PROCESS_INTEGRITY_ID_SYSTEM":    5,
		"PROCESS_INTEGRITY_ID_PROTECTED": 6,
		"PROCESS_INTEGRITY_ID_OTHER":     99,
	}
)

func (x PROCESS_INTEGRITY_ID) Enum() *PROCESS_INTEGRITY_ID {
	p := new(PROCESS_INTEGRITY_ID)
	*p = x
	return p
}

func (x PROCESS_INTEGRITY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PROCESS_INTEGRITY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[40].Descriptor()
}

func (PROCESS_INTEGRITY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[40]
}

func (x PROCESS_INTEGRITY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PROCESS_INTEGRITY_ID.Descriptor instead.
func (PROCESS_INTEGRITY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{40}
}

type DATA_CLASSIFICATION_CATEGORY_ID int32

const (
	DATA_CLASSIFICATION_CATEGORY_ID_DATA_CLASSIFICATION_CATEGORY_ID_UNKNOWN                      DATA_CLASSIFICATION_CATEGORY_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DATA_CLASSIFICATION_CATEGORY_ID_DATA_CLASSIFICATION_CATEGORY_ID_PERSONAL                     DATA_CLASSIFICATION_CATEGORY_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DATA_CLASSIFICATION_CATEGORY_ID_DATA_CLASSIFICATION_CATEGORY_ID_GOVERNMENTAL                 DATA_CLASSIFICATION_CATEGORY_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DATA_CLASSIFICATION_CATEGORY_ID_DATA_CLASSIFICATION_CATEGORY_ID_FINANCIAL                    DATA_CLASSIFICATION_CATEGORY_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DATA_CLASSIFICATION_CATEGORY_ID_DATA_CLASSIFICATION_CATEGORY_ID_BUSINESS                     DATA_CLASSIFICATION_CATEGORY_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DATA_CLASSIFICATION_CATEGORY_ID_DATA_CLASSIFICATION_CATEGORY_ID_MILITARY_AND_LAW_ENFORCEMENT DATA_CLASSIFICATION_CATEGORY_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DATA_CLASSIFICATION_CATEGORY_ID_DATA_CLASSIFICATION_CATEGORY_ID_SECURITY                     DATA_CLASSIFICATION_CATEGORY_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DATA_CLASSIFICATION_CATEGORY_ID_DATA_CLASSIFICATION_CATEGORY_ID_OTHER                        DATA_CLASSIFICATION_CATEGORY_ID = 99 // EnumValue: 99; Type: OCSF_VALUE;
)

// Enum value maps for DATA_CLASSIFICATION_CATEGORY_ID.
var (
	DATA_CLASSIFICATION_CATEGORY_ID_name = map[int32]string{
		0:  "DATA_CLASSIFICATION_CATEGORY_ID_UNKNOWN",
		1:  "DATA_CLASSIFICATION_CATEGORY_ID_PERSONAL",
		2:  "DATA_CLASSIFICATION_CATEGORY_ID_GOVERNMENTAL",
		3:  "DATA_CLASSIFICATION_CATEGORY_ID_FINANCIAL",
		4:  "DATA_CLASSIFICATION_CATEGORY_ID_BUSINESS",
		5:  "DATA_CLASSIFICATION_CATEGORY_ID_MILITARY_AND_LAW_ENFORCEMENT",
		6:  "DATA_CLASSIFICATION_CATEGORY_ID_SECURITY",
		99: "DATA_CLASSIFICATION_CATEGORY_ID_OTHER",
	}
	DATA_CLASSIFICATION_CATEGORY_ID_value = map[string]int32{
		"DATA_CLASSIFICATION_CATEGORY_ID_UNKNOWN":                      0,
		"DATA_CLASSIFICATION_CATEGORY_ID_PERSONAL":                     1,
		"DATA_CLASSIFICATION_CATEGORY_ID_GOVERNMENTAL":                 2,
		"DATA_CLASSIFICATION_CATEGORY_ID_FINANCIAL":                    3,
		"DATA_CLASSIFICATION_CATEGORY_ID_BUSINESS":                     4,
		"DATA_CLASSIFICATION_CATEGORY_ID_MILITARY_AND_LAW_ENFORCEMENT": 5,
		"DATA_CLASSIFICATION_CATEGORY_ID_SECURITY":                     6,
		"DATA_CLASSIFICATION_CATEGORY_ID_OTHER":                        99,
	}
)

func (x DATA_CLASSIFICATION_CATEGORY_ID) Enum() *DATA_CLASSIFICATION_CATEGORY_ID {
	p := new(DATA_CLASSIFICATION_CATEGORY_ID)
	*p = x
	return p
}

func (x DATA_CLASSIFICATION_CATEGORY_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DATA_CLASSIFICATION_CATEGORY_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[41].Descriptor()
}

func (DATA_CLASSIFICATION_CATEGORY_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[41]
}

func (x DATA_CLASSIFICATION_CATEGORY_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DATA_CLASSIFICATION_CATEGORY_ID.Descriptor instead.
func (DATA_CLASSIFICATION_CATEGORY_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{41}
}

type WIN_RESOURCE_TYPE_ID int32

const (
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_UNKNOWN                   WIN_RESOURCE_TYPE_ID = 0  // Type: OCSF_VALUE; EnumValue: 0;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DIRECTORY                 WIN_RESOURCE_TYPE_ID = 1  // Type: OCSF_VALUE; EnumValue: 1;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_EVENT                     WIN_RESOURCE_TYPE_ID = 2  // Type: OCSF_VALUE; EnumValue: 2;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_TIMER                     WIN_RESOURCE_TYPE_ID = 3  // Type: OCSF_VALUE; EnumValue: 3;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DEVICE                    WIN_RESOURCE_TYPE_ID = 4  // Type: OCSF_VALUE; EnumValue: 4;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_MUTANT                    WIN_RESOURCE_TYPE_ID = 5  // Type: OCSF_VALUE; EnumValue: 5;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_TYPE                      WIN_RESOURCE_TYPE_ID = 6  // Type: OCSF_VALUE; EnumValue: 6;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_FILE                      WIN_RESOURCE_TYPE_ID = 7  // Type: OCSF_VALUE; EnumValue: 7;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_TOKEN                     WIN_RESOURCE_TYPE_ID = 8  // Type: OCSF_VALUE; EnumValue: 8;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_THREAD                    WIN_RESOURCE_TYPE_ID = 9  // EnumValue: 9; Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SECTION                   WIN_RESOURCE_TYPE_ID = 10 // Type: OCSF_VALUE; EnumValue: 10;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_WINDOW_STATION            WIN_RESOURCE_TYPE_ID = 11 // EnumValue: 11; Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DEBUG_OBJECT              WIN_RESOURCE_TYPE_ID = 12 // Type: OCSF_VALUE; EnumValue: 12;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_FILTER_COMMUNICATION_PORT WIN_RESOURCE_TYPE_ID = 13 // Type: OCSF_VALUE; EnumValue: 13;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_EVENT_PAIR                WIN_RESOURCE_TYPE_ID = 14 // EnumValue: 14; Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DRIVER                    WIN_RESOURCE_TYPE_ID = 15 // EnumValue: 15; Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_IO_COMPLETION             WIN_RESOURCE_TYPE_ID = 16 // Type: OCSF_VALUE; EnumValue: 16;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_CONTROLLER                WIN_RESOURCE_TYPE_ID = 17 // Type: OCSF_VALUE; EnumValue: 17;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SYMBOLIC_LINK             WIN_RESOURCE_TYPE_ID = 18 // EnumValue: 18; Type: OCSF_VALUE;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_WMI_GUID                  WIN_RESOURCE_TYPE_ID = 19 // Type: OCSF_VALUE; EnumValue: 19;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_PROCESS                   WIN_RESOURCE_TYPE_ID = 20 // Type: OCSF_VALUE; EnumValue: 20;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_PROFILE                   WIN_RESOURCE_TYPE_ID = 21 // Type: OCSF_VALUE; EnumValue: 21;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_DESKTOP                   WIN_RESOURCE_TYPE_ID = 22 // Type: OCSF_VALUE; EnumValue: 22;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_KEYED_EVENT               WIN_RESOURCE_TYPE_ID = 23 // Type: OCSF_VALUE; EnumValue: 23;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_ADAPTER                   WIN_RESOURCE_TYPE_ID = 24 // Type: OCSF_VALUE; EnumValue: 24;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_KEY                       WIN_RESOURCE_TYPE_ID = 25 // Type: OCSF_VALUE; EnumValue: 25;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_WAITABLE_PORT             WIN_RESOURCE_TYPE_ID = 26 // Type: OCSF_VALUE; EnumValue: 26;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_CALLBACK                  WIN_RESOURCE_TYPE_ID = 27 // Type: OCSF_VALUE; EnumValue: 27;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SEMAPHORE                 WIN_RESOURCE_TYPE_ID = 28 // Type: OCSF_VALUE; EnumValue: 28;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_JOB                       WIN_RESOURCE_TYPE_ID = 29 // Type: OCSF_VALUE; EnumValue: 29;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_PORT                      WIN_RESOURCE_TYPE_ID = 30 // Type: OCSF_VALUE; EnumValue: 30;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_FILTER_CONNECTION_PORT    WIN_RESOURCE_TYPE_ID = 31 // Type: OCSF_VALUE; EnumValue: 31;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_ALPC_PORT                 WIN_RESOURCE_TYPE_ID = 32 // Type: OCSF_VALUE; EnumValue: 32;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_ALIAS                 WIN_RESOURCE_TYPE_ID = 33 // Type: OCSF_VALUE; EnumValue: 33;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_GROUP                 WIN_RESOURCE_TYPE_ID = 34 // Type: OCSF_VALUE; EnumValue: 34;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_USER                  WIN_RESOURCE_TYPE_ID = 35 // Type: OCSF_VALUE; EnumValue: 35;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_DOMAIN                WIN_RESOURCE_TYPE_ID = 36 // Type: OCSF_VALUE; EnumValue: 36;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_SAM_SERVER                WIN_RESOURCE_TYPE_ID = 37 // Type: OCSF_VALUE; EnumValue: 37;
	WIN_RESOURCE_TYPE_ID_WIN_RESOURCE_TYPE_ID_OTHER                     WIN_RESOURCE_TYPE_ID = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for WIN_RESOURCE_TYPE_ID.
var (
	WIN_RESOURCE_TYPE_ID_name = map[int32]string{
		0:  "WIN_RESOURCE_TYPE_ID_UNKNOWN",
		1:  "WIN_RESOURCE_TYPE_ID_DIRECTORY",
		2:  "WIN_RESOURCE_TYPE_ID_EVENT",
		3:  "WIN_RESOURCE_TYPE_ID_TIMER",
		4:  "WIN_RESOURCE_TYPE_ID_DEVICE",
		5:  "WIN_RESOURCE_TYPE_ID_MUTANT",
		6:  "WIN_RESOURCE_TYPE_ID_TYPE",
		7:  "WIN_RESOURCE_TYPE_ID_FILE",
		8:  "WIN_RESOURCE_TYPE_ID_TOKEN",
		9:  "WIN_RESOURCE_TYPE_ID_THREAD",
		10: "WIN_RESOURCE_TYPE_ID_SECTION",
		11: "WIN_RESOURCE_TYPE_ID_WINDOW_STATION",
		12: "WIN_RESOURCE_TYPE_ID_DEBUG_OBJECT",
		13: "WIN_RESOURCE_TYPE_ID_FILTER_COMMUNICATION_PORT",
		14: "WIN_RESOURCE_TYPE_ID_EVENT_PAIR",
		15: "WIN_RESOURCE_TYPE_ID_DRIVER",
		16: "WIN_RESOURCE_TYPE_ID_IO_COMPLETION",
		17: "WIN_RESOURCE_TYPE_ID_CONTROLLER",
		18: "WIN_RESOURCE_TYPE_ID_SYMBOLIC_LINK",
		19: "WIN_RESOURCE_TYPE_ID_WMI_GUID",
		20: "WIN_RESOURCE_TYPE_ID_PROCESS",
		21: "WIN_RESOURCE_TYPE_ID_PROFILE",
		22: "WIN_RESOURCE_TYPE_ID_DESKTOP",
		23: "WIN_RESOURCE_TYPE_ID_KEYED_EVENT",
		24: "WIN_RESOURCE_TYPE_ID_ADAPTER",
		25: "WIN_RESOURCE_TYPE_ID_KEY",
		26: "WIN_RESOURCE_TYPE_ID_WAITABLE_PORT",
		27: "WIN_RESOURCE_TYPE_ID_CALLBACK",
		28: "WIN_RESOURCE_TYPE_ID_SEMAPHORE",
		29: "WIN_RESOURCE_TYPE_ID_JOB",
		30: "WIN_RESOURCE_TYPE_ID_PORT",
		31: "WIN_RESOURCE_TYPE_ID_FILTER_CONNECTION_PORT",
		32: "WIN_RESOURCE_TYPE_ID_ALPC_PORT",
		33: "WIN_RESOURCE_TYPE_ID_SAM_ALIAS",
		34: "WIN_RESOURCE_TYPE_ID_SAM_GROUP",
		35: "WIN_RESOURCE_TYPE_ID_SAM_USER",
		36: "WIN_RESOURCE_TYPE_ID_SAM_DOMAIN",
		37: "WIN_RESOURCE_TYPE_ID_SAM_SERVER",
		99: "WIN_RESOURCE_TYPE_ID_OTHER",
	}
	WIN_RESOURCE_TYPE_ID_value = map[string]int32{
		"WIN_RESOURCE_TYPE_ID_UNKNOWN":                   0,
		"WIN_RESOURCE_TYPE_ID_DIRECTORY":                 1,
		"WIN_RESOURCE_TYPE_ID_EVENT":                     2,
		"WIN_RESOURCE_TYPE_ID_TIMER":                     3,
		"WIN_RESOURCE_TYPE_ID_DEVICE":                    4,
		"WIN_RESOURCE_TYPE_ID_MUTANT":                    5,
		"WIN_RESOURCE_TYPE_ID_TYPE":                      6,
		"WIN_RESOURCE_TYPE_ID_FILE":                      7,
		"WIN_RESOURCE_TYPE_ID_TOKEN":                     8,
		"WIN_RESOURCE_TYPE_ID_THREAD":                    9,
		"WIN_RESOURCE_TYPE_ID_SECTION":                   10,
		"WIN_RESOURCE_TYPE_ID_WINDOW_STATION":            11,
		"WIN_RESOURCE_TYPE_ID_DEBUG_OBJECT":              12,
		"WIN_RESOURCE_TYPE_ID_FILTER_COMMUNICATION_PORT": 13,
		"WIN_RESOURCE_TYPE_ID_EVENT_PAIR":                14,
		"WIN_RESOURCE_TYPE_ID_DRIVER":                    15,
		"WIN_RESOURCE_TYPE_ID_IO_COMPLETION":             16,
		"WIN_RESOURCE_TYPE_ID_CONTROLLER":                17,
		"WIN_RESOURCE_TYPE_ID_SYMBOLIC_LINK":             18,
		"WIN_RESOURCE_TYPE_ID_WMI_GUID":                  19,
		"WIN_RESOURCE_TYPE_ID_PROCESS":                   20,
		"WIN_RESOURCE_TYPE_ID_PROFILE":                   21,
		"WIN_RESOURCE_TYPE_ID_DESKTOP":                   22,
		"WIN_RESOURCE_TYPE_ID_KEYED_EVENT":               23,
		"WIN_RESOURCE_TYPE_ID_ADAPTER":                   24,
		"WIN_RESOURCE_TYPE_ID_KEY":                       25,
		"WIN_RESOURCE_TYPE_ID_WAITABLE_PORT":             26,
		"WIN_RESOURCE_TYPE_ID_CALLBACK":                  27,
		"WIN_RESOURCE_TYPE_ID_SEMAPHORE":                 28,
		"WIN_RESOURCE_TYPE_ID_JOB":                       29,
		"WIN_RESOURCE_TYPE_ID_PORT":                      30,
		"WIN_RESOURCE_TYPE_ID_FILTER_CONNECTION_PORT":    31,
		"WIN_RESOURCE_TYPE_ID_ALPC_PORT":                 32,
		"WIN_RESOURCE_TYPE_ID_SAM_ALIAS":                 33,
		"WIN_RESOURCE_TYPE_ID_SAM_GROUP":                 34,
		"WIN_RESOURCE_TYPE_ID_SAM_USER":                  35,
		"WIN_RESOURCE_TYPE_ID_SAM_DOMAIN":                36,
		"WIN_RESOURCE_TYPE_ID_SAM_SERVER":                37,
		"WIN_RESOURCE_TYPE_ID_OTHER":                     99,
	}
)

func (x WIN_RESOURCE_TYPE_ID) Enum() *WIN_RESOURCE_TYPE_ID {
	p := new(WIN_RESOURCE_TYPE_ID)
	*p = x
	return p
}

func (x WIN_RESOURCE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WIN_RESOURCE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[42].Descriptor()
}

func (WIN_RESOURCE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[42]
}

func (x WIN_RESOURCE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WIN_RESOURCE_TYPE_ID.Descriptor instead.
func (WIN_RESOURCE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{42}
}

type DNS_ANSWER_FLAG_IDS int32

const (
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_UNKNOWN              DNS_ANSWER_FLAG_IDS = 0  // Type: OCSF_VALUE; EnumValue: 0;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_AUTHORITATIVE_ANSWER DNS_ANSWER_FLAG_IDS = 1  // Type: OCSF_VALUE; EnumValue: 1;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_TRUNCATED_RESPONSE   DNS_ANSWER_FLAG_IDS = 2  // Type: OCSF_VALUE; EnumValue: 2;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_RECURSION_DESIRED    DNS_ANSWER_FLAG_IDS = 3  // Type: OCSF_VALUE; EnumValue: 3;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_RECURSION_AVAILABLE  DNS_ANSWER_FLAG_IDS = 4  // Type: OCSF_VALUE; EnumValue: 4;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_AUTHENTIC_DATA       DNS_ANSWER_FLAG_IDS = 5  // Type: OCSF_VALUE; EnumValue: 5;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_CHECKING_DISABLED    DNS_ANSWER_FLAG_IDS = 6  // Type: OCSF_VALUE; EnumValue: 6;
	DNS_ANSWER_FLAG_IDS_DNS_ANSWER_FLAG_IDS_OTHER                DNS_ANSWER_FLAG_IDS = 99 // Type: OCSF_VALUE; EnumValue: 99;
)

// Enum value maps for DNS_ANSWER_FLAG_IDS.
var (
	DNS_ANSWER_FLAG_IDS_name = map[int32]string{
		0:  "DNS_ANSWER_FLAG_IDS_UNKNOWN",
		1:  "DNS_ANSWER_FLAG_IDS_AUTHORITATIVE_ANSWER",
		2:  "DNS_ANSWER_FLAG_IDS_TRUNCATED_RESPONSE",
		3:  "DNS_ANSWER_FLAG_IDS_RECURSION_DESIRED",
		4:  "DNS_ANSWER_FLAG_IDS_RECURSION_AVAILABLE",
		5:  "DNS_ANSWER_FLAG_IDS_AUTHENTIC_DATA",
		6:  "DNS_ANSWER_FLAG_IDS_CHECKING_DISABLED",
		99: "DNS_ANSWER_FLAG_IDS_OTHER",
	}
	DNS_ANSWER_FLAG_IDS_value = map[string]int32{
		"DNS_ANSWER_FLAG_IDS_UNKNOWN":              0,
		"DNS_ANSWER_FLAG_IDS_AUTHORITATIVE_ANSWER": 1,
		"DNS_ANSWER_FLAG_IDS_TRUNCATED_RESPONSE":   2,
		"DNS_ANSWER_FLAG_IDS_RECURSION_DESIRED":    3,
		"DNS_ANSWER_FLAG_IDS_RECURSION_AVAILABLE":  4,
		"DNS_ANSWER_FLAG_IDS_AUTHENTIC_DATA":       5,
		"DNS_ANSWER_FLAG_IDS_CHECKING_DISABLED":    6,
		"DNS_ANSWER_FLAG_IDS_OTHER":                99,
	}
)

func (x DNS_ANSWER_FLAG_IDS) Enum() *DNS_ANSWER_FLAG_IDS {
	p := new(DNS_ANSWER_FLAG_IDS)
	*p = x
	return p
}

func (x DNS_ANSWER_FLAG_IDS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNS_ANSWER_FLAG_IDS) Descriptor() protoreflect.EnumDescriptor {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[43].Descriptor()
}

func (DNS_ANSWER_FLAG_IDS) Type() protoreflect.EnumType {
	return &file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes[43]
}

func (x DNS_ANSWER_FLAG_IDS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNS_ANSWER_FLAG_IDS.Descriptor instead.
func (DNS_ANSWER_FLAG_IDS) EnumDescriptor() ([]byte, []int) {
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP(), []int{43}
}

var File_ocsf_v1_2_0_objects_enums_enums_proto protoreflect.FileDescriptor

var file_ocsf_v1_2_0_objects_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31,
	0x5f, 0x32, 0x5f, 0x30, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2a, 0x87, 0x01, 0x0a, 0x0e, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x58,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x88, 0x01, 0x0a,
	0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa6, 0x03, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x44, 0x41, 0x50,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x49, 0x41, 0x4d, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x49, 0x41, 0x4d, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x44,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x4f, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x08, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xb4, 0x03, 0x0a, 0x10, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x4e, 0x41, 0x4c,
	0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4e, 0x41,
	0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb6, 0x01, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04,
	0x2a, 0xd5, 0x09, 0x0a, 0x17, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x37, 0x0a, 0x33, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x49, 0x53,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x51, 0x55,
	0x41, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4c,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12,
	0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x54, 0x10, 0x07,
	0x12, 0x31, 0x0a, 0x2d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x53, 0x50,
	0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12,
	0x2d, 0x0a, 0x29, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c,
	0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x46, 0x45,
	0x54, 0x59, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0d,
	0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x10, 0x0e,
	0x12, 0x3a, 0x0a, 0x36, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x2d, 0x0a, 0x29,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x55, 0x58,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x10, 0x12, 0x34, 0x0a, 0x30, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x56, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x10,
	0x11, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x5f, 0x4f,
	0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x13, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x15, 0x12, 0x36, 0x0a,
	0x32, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x16, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb5, 0x03, 0x0a, 0x11, 0x52, 0x45, 0x47,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x44, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02,
	0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x44, 0x57, 0x4f, 0x52, 0x44, 0x5f,
	0x42, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x5a, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x53, 0x5a, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x51,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f,
	0x51, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x49, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x49, 0x41, 0x4e, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x5f, 0x53,
	0x5a, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xaa, 0x01, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53,
	0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x49, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x8a, 0x1a,
	0x0a, 0x10, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x29, 0x0a, 0x25, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x55, 0x4c, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x50, 0x4f, 0x52, 0x4e, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x53, 0x45, 0x58, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x50, 0x50, 0x41, 0x52, 0x45, 0x4c, 0x5f, 0x53, 0x57, 0x49, 0x4d, 0x53, 0x55, 0x49, 0x54, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4e, 0x55, 0x44, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x45, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x2e, 0x0a, 0x2a,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x53, 0x43, 0x41, 0x4d, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x47, 0x41, 0x4d, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x56, 0x49, 0x4f, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x41,
	0x43, 0x49, 0x53, 0x4d, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f,
	0x4e, 0x53, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x48, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0x11, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x48, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x12,
	0x12, 0x22, 0x0a, 0x1e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53,
	0x53, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x10, 0x15, 0x12, 0x34, 0x0a, 0x30, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x52,
	0x49, 0x54, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x45, 0x4c, 0x49, 0x45, 0x46, 0x10,
	0x16, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x4c, 0x43, 0x4f, 0x48, 0x4f, 0x4c, 0x10, 0x17, 0x12,
	0x1c, 0x0a, 0x18, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x54, 0x4f, 0x42, 0x41, 0x43, 0x43, 0x4f, 0x10, 0x18, 0x12, 0x2a, 0x0a,
	0x26, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x19, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x48,
	0x49, 0x4c, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x4e, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x10,
	0x1a, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x1b, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x1d,
	0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x1e, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x1f, 0x12, 0x26, 0x0a, 0x22, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x21, 0x12,
	0x25, 0x0a, 0x21, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x45, 0x47, 0x41, 0x4c, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4d, 0x49, 0x4c, 0x49, 0x54,
	0x41, 0x52, 0x59, 0x10, 0x23, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x56, 0x4f, 0x43,
	0x41, 0x43, 0x59, 0x10, 0x24, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x10, 0x25, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x26, 0x12, 0x2b, 0x0a, 0x27,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x53, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x53, 0x10, 0x28, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4d, 0x41,
	0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f,
	0x4d, 0x41, 0x4c, 0x4e, 0x45, 0x54, 0x53, 0x10, 0x2b, 0x12, 0x34, 0x0a, 0x30, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4d, 0x41,
	0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x42, 0x4f, 0x54, 0x4e, 0x45, 0x54, 0x53, 0x10, 0x2c, 0x12,
	0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x43,
	0x41, 0x52, 0x45, 0x45, 0x52, 0x53, 0x10, 0x2d, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4e, 0x45, 0x57,
	0x53, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x2e, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x2f,
	0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x31,
	0x12, 0x34, 0x0a, 0x30, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41,
	0x44, 0x55, 0x4c, 0x54, 0x10, 0x32, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x49, 0x4d, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x10, 0x34, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x55, 0x4d, 0x53, 0x10, 0x35, 0x12, 0x1d, 0x0a, 0x19,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x36, 0x12, 0x26, 0x0a, 0x22, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x37, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x38, 0x12, 0x28,
	0x0a, 0x24, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x53, 0x10, 0x39, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x48, 0x4f,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x3a, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x3b, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x3c, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x4f, 0x43,
	0x49, 0x45, 0x54, 0x59, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x56, 0x49, 0x4e,
	0x47, 0x10, 0x3d, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x49, 0x54, 0x45, 0x53, 0x10, 0x3f, 0x12, 0x2c, 0x0a, 0x28, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x55, 0x52, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x44, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x4f, 0x4f, 0x44, 0x10, 0x40, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x41, 0x12, 0x1b,
	0x0a, 0x17, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x10, 0x42, 0x12, 0x1d, 0x0a, 0x19, 0x55,
	0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x53, 0x10, 0x43, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52,
	0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x48,
	0x55, 0x4d, 0x4f, 0x52, 0x5f, 0x4a, 0x4f, 0x4b, 0x45, 0x53, 0x10, 0x44, 0x12, 0x27, 0x0a, 0x23,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x53, 0x10, 0x47, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x50, 0x5f, 0x32, 0x5f, 0x50, 0x10, 0x53, 0x12, 0x26,
	0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x43,
	0x4c, 0x49, 0x50, 0x53, 0x10, 0x54, 0x12, 0x31, 0x0a, 0x2d, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43,
	0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x55, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x58, 0x59, 0x5f, 0x41, 0x56, 0x4f, 0x49, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x56, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x44, 0x53, 0x10, 0x57, 0x12, 0x26,
	0x0a, 0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59,
	0x54, 0x49, 0x43, 0x53, 0x10, 0x58, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x59, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x52, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x5a, 0x12, 0x1f, 0x0a, 0x1b,
	0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x5c, 0x12, 0x26, 0x0a,
	0x22, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x53, 0x45, 0x58, 0x55, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x5d, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5f, 0x12, 0x30, 0x0a, 0x2c, 0x55, 0x52, 0x4c, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x60, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x53, 0x10, 0x61, 0x12,
	0x21, 0x0a, 0x1d, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x53,
	0x10, 0x62, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x53, 0x50, 0x41, 0x4d, 0x10, 0x65, 0x12, 0x32, 0x0a, 0x2e, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x4f,
	0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x57, 0x41, 0x4e, 0x54,
	0x45, 0x44, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x66, 0x12, 0x25, 0x0a,
	0x21, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x10, 0x67, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x6a, 0x12, 0x22, 0x0a,
	0x1e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x6b, 0x12, 0x32, 0x0a, 0x2e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x10, 0x6c, 0x12, 0x2f, 0x0a, 0x2b, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x53, 0x10, 0x6d, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x4f, 0x4e, 0x59, 0x10, 0x6e, 0x12,
	0x24, 0x0a, 0x20, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x45, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x10, 0x6f, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x70, 0x12, 0x28, 0x0a, 0x24, 0x55, 0x52, 0x4c,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x41,
	0x44, 0x49, 0x4f, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x53, 0x10, 0x71, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x52, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x54, 0x56, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x53, 0x10, 0x72, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x52,
	0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x50,
	0x49, 0x52, 0x41, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x43, 0x45, 0x52, 0x4e, 0x53, 0x10, 0x76, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x52,
	0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4d,
	0x41, 0x52, 0x49, 0x4a, 0x55, 0x41, 0x4e, 0x41, 0x10, 0x79, 0x2a, 0xe7, 0x05, 0x0a, 0x23, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x56, 0x50, 0x43, 0x10, 0x04, 0x12, 0x3c, 0x0a, 0x38,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x56, 0x50, 0x43,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x05, 0x12, 0x3f, 0x0a, 0x3b, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x06, 0x12, 0x38, 0x0a, 0x34, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x50, 0x43, 0x10, 0x07, 0x12, 0x38, 0x0a, 0x34, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x50, 0x43, 0x10, 0x08, 0x12,
	0x35, 0x0a, 0x31, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x57, 0x41, 0x59, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x41,
	0x54, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x56, 0x50, 0x43, 0x10, 0x0a, 0x12, 0x38, 0x0a, 0x34, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0xa6, 0x03, 0x0a, 0x19, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48,
	0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x4b, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x53,
	0x53, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x4b, 0x49, 0x4c, 0x4c, 0x5f,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f,
	0x4c, 0x10, 0x06, 0x12, 0x33, 0x0a, 0x2f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x53, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x48, 0x41,
	0x53, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x9f, 0x02,
	0x0a, 0x24, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x30, 0x0a,
	0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xc1, 0x01, 0x0a, 0x10, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4a,
	0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x4f, 0x42,
	0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x52,
	0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0xa1, 0x02, 0x0a, 0x1e, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41,
	0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x53, 0x41, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49,
	0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x53, 0x41,
	0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b,
	0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x28, 0x0a,
	0x24, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x52, 0x0a, 0x12, 0x4f, 0x42, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x1a, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe5, 0x06, 0x0a, 0x21,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49,
	0x44, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4c, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41,
	0x59, 0x10, 0x02, 0x12, 0x3e, 0x0a, 0x3a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x43, 0x0a, 0x3f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59,
	0x10, 0x05, 0x12, 0x3a, 0x0a, 0x36, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x06, 0x12, 0x3f,
	0x0a, 0x3b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x53, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12,
	0x42, 0x0a, 0x3e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45,
	0x52, 0x10, 0x08, 0x12, 0x42, 0x0a, 0x3e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54,
	0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x3b, 0x0a, 0x37, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44,
	0x4c, 0x50, 0x10, 0x0a, 0x12, 0x38, 0x0a, 0x34, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f,
	0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x0b, 0x12, 0x46,
	0x0a, 0x42, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x63, 0x2a, 0x8e, 0x02, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x45, 0x4c,
	0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4d, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x10, 0x63, 0x2a, 0xd2, 0x02, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x50,
	0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x26,
	0x0a, 0x22, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xfa, 0x03, 0x0a, 0x18, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x50, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x24,
	0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x0a,
	0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x55, 0x42,
	0x10, 0x0b, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x4e,
	0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xe2, 0x07, 0x0a, 0x1a, 0x4d, 0x41, 0x4c, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x53, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x44, 0x57, 0x41,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x44, 0x4f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x4f, 0x54, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x42, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x4c,
	0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x44, 0x44, 0x4f, 0x53, 0x10, 0x05, 0x12, 0x29,
	0x0a, 0x25, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c,
	0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10,
	0x07, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x5f, 0x4b, 0x49, 0x54, 0x10, 0x08, 0x12, 0x28, 0x0a,
	0x24, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x4c,
	0x4f, 0x47, 0x47, 0x45, 0x52, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x4c, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x41, 0x4e, 0x53, 0x4f, 0x4d, 0x57, 0x41, 0x52, 0x45,
	0x10, 0x0a, 0x12, 0x33, 0x0a, 0x2f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x52, 0x4f, 0x4a, 0x41, 0x4e, 0x10, 0x0b, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x41, 0x4c, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x36, 0x0a,
	0x32, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x4f, 0x47, 0x55,
	0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57,
	0x41, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x4b, 0x49, 0x54, 0x10, 0x0f, 0x12, 0x2d, 0x0a,
	0x29, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22,
	0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x53, 0x50, 0x59, 0x57, 0x41,
	0x52, 0x45, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x53, 0x5f, 0x54, 0x52, 0x4f, 0x4a, 0x41, 0x4e, 0x10, 0x12, 0x12, 0x24, 0x0a, 0x20, 0x4d,
	0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x56, 0x49, 0x52, 0x55, 0x53, 0x10,
	0x13, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x57, 0x45, 0x42, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x10, 0x14, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41,
	0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57, 0x49, 0x50, 0x45, 0x52, 0x10, 0x15,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x57,
	0x4f, 0x52, 0x4d, 0x10, 0x16, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xb4, 0x01, 0x0a, 0x12,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x54, 0x41, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x5f, 0x33, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x44, 0x41, 0x54, 0x41, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x41, 0x54, 0x41, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x43, 0x50, 0x5f, 0x42, 0x55, 0x43, 0x4b,
	0x45, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x42, 0x55, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0x95, 0x08, 0x0a, 0x15, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x31, 0x0a, 0x2d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x0a, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4c, 0x53, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x52, 0x54, 0x50, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10,
	0x0f, 0x12, 0x40, 0x0a, 0x3c, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x10, 0x12, 0x36, 0x0a, 0x32, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x12, 0x12, 0x31, 0x0a, 0x2d, 0x54,
	0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x13, 0x12, 0x31,
	0x0a, 0x2d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x14, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x44, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x15, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52,
	0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x29, 0x12, 0x24,
	0x0a, 0x20, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x2a, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x2b, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4f, 0x4b,
	0x49, 0x45, 0x10, 0x2c, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x53,
	0x4b, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x53, 0x10, 0x2d, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x2f, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x4c, 0x53,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x53, 0x10, 0x30,
	0x12, 0x2d, 0x0a, 0x29, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x31, 0x12,
	0x33, 0x0a, 0x2f, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x5f, 0x43, 0x45,
	0x52, 0x54, 0x10, 0x32, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x33, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4c, 0x53,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x92, 0x02, 0x0a, 0x10, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x51,
	0x4c, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xbb, 0x01, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x84, 0x02,
	0x0a, 0x25, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x49,
	0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43,
	0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x02, 0x12, 0x35, 0x0a,
	0x31, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x5f, 0x55,
	0x53, 0x45, 0x10, 0x03, 0x2a, 0xd9, 0x03, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x1b,
	0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x21, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x4c, 0x59, 0x5f, 0x53,
	0x41, 0x46, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x41,
	0x4e, 0x53, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x52, 0x45, 0x50,
	0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4d, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x53, 0x41, 0x46, 0x45,
	0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x52, 0x43, 0x49,
	0x53, 0x45, 0x5f, 0x43, 0x41, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24,
	0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x52,
	0x49, 0x53, 0x4b, 0x59, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x4f,
	0x53, 0x53, 0x49, 0x42, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53,
	0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42,
	0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x09, 0x12, 0x21,
	0x0a, 0x1d, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x4c, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10,
	0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x50, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0x96, 0x02, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x55,
	0x4c, 0x41, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10,
	0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xa3, 0x03, 0x0a, 0x20, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45,
	0x54, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x43, 0x52,
	0x45, 0x54, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xc0, 0x03, 0x0a, 0x0d, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e,
	0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x12, 0x2a, 0x0a, 0x26, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26,
	0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x63, 0x2a, 0xb1, 0x02, 0x0a, 0x27, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x12, 0x33,
	0x0a, 0x2f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x4e, 0x0a, 0x4a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x34, 0x5f, 0x49, 0x5f, 0x50, 0x56, 0x5f,
	0x34, 0x10, 0x04, 0x12, 0x4e, 0x0a, 0x4a, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x36, 0x5f, 0x49, 0x5f, 0x50, 0x56, 0x5f,
	0x36, 0x10, 0x06, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x90, 0x02, 0x0a, 0x0c, 0x53, 0x43, 0x41, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x41, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x43, 0x41, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x05, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4c, 0x41, 0x4d, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x80, 0x02, 0x0a, 0x19, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xae, 0x02, 0x0a,
	0x0a, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10,
	0x64, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x65,
	0x12, 0x15, 0x0a, 0x10, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x49, 0x4e, 0x55, 0x58, 0x10, 0xc8, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0xc9, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d,
	0x41, 0x43, 0x5f, 0x4f, 0x53, 0x10, 0xac, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x5f, 0x4f, 0x53, 0x10, 0xad, 0x02, 0x12, 0x18,
	0x0a, 0x13, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x5f, 0x50,
	0x41, 0x44, 0x5f, 0x4f, 0x53, 0x10, 0xae, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x49, 0x53, 0x10, 0x90,
	0x03, 0x12, 0x13, 0x0a, 0x0e, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x49, 0x58, 0x10, 0x91, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x50, 0x5f, 0x55, 0x58, 0x10, 0x92, 0x03, 0x2a, 0xee, 0x02,
	0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f,
	0x50, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x50, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f, 0x42, 0x49,
	0x4c, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x10,
	0x09, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48,
	0x55, 0x42, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xd0,
	0x03, 0x0a, 0x15, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x50, 0x54, 0x4f, 0x50,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52,
	0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x09, 0x12,
	0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10,
	0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f,
	0x58, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x55, 0x42, 0x10, 0x0b,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x58,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x63, 0x2a, 0xb9, 0x04, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x10, 0x04, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x4f, 0x54, 0x50, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x08, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x5f, 0x32,
	0x5f, 0x46, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4e, 0x10, 0x0a, 0x12, 0x27,
	0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xf0, 0x02,
	0x0a, 0x19, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x21, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x42, 0x55, 0x53,
	0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x3a, 0x0a, 0x36, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x4c, 0x49, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x4c, 0x41, 0x57, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xd9, 0x03, 0x0a, 0x26, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x2e, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x3b, 0x0a, 0x37, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x37, 0x0a, 0x33,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x03, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x04, 0x12,
	0x32, 0x0a, 0x2e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x30, 0x0a, 0x2c, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0xea, 0x02, 0x0a,
	0x18, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4e,
	0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x44, 0x5f, 0x35,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e,
	0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x48, 0x41, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52,
	0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32,
	0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e,
	0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x43,
	0x54, 0x50, 0x48, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50,
	0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x4c, 0x53, 0x48, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x49, 0x4e, 0x47,
	0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x5f, 0x58, 0x4f, 0x52, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50,
	0x52, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x82, 0x02, 0x0a, 0x13, 0x44, 0x4e,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x44, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f,
	0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x44, 0x4e, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4e, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4e, 0x53, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4e, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4e, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x4e, 0x53,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x53, 0x4f, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x06, 0x2a, 0x9f,
	0x02, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63,
	0x2a, 0xa6, 0x03, 0x0a, 0x1f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x30, 0x0a, 0x2c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x44, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x40,
	0x0a, 0x3c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x49, 0x4c, 0x49, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4c,
	0x41, 0x57, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05,
	0x12, 0x2c, 0x0a, 0x28, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x29,
	0x0a, 0x25, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a, 0x83, 0x0b, 0x0a, 0x14, 0x57, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x57,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x57,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0d, 0x12,
	0x23, 0x0a, 0x1f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41,
	0x49, 0x52, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x49,
	0x56, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4f,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x23, 0x0a,
	0x1f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52,
	0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x57, 0x4d, 0x49, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x10, 0x13, 0x12, 0x20, 0x0a,
	0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x14, 0x12,
	0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x15, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f,
	0x50, 0x10, 0x16, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x45,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x17, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x57,
	0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x19, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x1a, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x1b, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x4d,
	0x41, 0x50, 0x48, 0x4f, 0x52, 0x45, 0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4a, 0x4f, 0x42, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x1e, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x1f, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x41,
	0x4c, 0x50, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x20, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x21, 0x12, 0x22,
	0x0a, 0x1e, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x22, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x23, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x53, 0x41,
	0x4d, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x24, 0x12, 0x23, 0x0a, 0x1f, 0x57, 0x49,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x25, 0x12,
	0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x2a,
	0xda, 0x02, 0x0a, 0x13, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4e, 0x53, 0x5f, 0x41,
	0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x4e, 0x53, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x54, 0x52,
	0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a,
	0x27, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x4e,
	0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x63, 0x42, 0xed, 0x01, 0x0a,
	0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x63, 0x73, 0x66, 0x2e, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a,
	0x45, 0x6e, 0x75, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6c, 0x6c, 0x6c, 0x61, 0x62,
	0x68, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x67, 0x6f,
	0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x63, 0x73, 0x66, 0x2f, 0x76, 0x31, 0x5f, 0x32, 0x5f, 0x30,
	0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0xa2, 0x02,
	0x04, 0x4f, 0x56, 0x4f, 0x45, 0xaa, 0x02, 0x17, 0x4f, 0x63, 0x73, 0x66, 0x2e, 0x56, 0x31, 0x32,
	0x30, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xca,
	0x02, 0x17, 0x4f, 0x63, 0x73, 0x66, 0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0xe2, 0x02, 0x23, 0x4f, 0x63, 0x73, 0x66,
	0x5c, 0x56, 0x31, 0x32, 0x30, 0x5c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5c, 0x45, 0x6e,
	0x75, 0x6d, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1a, 0x4f, 0x63, 0x73, 0x66, 0x3a, 0x3a, 0x56, 0x31, 0x32, 0x30, 0x3a, 0x3a, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescOnce sync.Once
	file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescData = file_ocsf_v1_2_0_objects_enums_enums_proto_rawDesc
)

func file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescGZIP() []byte {
	file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescOnce.Do(func() {
		file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescData)
	})
	return file_ocsf_v1_2_0_objects_enums_enums_proto_rawDescData
}

var file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 44)
var file_ocsf_v1_2_0_objects_enums_enums_proto_goTypes = []interface{}{
	(KERNEL_TYPE_ID)(0),                          // 0: ocsf.v1_2_0.objects.enums.KERNEL_TYPE_ID
	(USER_TYPE_ID)(0),                            // 1: ocsf.v1_2_0.objects.enums.USER_TYPE_ID
	(ACCOUNT_TYPE_ID)(0),                         // 2: ocsf.v1_2_0.objects.enums.ACCOUNT_TYPE_ID
	(ANALYTIC_TYPE_ID)(0),                        // 3: ocsf.v1_2_0.objects.enums.ANALYTIC_TYPE_ID
	(DEVICE_RISK_LEVEL_ID)(0),                    // 4: ocsf.v1_2_0.objects.enums.DEVICE_RISK_LEVEL_ID
	(SECURITY_STATE_STATE_ID)(0),                 // 5: ocsf.v1_2_0.objects.enums.SECURITY_STATE_STATE_ID
	(REG_VALUE_TYPE_ID)(0),                       // 6: ocsf.v1_2_0.objects.enums.REG_VALUE_TYPE_ID
	(USER_RISK_LEVEL_ID)(0),                      // 7: ocsf.v1_2_0.objects.enums.USER_RISK_LEVEL_ID
	(URL_CATEGORY_IDS)(0),                        // 8: ocsf.v1_2_0.objects.enums.URL_CATEGORY_IDS
	(NETWORK_CONNECTION_INFO_BOUNDARY_ID)(0),     // 9: ocsf.v1_2_0.objects.enums.NETWORK_CONNECTION_INFO_BOUNDARY_ID
	(KILL_CHAIN_PHASE_PHASE_ID)(0),               // 10: ocsf.v1_2_0.objects.enums.KILL_CHAIN_PHASE_PHASE_ID
	(NETWORK_CONNECTION_INFO_DIRECTION_ID)(0),    // 11: ocsf.v1_2_0.objects.enums.NETWORK_CONNECTION_INFO_DIRECTION_ID
	(JOB_RUN_STATE_ID)(0),                        // 12: ocsf.v1_2_0.objects.enums.JOB_RUN_STATE_ID
	(DIGITAL_SIGNATURE_ALGORITHM_ID)(0),          // 13: ocsf.v1_2_0.objects.enums.DIGITAL_SIGNATURE_ALGORITHM_ID
	(OBSERVABLE_TYPE_ID)(0),                      // 14: ocsf.v1_2_0.objects.enums.OBSERVABLE_TYPE_ID
	(DATA_SECURITY_DETECTION_SYSTEM_ID)(0),       // 15: ocsf.v1_2_0.objects.enums.DATA_SECURITY_DETECTION_SYSTEM_ID
	(MODULE_LOAD_TYPE_ID)(0),                     // 16: ocsf.v1_2_0.objects.enums.MODULE_LOAD_TYPE_ID
	(FILE_CONFIDENTIALITY_ID)(0),                 // 17: ocsf.v1_2_0.objects.enums.FILE_CONFIDENTIALITY_ID
	(NETWORK_ENDPOINT_TYPE_ID)(0),                // 18: ocsf.v1_2_0.objects.enums.NETWORK_ENDPOINT_TYPE_ID
	(MALWARE_CLASSIFICATION_IDS)(0),              // 19: ocsf.v1_2_0.objects.enums.MALWARE_CLASSIFICATION_IDS
	(DATABUCKET_TYPE_ID)(0),                      // 20: ocsf.v1_2_0.objects.enums.DATABUCKET_TYPE_ID
	(TLS_EXTENSION_TYPE_ID)(0),                   // 21: ocsf.v1_2_0.objects.enums.TLS_EXTENSION_TYPE_ID
	(DATABASE_TYPE_ID)(0),                        // 22: ocsf.v1_2_0.objects.enums.DATABASE_TYPE_ID
	(COMPLIANCE_STATUS_ID)(0),                    // 23: ocsf.v1_2_0.objects.enums.COMPLIANCE_STATUS_ID
	(DATA_SECURITY_DATA_LIFECYCLE_STATE_ID)(0),   // 24: ocsf.v1_2_0.objects.enums.DATA_SECURITY_DATA_LIFECYCLE_STATE_ID
	(REPUTATION_SCORE_ID)(0),                     // 25: ocsf.v1_2_0.objects.enums.REPUTATION_SCORE_ID
	(FILE_TYPE_ID)(0),                            // 26: ocsf.v1_2_0.objects.enums.FILE_TYPE_ID
	(DATA_SECURITY_CONFIDENTIALITY_ID)(0),        // 27: ocsf.v1_2_0.objects.enums.DATA_SECURITY_CONFIDENTIALITY_ID
	(AGENT_TYPE_ID)(0),                           // 28: ocsf.v1_2_0.objects.enums.AGENT_TYPE_ID
	(NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID)(0), // 29: ocsf.v1_2_0.objects.enums.NETWORK_CONNECTION_INFO_PROTOCOL_VER_ID
	(SCAN_TYPE_ID)(0),                            // 30: ocsf.v1_2_0.objects.enums.SCAN_TYPE_ID
	(NETWORK_INTERFACE_TYPE_ID)(0),               // 31: ocsf.v1_2_0.objects.enums.NETWORK_INTERFACE_TYPE_ID
	(OS_TYPE_ID)(0),                              // 32: ocsf.v1_2_0.objects.enums.OS_TYPE_ID
	(DEVICE_TYPE_ID)(0),                          // 33: ocsf.v1_2_0.objects.enums.DEVICE_TYPE_ID
	(NETWORK_PROXY_TYPE_ID)(0),                   // 34: ocsf.v1_2_0.objects.enums.NETWORK_PROXY_TYPE_ID
	(AUTH_FACTOR_FACTOR_TYPE_ID)(0),              // 35: ocsf.v1_2_0.objects.enums.AUTH_FACTOR_FACTOR_TYPE_ID
	(DATA_SECURITY_CATEGORY_ID)(0),               // 36: ocsf.v1_2_0.objects.enums.DATA_SECURITY_CATEGORY_ID
	(DATA_CLASSIFICATION_CONFIDENTIALITY_ID)(0),  // 37: ocsf.v1_2_0.objects.enums.DATA_CLASSIFICATION_CONFIDENTIALITY_ID
	(FINGERPRINT_ALGORITHM_ID)(0),                // 38: ocsf.v1_2_0.objects.enums.FINGERPRINT_ALGORITHM_ID
	(DNS_QUERY_OPCODE_ID)(0),                     // 39: ocsf.v1_2_0.objects.enums.DNS_QUERY_OPCODE_ID
	(PROCESS_INTEGRITY_ID)(0),                    // 40: ocsf.v1_2_0.objects.enums.PROCESS_INTEGRITY_ID
	(DATA_CLASSIFICATION_CATEGORY_ID)(0),         // 41: ocsf.v1_2_0.objects.enums.DATA_CLASSIFICATION_CATEGORY_ID
	(WIN_RESOURCE_TYPE_ID)(0),                    // 42: ocsf.v1_2_0.objects.enums.WIN_RESOURCE_TYPE_ID
	(DNS_ANSWER_FLAG_IDS)(0),                     // 43: ocsf.v1_2_0.objects.enums.DNS_ANSWER_FLAG_IDS
}
var file_ocsf_v1_2_0_objects_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsf_v1_2_0_objects_enums_enums_proto_init() }
func file_ocsf_v1_2_0_objects_enums_enums_proto_init() {
	if File_ocsf_v1_2_0_objects_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsf_v1_2_0_objects_enums_enums_proto_rawDesc,
			NumEnums:      44,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocsf_v1_2_0_objects_enums_enums_proto_goTypes,
		DependencyIndexes: file_ocsf_v1_2_0_objects_enums_enums_proto_depIdxs,
		EnumInfos:         file_ocsf_v1_2_0_objects_enums_enums_proto_enumTypes,
	}.Build()
	File_ocsf_v1_2_0_objects_enums_enums_proto = out.File
	file_ocsf_v1_2_0_objects_enums_enums_proto_rawDesc = nil
	file_ocsf_v1_2_0_objects_enums_enums_proto_goTypes = nil
	file_ocsf_v1_2_0_objects_enums_enums_proto_depIdxs = nil
}
